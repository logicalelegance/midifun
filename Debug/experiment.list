
experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ccc  08008ccc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008ccc  08008ccc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ccc  08008ccc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  200001dc  08008eb0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001384  08008eb0  00021384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fb7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039af  00000000  00000000  000391c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001170  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021297  00000000  00000000  0003ec90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a41  00000000  00000000  0005ff27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5879  00000000  00000000  00072968  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001281e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  0012825c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008658 	.word	0x08008658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008658 	.word	0x08008658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <test2>:
#define WAVE_SAMPLES 441

static uint16_t sinwave[WAVE_SAMPLES];

void test2(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int i = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
	for (; i < WAVE_SAMPLES/2; i++) {
 800028a:	e013      	b.n	80002b4 <test2+0x34>
		sinwave[i] = i * 295;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b29b      	uxth	r3, r3
 8000290:	461a      	mov	r2, r3
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	1ad2      	subs	r2, r2, r3
 8000296:	0092      	lsls	r2, r2, #2
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	461a      	mov	r2, r3
 800029c:	0091      	lsls	r1, r2, #2
 800029e:	461a      	mov	r2, r3
 80002a0:	460b      	mov	r3, r1
 80002a2:	4413      	add	r3, r2
 80002a4:	b299      	uxth	r1, r3
 80002a6:	4a1d      	ldr	r2, [pc, #116]	; (800031c <test2+0x9c>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (; i < WAVE_SAMPLES/2; i++) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2bdb      	cmp	r3, #219	; 0xdb
 80002b8:	dde8      	ble.n	800028c <test2+0xc>
	}

	for (; i < WAVE_SAMPLES; i++) {
 80002ba:	e016      	b.n	80002ea <test2+0x6a>
		sinwave[i] = (WAVE_SAMPLES - i) * 295;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f5c3 73dc 	rsb	r3, r3, #440	; 0x1b8
 80002c2:	3301      	adds	r3, #1
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	461a      	mov	r2, r3
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	1ad2      	subs	r2, r2, r3
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	461a      	mov	r2, r3
 80002d2:	0091      	lsls	r1, r2, #2
 80002d4:	461a      	mov	r2, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	4413      	add	r3, r2
 80002da:	b299      	uxth	r1, r3
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <test2+0x9c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (; i < WAVE_SAMPLES; i++) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80002f0:	dde4      	ble.n	80002bc <test2+0x3c>
	}

	for (int i = 0; i < 1000; i++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	e009      	b.n	800030c <test2+0x8c>
		HAL_I2S_Transmit(&hi2s3, sinwave, WAVE_SAMPLES, 20);
 80002f8:	2314      	movs	r3, #20
 80002fa:	f240 12b9 	movw	r2, #441	; 0x1b9
 80002fe:	4907      	ldr	r1, [pc, #28]	; (800031c <test2+0x9c>)
 8000300:	4807      	ldr	r0, [pc, #28]	; (8000320 <test2+0xa0>)
 8000302:	f002 fbf5 	bl	8002af0 <HAL_I2S_Transmit>
	for (int i = 0; i < 1000; i++) {
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000312:	dbf1      	blt.n	80002f8 <test2+0x78>
	}
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200001f8 	.word	0x200001f8
 8000320:	20001334 	.word	0x20001334

08000324 <ConsoleCommandMatch>:
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char *pChar); // this could be replaced with itoa (intVal, str, 16);

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char *name, const char *buffer) {
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]

	if (buffer[i] == name[i]) {
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	4413      	add	r3, r2
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	440b      	add	r3, r1
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d114      	bne.n	8000374 <ConsoleCommandMatch+0x50>
		result = 1u;
 800034a:	2301      	movs	r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
		i++;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
	}

	while ((1u == result) && (i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH)
 8000354:	e00e      	b.n	8000374 <ConsoleCommandMatch+0x50>
			&& (buffer[i] != PARAMETER_SEPARATER) && (buffer[i] != LF_CHAR)
			&& (buffer[i] != CR_CHAR) && (buffer[i] != (char) NULL_CHAR)) {
		if (buffer[i] != name[i]) {
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	4413      	add	r3, r2
 800035c:	781a      	ldrb	r2, [r3, #0]
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	440b      	add	r3, r1
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d001      	beq.n	800036e <ConsoleCommandMatch+0x4a>
			result = 0u;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
		}
		i++;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3301      	adds	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]
	while ((1u == result) && (i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d11a      	bne.n	80003b0 <ConsoleCommandMatch+0x8c>
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b09      	cmp	r3, #9
 800037e:	d817      	bhi.n	80003b0 <ConsoleCommandMatch+0x8c>
			&& (buffer[i] != PARAMETER_SEPARATER) && (buffer[i] != LF_CHAR)
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b20      	cmp	r3, #32
 800038a:	d011      	beq.n	80003b0 <ConsoleCommandMatch+0x8c>
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	4413      	add	r3, r2
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b0a      	cmp	r3, #10
 8000396:	d00b      	beq.n	80003b0 <ConsoleCommandMatch+0x8c>
			&& (buffer[i] != CR_CHAR) && (buffer[i] != (char) NULL_CHAR)) {
 8000398:	683a      	ldr	r2, [r7, #0]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	4413      	add	r3, r2
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b0d      	cmp	r3, #13
 80003a2:	d005      	beq.n	80003b0 <ConsoleCommandMatch+0x8c>
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d1d2      	bne.n	8000356 <ConsoleCommandMatch+0x32>
	}

	return result;
 80003b0:	68bb      	ldr	r3, [r7, #8]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3714      	adds	r7, #20
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[],
		const uint32_t filledLength, uint32_t usedSoFar) {
 80003be:	b480      	push	{r7}
 80003c0:	b087      	sub	sp, #28
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength) {
 80003ce:	e00d      	b.n	80003ec <ConsoleResetBuffer+0x2e>
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	441a      	add	r2, r3
 80003d6:	68f9      	ldr	r1, [r7, #12]
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	440b      	add	r3, r1
 80003dc:	7812      	ldrb	r2, [r2, #0]
 80003de:	701a      	strb	r2, [r3, #0]
		i++;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	3301      	adds	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength) {
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d3ed      	bcc.n	80003d0 <ConsoleResetBuffer+0x12>
	}
	for ( /* nothing */; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 80003f4:	e007      	b.n	8000406 <ConsoleResetBuffer+0x48>
		receiveBuffer[i] = NULL_CHAR;
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	4413      	add	r3, r2
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3301      	adds	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	2bff      	cmp	r3, #255	; 0xff
 800040a:	d9f4      	bls.n	80003f6 <ConsoleResetBuffer+0x38>
	}
	return (filledLength - usedSoFar);
 800040c:	68ba      	ldr	r2, [r7, #8]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	1ad3      	subs	r3, r2, r3
}
 8000412:	4618      	mov	r0, r3
 8000414:	371c      	adds	r7, #28
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[],
		const uint32_t filledLength) {
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800042c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000430:	60bb      	str	r3, [r7, #8]

	while (( CR_CHAR != receiveBuffer[i]) && (LF_CHAR != receiveBuffer[i])
 8000432:	e002      	b.n	800043a <ConsoleCommandEndline+0x1c>
			&& (i < filledLength)) {
		i++;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
	while (( CR_CHAR != receiveBuffer[i]) && (LF_CHAR != receiveBuffer[i])
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4413      	add	r3, r2
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b0d      	cmp	r3, #13
 8000444:	d009      	beq.n	800045a <ConsoleCommandEndline+0x3c>
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	4413      	add	r3, r2
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b0a      	cmp	r3, #10
 8000450:	d003      	beq.n	800045a <ConsoleCommandEndline+0x3c>
			&& (i < filledLength)) {
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	429a      	cmp	r2, r3
 8000458:	d3ec      	bcc.n	8000434 <ConsoleCommandEndline+0x16>
	}
	if (i < filledLength) {
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d201      	bcs.n	8000466 <ConsoleCommandEndline+0x48>
		result = i;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000466:	68bb      	ldr	r3, [r7, #8]
}
 8000468:	4618      	mov	r0, r3
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *uart) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(uart);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 fb49 	bl	8000b14 <ConsoleIoInit>
	ConsoleIoSendString(
 8000482:	480f      	ldr	r0, [pc, #60]	; (80004c0 <ConsoleInit+0x4c>)
 8000484:	f000 fb86 	bl	8000b94 <ConsoleIoSendString>
			"MIDI Thingy");
	ConsoleIoSendString(STR_ENDLINE);
 8000488:	480e      	ldr	r0, [pc, #56]	; (80004c4 <ConsoleInit+0x50>)
 800048a:	f000 fb83 	bl	8000b94 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <ConsoleInit+0x54>)
 8000490:	f000 fb80 	bl	8000b94 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <ConsoleInit+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	e007      	b.n	80004b0 <ConsoleInit+0x3c>
		mReceiveBuffer[i] = NULL_CHAR;
 80004a0:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <ConsoleInit+0x5c>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4413      	add	r3, r2
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2bff      	cmp	r3, #255	; 0xff
 80004b4:	d9f4      	bls.n	80004a0 <ConsoleInit+0x2c>
	}

}
 80004b6:	bf00      	nop
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08008670 	.word	0x08008670
 80004c4:	0800867c 	.word	0x0800867c
 80004c8:	08008680 	.word	0x08008680
 80004cc:	20000dc0 	.word	0x20000dc0
 80004d0:	20000dc4 	.word	0x20000dc4

080004d4 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
	const sConsoleCommandTable_T *commandTable;
	uint32_t received = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
	uint32_t cmdIndex;
	int32_t cmdEndline;
	int32_t found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*) &(mReceiveBuffer[mReceivedSoFar]),
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <ConsoleProcess+0x140>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a4d      	ldr	r2, [pc, #308]	; (8000618 <ConsoleProcess+0x144>)
 80004e4:	1898      	adds	r0, r3, r2
 80004e6:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <ConsoleProcess+0x140>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80004ee:	463a      	mov	r2, r7
 80004f0:	4619      	mov	r1, r3
 80004f2:	f000 fb1f 	bl	8000b34 <ConsoleIoReceive>
			( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar), &received);
	if (received > 0u) {
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f000 8087 	beq.w	800060c <ConsoleProcess+0x138>
		mReceivedSoFar += received;
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <ConsoleProcess+0x140>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4a43      	ldr	r2, [pc, #268]	; (8000614 <ConsoleProcess+0x140>)
 8000508:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <ConsoleProcess+0x140>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4619      	mov	r1, r3
 8000510:	4841      	ldr	r0, [pc, #260]	; (8000618 <ConsoleProcess+0x144>)
 8000512:	f7ff ff84 	bl	800041e <ConsoleCommandEndline>
 8000516:	60f8      	str	r0, [r7, #12]
		if (cmdEndline >= 0) {  // have complete string, find command
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b00      	cmp	r3, #0
 800051c:	db76      	blt.n	800060c <ConsoleProcess+0x138>

			// Print a line feed.
			printf("\n\r");
 800051e:	483f      	ldr	r0, [pc, #252]	; (800061c <ConsoleProcess+0x148>)
 8000520:	f007 f900 	bl	8007724 <iprintf>

			commandTable = ConsoleCommandsGetTable();
 8000524:	f000 face 	bl	8000ac4 <ConsoleCommandsGetTable>
 8000528:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000532:	613b      	str	r3, [r7, #16]
			while (( NULL != commandTable[cmdIndex].name)
 8000534:	e03d      	b.n	80005b2 <ConsoleProcess+0xde>
					&& ( NOT_FOUND == found)) {
				if (ConsoleCommandMatch(commandTable[cmdIndex].name,
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	4613      	mov	r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4413      	add	r3, r2
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	461a      	mov	r2, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4413      	add	r3, r2
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4933      	ldr	r1, [pc, #204]	; (8000618 <ConsoleProcess+0x144>)
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff feea 	bl	8000324 <ConsoleCommandMatch>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d02a      	beq.n	80005ac <ConsoleProcess+0xd8>
						mReceiveBuffer)) {
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	4613      	mov	r3, r2
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	4413      	add	r3, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	461a      	mov	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	4413      	add	r3, r2
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <ConsoleProcess+0x144>)
 800056a:	4798      	blx	r3
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
					if (COMMAND_SUCCESS != result) {
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d017      	beq.n	80005a6 <ConsoleProcess+0xd2>
						ConsoleIoSendString("Error: ");
 8000576:	482a      	ldr	r0, [pc, #168]	; (8000620 <ConsoleProcess+0x14c>)
 8000578:	f000 fb0c 	bl	8000b94 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 800057c:	4826      	ldr	r0, [pc, #152]	; (8000618 <ConsoleProcess+0x144>)
 800057e:	f000 fb09 	bl	8000b94 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8000582:	4828      	ldr	r0, [pc, #160]	; (8000624 <ConsoleProcess+0x150>)
 8000584:	f000 fb06 	bl	8000b94 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	461a      	mov	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4413      	add	r3, r2
 8000598:	3308      	adds	r3, #8
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fafa 	bl	8000b94 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80005a0:	4821      	ldr	r0, [pc, #132]	; (8000628 <ConsoleProcess+0x154>)
 80005a2:	f000 faf7 	bl	8000b94 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	e002      	b.n	80005b2 <ConsoleProcess+0xde>
				} else {
					cmdIndex++;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3301      	adds	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
			while (( NULL != commandTable[cmdIndex].name)
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	4613      	mov	r3, r2
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	4413      	add	r3, r2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	461a      	mov	r2, r3
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <ConsoleProcess+0xfc>
					&& ( NOT_FOUND == found)) {
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005ce:	d0b2      	beq.n	8000536 <ConsoleProcess+0x62>

				}
			}
			if ((cmdEndline != 0) && ( NOT_FOUND == found)) {
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00d      	beq.n	80005f2 <ConsoleProcess+0x11e>
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005dc:	d109      	bne.n	80005f2 <ConsoleProcess+0x11e>
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <ConsoleProcess+0x140>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d905      	bls.n	80005f2 <ConsoleProcess+0x11e>
						{
					ConsoleIoSendString("Command not found.");
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <ConsoleProcess+0x158>)
 80005e8:	f000 fad4 	bl	8000b94 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <ConsoleProcess+0x154>)
 80005ee:	f000 fad1 	bl	8000b94 <ConsoleIoSendString>
				}
			}
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar,
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <ConsoleProcess+0x140>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <ConsoleProcess+0x144>)
 80005fc:	f7ff fedf 	bl	80003be <ConsoleResetBuffer>
 8000600:	4602      	mov	r2, r0
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <ConsoleProcess+0x140>)
 8000604:	601a      	str	r2, [r3, #0]
					cmdEndline);
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <ConsoleProcess+0x15c>)
 8000608:	f000 fac4 	bl	8000b94 <ConsoleIoSendString>
		}
	}
}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000dc0 	.word	0x20000dc0
 8000618:	20000dc4 	.word	0x20000dc4
 800061c:	08008684 	.word	0x08008684
 8000620:	08008688 	.word	0x08008688
 8000624:	08008690 	.word	0x08008690
 8000628:	0800867c 	.word	0x0800867c
 800062c:	08008698 	.word	0x08008698
 8000630:	08008680 	.word	0x08008680

08000634 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char *buffer,
		const uint8_t parameterNumber, uint32_t *startLocation) {
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	460b      	mov	r3, r1
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800064a:	2300      	movs	r3, #0
 800064c:	75fb      	strb	r3, [r7, #23]

	while ((parameterNumber != parameterIndex)
 800064e:	e00b      	b.n	8000668 <ConsoleParamFindN+0x34>
			&& (bufferIndex < CONSOLE_COMMAND_MAX_LENGTH)) {
		if ( PARAMETER_SEPARATER == buffer[bufferIndex]) {
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b20      	cmp	r3, #32
 800065a:	d102      	bne.n	8000662 <ConsoleParamFindN+0x2e>
			parameterIndex++;
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	3301      	adds	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3301      	adds	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
	while ((parameterNumber != parameterIndex)
 8000668:	7afb      	ldrb	r3, [r7, #11]
 800066a:	69ba      	ldr	r2, [r7, #24]
 800066c:	429a      	cmp	r2, r3
 800066e:	d002      	beq.n	8000676 <ConsoleParamFindN+0x42>
			&& (bufferIndex < CONSOLE_COMMAND_MAX_LENGTH)) {
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	2bff      	cmp	r3, #255	; 0xff
 8000674:	d9ec      	bls.n	8000650 <ConsoleParamFindN+0x1c>
	}
	if ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex) {
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800067c:	d102      	bne.n	8000684 <ConsoleParamFindN+0x50>
		result = COMMAND_PARAMETER_ERROR;
 800067e:	2310      	movs	r3, #16
 8000680:	75fb      	strb	r3, [r7, #23]
 8000682:	e002      	b.n	800068a <ConsoleParamFindN+0x56>
	} else {
		*startLocation = bufferIndex;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	601a      	str	r2, [r3, #0]
	}
	return result;
 800068a:	7dfb      	ldrb	r3, [r7, #23]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3724      	adds	r7, #36	; 0x24
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char *buffer,
		const uint8_t parameterNumber, int16_t *parameterInt) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	460b      	mov	r3, r1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80006aa:	f107 021c 	add.w	r2, r7, #28
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	4619      	mov	r1, r3
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f7ff ffbe 	bl	8000634 <ConsoleParamFindN>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	4413      	add	r3, r2
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while (( LF_CHAR != charVal) && ( CR_CHAR != charVal)
 80006d2:	e011      	b.n	80006f8 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal) && (i < INT16_MAX_STR_LENGTH)) {
		str[i] = charVal;					// copy the relevant part
 80006d4:	f107 0214 	add.w	r2, r7, #20
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	4413      	add	r3, r2
 80006dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80006e0:	701a      	strb	r2, [r3, #0]
		i++;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	3301      	adds	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ec:	4413      	add	r3, r2
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while (( LF_CHAR != charVal) && ( CR_CHAR != charVal)
 80006f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	d00a      	beq.n	8000716 <ConsoleReceiveParamInt16+0x7e>
 8000700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000704:	2b0d      	cmp	r3, #13
 8000706:	d006      	beq.n	8000716 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal) && (i < INT16_MAX_STR_LENGTH)) {
 8000708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800070c:	2b20      	cmp	r3, #32
 800070e:	d002      	beq.n	8000716 <ConsoleReceiveParamInt16+0x7e>
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	2b07      	cmp	r3, #7
 8000714:	d9de      	bls.n	80006d4 <ConsoleReceiveParamInt16+0x3c>
	}
	if (i == INT16_MAX_STR_LENGTH) {
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	2b08      	cmp	r3, #8
 800071a:	d102      	bne.n	8000722 <ConsoleReceiveParamInt16+0x8a>
		result = COMMAND_PARAMETER_ERROR;
 800071c:	2310      	movs	r3, #16
 800071e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if (COMMAND_SUCCESS == result) {
 8000722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10e      	bne.n	8000748 <ConsoleReceiveParamInt16+0xb0>
		str[i] = NULL_CHAR;
 800072a:	f107 0214 	add.w	r2, r7, #20
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	4413      	add	r3, r2
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f006 ffaf 	bl	800769e <atoi>
 8000740:	4603      	mov	r3, r0
 8000742:	b21a      	sxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800074c:	4618      	mov	r0, r3
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char *buffer,
		const uint8_t parameterNumber, uint16_t *parameterUint16) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	460b      	mov	r3, r1
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800076a:	f107 0218 	add.w	r2, r7, #24
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	4619      	mov	r1, r3
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f7ff ff5e 	bl	8000634 <ConsoleParamFindN>
 8000778:	4603      	mov	r3, r0
 800077a:	77fb      	strb	r3, [r7, #31]
	if (COMMAND_SUCCESS == result) {
 800077c:	7ffb      	ldrb	r3, [r7, #31]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d12c      	bne.n	80007dc <ConsoleReceiveParamHexUint16+0x88>
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for (i = 0u; i < 4u; i++)  // U16 must be less than 4 hex digits: 0xFFFF
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
 8000786:	e01e      	b.n	80007c6 <ConsoleReceiveParamHexUint16+0x72>
				{
			if (COMMAND_SUCCESS == result) {
 8000788:	7ffb      	ldrb	r3, [r7, #31]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10d      	bne.n	80007aa <ConsoleReceiveParamHexUint16+0x56>
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i],
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	4413      	add	r3, r2
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f107 0217 	add.w	r2, r7, #23
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f820 	bl	80007e6 <ConsoleUtilHexCharToInt>
 80007a6:	4603      	mov	r3, r0
 80007a8:	77fb      	strb	r3, [r7, #31]
						&tmpUint8);
			}
			if (COMMAND_SUCCESS == result) {
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d107      	bne.n	80007c0 <ConsoleReceiveParamHexUint16+0x6c>
				value = (value << 4u);
 80007b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007bc:	4413      	add	r3, r2
 80007be:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (i = 0u; i < 4u; i++)  // U16 must be less than 4 hex digits: 0xFFFF
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	3301      	adds	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d9dd      	bls.n	8000788 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if (COMMAND_PARAMETER_END == result) {
 80007cc:	7ffb      	ldrb	r3, [r7, #31]
 80007ce:	2b11      	cmp	r3, #17
 80007d0:	d101      	bne.n	80007d6 <ConsoleReceiveParamHexUint16+0x82>
			result = COMMAND_SUCCESS;
 80007d2:	2300      	movs	r3, #0
 80007d4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007da:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <ConsoleUtilHexCharToInt>:

	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t *pInt) {
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	6039      	str	r1, [r7, #0]
 80007f0:	71fb      	strb	r3, [r7, #7]
	eCommandResult_T result = COMMAND_SUCCESS;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]

	if (('0' <= charVal) && (charVal <= '9')) {
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b2f      	cmp	r3, #47	; 0x2f
 80007fa:	d908      	bls.n	800080e <ConsoleUtilHexCharToInt+0x28>
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b39      	cmp	r3, #57	; 0x39
 8000800:	d805      	bhi.n	800080e <ConsoleUtilHexCharToInt+0x28>
		*pInt = charVal - '0';
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	3b30      	subs	r3, #48	; 0x30
 8000806:	b2da      	uxtb	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	e025      	b.n	800085a <ConsoleUtilHexCharToInt+0x74>
	} else if (('A' <= charVal) && (charVal <= 'F')) {
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d908      	bls.n	8000826 <ConsoleUtilHexCharToInt+0x40>
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b46      	cmp	r3, #70	; 0x46
 8000818:	d805      	bhi.n	8000826 <ConsoleUtilHexCharToInt+0x40>
		*pInt = 10u + charVal - 'A';
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	3b37      	subs	r3, #55	; 0x37
 800081e:	b2da      	uxtb	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e019      	b.n	800085a <ConsoleUtilHexCharToInt+0x74>
	} else if (('a' <= charVal) && (charVal <= 'f')) {
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b60      	cmp	r3, #96	; 0x60
 800082a:	d908      	bls.n	800083e <ConsoleUtilHexCharToInt+0x58>
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b66      	cmp	r3, #102	; 0x66
 8000830:	d805      	bhi.n	800083e <ConsoleUtilHexCharToInt+0x58>
		*pInt = 10u + charVal - 'a';
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3b57      	subs	r3, #87	; 0x57
 8000836:	b2da      	uxtb	r2, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e00d      	b.n	800085a <ConsoleUtilHexCharToInt+0x74>
	} else if (( LF_CHAR != charVal) || ( CR_CHAR != charVal)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b0a      	cmp	r3, #10
 8000842:	d105      	bne.n	8000850 <ConsoleUtilHexCharToInt+0x6a>
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0d      	cmp	r3, #13
 8000848:	d102      	bne.n	8000850 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal)) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b20      	cmp	r3, #32
 800084e:	d102      	bne.n	8000856 <ConsoleUtilHexCharToInt+0x70>
		result = COMMAND_PARAMETER_END;
 8000850:	2311      	movs	r3, #17
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e001      	b.n	800085a <ConsoleUtilHexCharToInt+0x74>

	} else {
		result = COMMAND_PARAMETER_ERROR;
 8000856:	2310      	movs	r3, #16
 8000858:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <ConsoleCommandComment>:
		{ "displayinit", &ConsoleCommandDisplayInit, HELP("Initialize display controller") },
		{ "audiotest", &ConsoleCommandAudioTest, HELP("Test I2S output") },
		CONSOLE_COMMAND_TABLE_END // must be LAST
		};

static eCommandResult_T ConsoleCommandComment(const char buffer[]) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[]) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000888:	2300      	movs	r3, #0
 800088a:	74fb      	strb	r3, [r7, #19]

	IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable)
 800088c:	230a      	movs	r3, #10
 800088e:	60fb      	str	r3, [r7, #12]
			/ sizeof(mConsoleCommandTable[0]);
	for (i = 0u; i < tableLength - 1u; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e01e      	b.n	80008d4 <ConsoleCommandHelp+0x54>
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000896:	4914      	ldr	r1, [pc, #80]	; (80008e8 <ConsoleCommandHelp+0x68>)
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4613      	mov	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f974 	bl	8000b94 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <ConsoleCommandHelp+0x6c>)
 80008ae:	f000 f971 	bl	8000b94 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4613      	mov	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	3308      	adds	r3, #8
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <ConsoleCommandHelp+0x68>)
 80008c0:	4413      	add	r3, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f966 	bl	8000b94 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <ConsoleCommandHelp+0x70>)
 80008ca:	f000 f963 	bl	8000b94 <ConsoleIoSendString>
	for (i = 0u; i < tableLength - 1u; i++) {
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3db      	bcc.n	8000896 <ConsoleCommandHelp+0x16>
	}
	return result;
 80008de:	7cfb      	ldrb	r3, [r7, #19]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080087a8 	.word	0x080087a8
 80008ec:	08008708 	.word	0x08008708
 80008f0:	0800870c 	.word	0x0800870c

080008f4 <ConsoleCommandDisplayInit>:

static eCommandResult_T ConsoleCommandDisplayInit(const char buffer[]) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	test1();
 80008fc:	f000 fab8 	bl	8000e70 <test1>
}
 8000900:	bf00      	nop
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <ConsoleCommandAudioTest>:

static eCommandResult_T ConsoleCommandAudioTest(const char buffer[]) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	test2();
 8000912:	f7ff fcb5 	bl	8000280 <test2>
}
 8000916:	bf00      	nop
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <ConsoleCommandMidiStats>:

static eCommandResult_T ConsoleCommandMidiStats(const char buffer[]) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	MIDI_Print_Stats();
 8000928:	f000 fd20 	bl	800136c <MIDI_Print_Stats>
}
 800092c:	bf00      	nop
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <ConsoleCommandMidiNoteOn>:

static eCommandResult_T ConsoleCommandMidiNoteOn(const char buffer[]) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	uint16_t noteVal;
	eCommandResult_T result;

	result = ConsoleReceiveParamHexUint16(buffer, 1, &noteVal);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	461a      	mov	r2, r3
 8000944:	2101      	movs	r1, #1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff04 	bl	8000754 <ConsoleReceiveParamHexUint16>
 800094c:	4603      	mov	r3, r0
 800094e:	73fb      	strb	r3, [r7, #15]
	if (COMMAND_SUCCESS == result) {
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <ConsoleCommandMidiNoteOn+0x2e>
		MIDI_Send_NoteOnMsg(1, noteVal, 127);
 8000956:	89bb      	ldrh	r3, [r7, #12]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	227f      	movs	r2, #127	; 0x7f
 800095c:	4619      	mov	r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fb64 	bl	800102c <MIDI_Send_NoteOnMsg>
	}
	return result;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <ConsoleCommandMidiAllNotesOff>:

static eCommandResult_T ConsoleCommandMidiAllNotesOff(const char buffer[]) {
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	uint16_t noteVal;
	eCommandResult_T result;

	MIDI_Send_AllNotesOffMsg(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f000 fba2 	bl	80010c0 <MIDI_Send_AllNotesOffMsg>
	return COMMAND_SUCCESS;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <ConsoleCommandMidiTestSequence>:

static eCommandResult_T ConsoleCommandMidiTestSequence(const char buffer[]) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	uint16_t noteVals[6];
	uint16_t runCount = 10;
 800098e:	230a      	movs	r3, #10
 8000990:	82fb      	strh	r3, [r7, #22]
	eCommandResult_T result;

	result = ConsoleReceiveParamInt16(buffer, 1, &noteVals[0]);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	461a      	mov	r2, r3
 8000998:	2101      	movs	r1, #1
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fe7c 	bl	8000698 <ConsoleReceiveParamInt16>
 80009a0:	4603      	mov	r3, r0
 80009a2:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 2, &noteVals[1]);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	3302      	adds	r3, #2
 80009aa:	461a      	mov	r2, r3
 80009ac:	2102      	movs	r1, #2
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fe72 	bl	8000698 <ConsoleReceiveParamInt16>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	7d3b      	ldrb	r3, [r7, #20]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 3, &noteVals[2]);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	3304      	adds	r3, #4
 80009c4:	461a      	mov	r2, r3
 80009c6:	2103      	movs	r1, #3
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe65 	bl	8000698 <ConsoleReceiveParamInt16>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	7d3b      	ldrb	r3, [r7, #20]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 4, &noteVals[3]);
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	3306      	adds	r3, #6
 80009de:	461a      	mov	r2, r3
 80009e0:	2104      	movs	r1, #4
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fe58 	bl	8000698 <ConsoleReceiveParamInt16>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	7d3b      	ldrb	r3, [r7, #20]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 5, &noteVals[4]);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	3308      	adds	r3, #8
 80009f8:	461a      	mov	r2, r3
 80009fa:	2105      	movs	r1, #5
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fe4b 	bl	8000698 <ConsoleReceiveParamInt16>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	7d3b      	ldrb	r3, [r7, #20]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 6, &noteVals[5]);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	330a      	adds	r3, #10
 8000a12:	461a      	mov	r2, r3
 8000a14:	2106      	movs	r1, #6
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fe3e 	bl	8000698 <ConsoleReceiveParamInt16>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	7d3b      	ldrb	r3, [r7, #20]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	753b      	strb	r3, [r7, #20]

	if (COMMAND_SUCCESS == result) {
 8000a26:	7d3b      	ldrb	r3, [r7, #20]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d130      	bne.n	8000a8e <ConsoleCommandMidiTestSequence+0x108>
		uint8_t note_idx = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	757b      	strb	r3, [r7, #21]
		while (runCount--) {
 8000a30:	e025      	b.n	8000a7e <ConsoleCommandMidiTestSequence+0xf8>
			note_idx = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	757b      	strb	r3, [r7, #21]
			while (note_idx < 6) {
 8000a36:	e01f      	b.n	8000a78 <ConsoleCommandMidiTestSequence+0xf2>
				MIDI_Send_NoteOnMsg(1, noteVals[note_idx], 127);
 8000a38:	7d7b      	ldrb	r3, [r7, #21]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	f107 0218 	add.w	r2, r7, #24
 8000a40:	4413      	add	r3, r2
 8000a42:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	227f      	movs	r2, #127	; 0x7f
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 faed 	bl	800102c <MIDI_Send_NoteOnMsg>
				HAL_Delay(300);
 8000a52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a56:	f001 fbd7 	bl	8002208 <HAL_Delay>
				MIDI_Send_NoteOffMsg(1, noteVals[note_idx]);
 8000a5a:	7d7b      	ldrb	r3, [r7, #21]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	f107 0218 	add.w	r2, r7, #24
 8000a62:	4413      	add	r3, r2
 8000a64:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 faf6 	bl	800105e <MIDI_Send_NoteOffMsg>

				note_idx++;
 8000a72:	7d7b      	ldrb	r3, [r7, #21]
 8000a74:	3301      	adds	r3, #1
 8000a76:	757b      	strb	r3, [r7, #21]
			while (note_idx < 6) {
 8000a78:	7d7b      	ldrb	r3, [r7, #21]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d9dc      	bls.n	8000a38 <ConsoleCommandMidiTestSequence+0xb2>
		while (runCount--) {
 8000a7e:	8afb      	ldrh	r3, [r7, #22]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	82fa      	strh	r2, [r7, #22]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1d4      	bne.n	8000a32 <ConsoleCommandMidiTestSequence+0xac>
			}
		}
		MIDI_Send_AllNotesOffMsg(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 fb19 	bl	80010c0 <MIDI_Send_AllNotesOffMsg>
	}
	return result;
 8000a8e:	7d3b      	ldrb	r3, [r7, #20]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ConsoleCommandVer>:


static eCommandResult_T ConsoleCommandVer(const char buffer[]) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

	IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <ConsoleCommandVer+0x24>)
 8000aa6:	f000 f875 	bl	8000b94 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <ConsoleCommandVer+0x28>)
 8000aac:	f000 f872 	bl	8000b94 <ConsoleIoSendString>
	return result;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08008710 	.word	0x08008710
 8000ac0:	0800870c 	.word	0x0800870c

08000ac4 <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ConsoleCommandsGetTable+0x10>)
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	080087a8 	.word	0x080087a8

08000ad8 <getch_noblock>:
typedef int getch_status_t;

#define GOT_CHAR 1
#define NO_CHAR_AVAILABLE 0

static getch_status_t getch_noblock(char *c) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(con_uart, (uint8_t*) c, 1, 1) == HAL_OK) {
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <getch_noblock+0x38>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	f005 f9f8 	bl	8005ede <HAL_UART_Receive>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d108      	bne.n	8000b06 <getch_noblock+0x2e>

		// Echo
		HAL_UART_Transmit(con_uart, (uint8_t*) c, 1, 1);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <getch_noblock+0x38>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	2301      	movs	r3, #1
 8000afa:	2201      	movs	r2, #1
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	f005 f95b 	bl	8005db8 <HAL_UART_Transmit>
		return GOT_CHAR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <getch_noblock+0x30>
	}
	return NO_CHAR_AVAILABLE;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000056c 	.word	0x2000056c

08000b14 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *uart) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	// ASSERT(uart != NULL);
	con_uart = uart;
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <ConsoleIoInit+0x1c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
	return CONSOLE_SUCCESS;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	2000056c 	.word	0x2000056c

08000b34 <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength,
		uint32_t *readLength) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	77fb      	strb	r3, [r7, #31]
	char ch;
	getch_status_t status = GOT_CHAR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]

	if (getch_noblock(&ch) == GOT_CHAR) {
 8000b48:	f107 0317 	add.w	r3, r7, #23
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffc3 	bl	8000ad8 <getch_noblock>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d118      	bne.n	8000b8a <ConsoleIoReceive+0x56>
		while ((status == GOT_CHAR) && (i < bufferLength)) {
 8000b58:	e00d      	b.n	8000b76 <ConsoleIoReceive+0x42>
			buffer[i] = (uint8_t) ch;
 8000b5a:	7ffb      	ldrb	r3, [r7, #31]
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	7dfa      	ldrb	r2, [r7, #23]
 8000b62:	701a      	strb	r2, [r3, #0]
			i++;
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	3301      	adds	r3, #1
 8000b68:	77fb      	strb	r3, [r7, #31]
			status = getch_noblock(&ch);
 8000b6a:	f107 0317 	add.w	r3, r7, #23
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffb2 	bl	8000ad8 <getch_noblock>
 8000b74:	61b8      	str	r0, [r7, #24]
		while ((status == GOT_CHAR) && (i < bufferLength)) {
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d103      	bne.n	8000b84 <ConsoleIoReceive+0x50>
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8ea      	bhi.n	8000b5a <ConsoleIoReceive+0x26>
		}
		*readLength = i;
 8000b84:	7ffa      	ldrb	r2, [r7, #31]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
	}
	return CONSOLE_SUCCESS;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <ConsoleIoSendString>:
	printf("%s", (char*) buffer);
	*sentLength = bufferLength;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <ConsoleIoSendString+0x1c>)
 8000ba0:	f006 fdc0 	bl	8007724 <iprintf>
	return CONSOLE_SUCCESS;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08008728 	.word	0x08008728

08000bb4 <ST7735_Select>:
		ST77XX_DISPON, ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
		100 };                        //     100 ms delay


void ST7735_Select(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <ST7735_Select+0x14>)
 8000bc0:	f001 fe1e 	bl	8002800 <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	48000400 	.word	0x48000400

08000bcc <ST7735_Deselect>:

void ST7735_Deselect(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ST7735_Deselect+0x14>)
 8000bd8:	f001 fe12 	bl	8002800 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	48000400 	.word	0x48000400

08000be4 <ST7735_Cmd_Write>:


void ST7735_Cmd_Write(const uint8_t cmd, const uint8_t *args, uint8_t num_args)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]


	// Set command mode
	HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <ST7735_Cmd_Write+0x58>)
 8000bfc:	f001 fe00 	bl	8002800 <HAL_GPIO_WritePin>

	// Send command
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 25);
 8000c00:	1df9      	adds	r1, r7, #7
 8000c02:	2319      	movs	r3, #25
 8000c04:	2201      	movs	r2, #1
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <ST7735_Cmd_Write+0x5c>)
 8000c08:	f004 fe05 	bl	8005816 <HAL_SPI_Transmit>

	// Set data mode
	if ((args != NULL) && (num_args > 0)) {
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00f      	beq.n	8000c32 <ST7735_Cmd_Write+0x4e>
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00c      	beq.n	8000c32 <ST7735_Cmd_Write+0x4e>
		HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <ST7735_Cmd_Write+0x58>)
 8000c20:	f001 fdee 	bl	8002800 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, args, num_args, 25);
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	2319      	movs	r3, #25
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <ST7735_Cmd_Write+0x5c>)
 8000c2e:	f004 fdf2 	bl	8005816 <HAL_SPI_Transmit>
	}
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	20000fe4 	.word	0x20000fe4

08000c44 <ST7735_Cmd_List_Send>:

void ST7735_Cmd_List_Send(const uint8_t *cmd_list) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint8_t num_commands, cmd, num_args, cmd_index = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73bb      	strb	r3, [r7, #14]

	num_commands = cmd_list[cmd_index];
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	73fb      	strb	r3, [r7, #15]
	cmd_index++;
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73bb      	strb	r3, [r7, #14]

	while (num_commands--) {
 8000c60:	e03c      	b.n	8000cdc <ST7735_Cmd_List_Send+0x98>
		uint16_t delay_ms;
		cmd = cmd_list[cmd_index];
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	72fb      	strb	r3, [r7, #11]
		cmd_index++;
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73bb      	strb	r3, [r7, #14]

		num_args = cmd_list[cmd_index];
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	72bb      	strb	r3, [r7, #10]
		cmd_index++;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73bb      	strb	r3, [r7, #14]

		delay_ms = num_args & ST_CMD_DELAY;
 8000c82:	7abb      	ldrb	r3, [r7, #10]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	81bb      	strh	r3, [r7, #12]
		num_args &= ~ST_CMD_DELAY;
 8000c8c:	7abb      	ldrb	r3, [r7, #10]
 8000c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c92:	72bb      	strb	r3, [r7, #10]
		ST7735_Cmd_Write(cmd, &cmd_list[cmd_index], num_args);
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	18d1      	adds	r1, r2, r3
 8000c9a:	7aba      	ldrb	r2, [r7, #10]
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ffa0 	bl	8000be4 <ST7735_Cmd_Write>

		if (num_args) {
 8000ca4:	7abb      	ldrb	r3, [r7, #10]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <ST7735_Cmd_List_Send+0x6e>
			cmd_index += num_args;
 8000caa:	7bba      	ldrb	r2, [r7, #14]
 8000cac:	7abb      	ldrb	r3, [r7, #10]
 8000cae:	4413      	add	r3, r2
 8000cb0:	73bb      	strb	r3, [r7, #14]
		}

		if (delay_ms) {
 8000cb2:	89bb      	ldrh	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d011      	beq.n	8000cdc <ST7735_Cmd_List_Send+0x98>
			delay_ms = cmd_list[cmd_index];
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	81bb      	strh	r3, [r7, #12]
			cmd_index++;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	73bb      	strb	r3, [r7, #14]
			if (delay_ms == 255) {
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d102      	bne.n	8000cd4 <ST7735_Cmd_List_Send+0x90>
				delay_ms = 500;
 8000cce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd2:	81bb      	strh	r3, [r7, #12]
			}
			HAL_Delay(delay_ms);
 8000cd4:	89bb      	ldrh	r3, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fa96 	bl	8002208 <HAL_Delay>
	while (num_commands--) {
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	73fa      	strb	r2, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1bd      	bne.n	8000c62 <ST7735_Cmd_List_Send+0x1e>
		}
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000cee:	b590      	push	{r4, r7, lr}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4603      	mov	r3, r0
 8000d02:	71bb      	strb	r3, [r7, #6]
 8000d04:	460b      	mov	r3, r1
 8000d06:	717b      	strb	r3, [r7, #5]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	713b      	strb	r3, [r7, #4]
    // column address set
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	733b      	strb	r3, [r7, #12]
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	737b      	strb	r3, [r7, #13]
 8000d14:	2300      	movs	r3, #0
 8000d16:	73bb      	strb	r3, [r7, #14]
 8000d18:	797b      	ldrb	r3, [r7, #5]
 8000d1a:	73fb      	strb	r3, [r7, #15]
    ST7735_Cmd_Write(ST77XX_CASET, data, 4);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2204      	movs	r2, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	202a      	movs	r0, #42	; 0x2a
 8000d26:	f7ff ff5d 	bl	8000be4 <ST7735_Cmd_Write>

    // row address set
    data[1] = y0 + ST7735_YSTART;
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000d2e:	793b      	ldrb	r3, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
    ST7735_Cmd_Write(ST77XX_RASET, data, 4);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2204      	movs	r2, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	202b      	movs	r0, #43	; 0x2b
 8000d3c:	f7ff ff52 	bl	8000be4 <ST7735_Cmd_Write>

    // write to RAM
    ST7735_Cmd_Write(ST77XX_RAMWR, NULL, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	202c      	movs	r0, #44	; 0x2c
 8000d46:	f7ff ff4d 	bl	8000be4 <ST7735_Cmd_Write>
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
	...

08000d54 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4611      	mov	r1, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	4623      	mov	r3, r4
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	4603      	mov	r3, r0
 8000d68:	80bb      	strh	r3, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	807b      	strh	r3, [r7, #2]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_TFTWIDTH_128) || (y >= ST7735_TFTHEIGHT_160)) return;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	2b7f      	cmp	r3, #127	; 0x7f
 8000d76:	d860      	bhi.n	8000e3a <ST7735_FillRectangle+0xe6>
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	2b9f      	cmp	r3, #159	; 0x9f
 8000d7c:	d85d      	bhi.n	8000e3a <ST7735_FillRectangle+0xe6>
    if((x + w - 1) >= ST7735_TFTWIDTH_128) w = ST7735_TFTWIDTH_128 - x;
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	4413      	add	r3, r2
 8000d84:	3b01      	subs	r3, #1
 8000d86:	2b7f      	cmp	r3, #127	; 0x7f
 8000d88:	dd03      	ble.n	8000d92 <ST7735_FillRectangle+0x3e>
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000d90:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_TFTHEIGHT_160) h = ST7735_TFTHEIGHT_160 - y;
 8000d92:	88ba      	ldrh	r2, [r7, #4]
 8000d94:	883b      	ldrh	r3, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b9f      	cmp	r3, #159	; 0x9f
 8000d9c:	dd03      	ble.n	8000da6 <ST7735_FillRectangle+0x52>
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000da4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000da6:	f7ff ff05 	bl	8000bb4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	b2d8      	uxtb	r0, r3
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b2dc      	uxtb	r4, r3
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	883b      	ldrh	r3, [r7, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	f7ff ff8b 	bl	8000cee <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000dd8:	8c3b      	ldrh	r3, [r7, #32]
 8000dda:	0a1b      	lsrs	r3, r3, #8
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	733b      	strb	r3, [r7, #12]
 8000de2:	8c3b      	ldrh	r3, [r7, #32]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <ST7735_FillRectangle+0xf0>)
 8000df0:	f001 fd06 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <ST7735_FillRectangle+0xf0>)
 8000dfc:	f001 fd00 	bl	8002800 <HAL_GPIO_WritePin>

    for(y = h; y > 0; y--) {
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	e013      	b.n	8000e2e <ST7735_FillRectangle+0xda>
        for(x = w; x > 0; x--) {
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	e00a      	b.n	8000e22 <ST7735_FillRectangle+0xce>
            HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8000e0c:	f107 010c 	add.w	r1, r7, #12
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e14:	2202      	movs	r2, #2
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <ST7735_FillRectangle+0xf4>)
 8000e18:	f004 fcfd 	bl	8005816 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f1      	bne.n	8000e0c <ST7735_FillRectangle+0xb8>
    for(y = h; y > 0; y--) {
 8000e28:	88bb      	ldrh	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	80bb      	strh	r3, [r7, #4]
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1e8      	bne.n	8000e06 <ST7735_FillRectangle+0xb2>
        }
    }
    ST7735_Deselect();
 8000e34:	f7ff feca 	bl	8000bcc <ST7735_Deselect>
 8000e38:	e000      	b.n	8000e3c <ST7735_FillRectangle+0xe8>
    if((x >= ST7735_TFTWIDTH_128) || (y >= ST7735_TFTHEIGHT_160)) return;
 8000e3a:	bf00      	nop
}
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	48000400 	.word	0x48000400
 8000e48:	20000fe4 	.word	0x20000fe4

08000e4c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, color);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff77 	bl	8000d54 <ST7735_FillRectangle>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <test1>:

void test1(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

	// Select
	ST7735_Select();
 8000e74:	f7ff fe9e 	bl	8000bb4 <ST7735_Select>

	// Reset
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <test1+0x64>)
 8000e80:	f001 fcbe 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f001 f9bf 	bl	8002208 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <test1+0x64>)
 8000e92:	f001 fcb5 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f001 f9b6 	bl	8002208 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <test1+0x64>)
 8000ea4:	f001 fcac 	bl	8002800 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ea8:	20c8      	movs	r0, #200	; 0xc8
 8000eaa:	f001 f9ad 	bl	8002208 <HAL_Delay>

	HAL_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f001 f9aa 	bl	8002208 <HAL_Delay>

	ST7735_Cmd_List_Send(ST7735R_Init1);
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <test1+0x68>)
 8000eb6:	f7ff fec5 	bl	8000c44 <ST7735_Cmd_List_Send>
	ST7735_Cmd_List_Send(ST7735R_Init2);
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <test1+0x6c>)
 8000ebc:	f7ff fec2 	bl	8000c44 <ST7735_Cmd_List_Send>
	ST7735_Cmd_List_Send(ST7735R_Init3);
 8000ec0:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <test1+0x70>)
 8000ec2:	f7ff febf 	bl	8000c44 <ST7735_Cmd_List_Send>

    ST7735_FillScreen(ST7735_BLACK);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffc0 	bl	8000e4c <ST7735_FillScreen>
    ST7735_Deselect();
 8000ecc:	f7ff fe7e 	bl	8000bcc <ST7735_Deselect>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	48001400 	.word	0x48001400
 8000ed8:	08008a78 	.word	0x08008a78
 8000edc:	08008ab4 	.word	0x08008ab4
 8000ee0:	08008ac4 	.word	0x08008ac4

08000ee4 <midi_compose_first_byte>:

typedef enum {
	AllNotesOff = 0x7B,
} midi_cc_e;

static inline uint8_t midi_compose_first_byte(uint8_t channel, uint8_t command) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]
	return((command & 0xf0) | ((channel - 1) & 0x0f));
 8000ef4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef8:	f023 030f 	bic.w	r3, r3, #15
 8000efc:	b25a      	sxtb	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <MIDI_Init>:
    uint16_t hal_errors;
    HAL_StatusTypeDef last_hal_error;
} stats = { 0, 0, 0, 0, 0, 0};

MIDI_error_t MIDI_Init(UART_HandleTypeDef *in_uart, UART_HandleTypeDef *out_uart)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	config.UART_in = in_uart;
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MIDI_Init+0x6c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6013      	str	r3, [r2, #0]
	config.UART_out = out_uart;
 8000f30:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <MIDI_Init+0x6c>)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	6053      	str	r3, [r2, #4]

	// Create ring buffers
	config.midi_rx_ring.data = midi_rx_data_buf;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MIDI_Init+0x6c>)
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MIDI_Init+0x70>)
 8000f3a:	609a      	str	r2, [r3, #8]
	config.midi_rx_ring.read_pos = 0;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MIDI_Init+0x6c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	81da      	strh	r2, [r3, #14]
	config.midi_rx_ring.write_pos = 0;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MIDI_Init+0x6c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	821a      	strh	r2, [r3, #16]
	config.midi_rx_ring.size = MIDI_BUFFER_SIZE;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MIDI_Init+0x6c>)
 8000f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4e:	819a      	strh	r2, [r3, #12]

	config.midi_tx_ring.data = midi_tx_data_buf;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MIDI_Init+0x6c>)
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <MIDI_Init+0x74>)
 8000f54:	615a      	str	r2, [r3, #20]
	config.midi_tx_ring.read_pos = 0;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MIDI_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	835a      	strh	r2, [r3, #26]
	config.midi_tx_ring.write_pos = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MIDI_Init+0x6c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	839a      	strh	r2, [r3, #28]
	config.midi_tx_ring.size = MIDI_BUFFER_SIZE;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MIDI_Init+0x6c>)
 8000f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f68:	831a      	strh	r2, [r3, #24]

	state.last_status = 0;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MIDI_Init+0x78>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	70da      	strb	r2, [r3, #3]
	state.inited = true;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MIDI_Init+0x78>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
	state.last_tx_complete = true;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MIDI_Init+0x78>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	705a      	strb	r2, [r3, #1]
	return MIDI_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000570 	.word	0x20000570
 8000f90:	200005a0 	.word	0x200005a0
 8000f94:	200009a0 	.word	0x200009a0
 8000f98:	20000da0 	.word	0x20000da0

08000f9c <MIDI_Send_RawChannelMsg>:

MIDI_error_t MIDI_Send_RawChannelMsg(uint8_t command,
                          uint8_t channel,
                          uint8_t num_data_bytes,
                          uint8_t *data)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	4613      	mov	r3, r2
 8000fae:	717b      	strb	r3, [r7, #5]
    uint8_t first;
    HAL_StatusTypeDef tx_status;

    first = midi_compose_first_byte(channel, command);
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff94 	bl	8000ee4 <midi_compose_first_byte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73bb      	strb	r3, [r7, #14]

    if (first != state.last_status)
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MIDI_Send_RawChannelMsg+0x88>)
 8000fc2:	78da      	ldrb	r2, [r3, #3]
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d011      	beq.n	8000fee <MIDI_Send_RawChannelMsg+0x52>
    {
    	tx_status = HAL_UART_Transmit_IT(config.UART_out, &first, 1);
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MIDI_Send_RawChannelMsg+0x8c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f107 010e 	add.w	r1, r7, #14
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 f84f 	bl	8006078 <HAL_UART_Transmit_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    	if (tx_status != HAL_OK) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MIDI_Send_RawChannelMsg+0x4c>
    		return MIDI_TIMEOUT;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e018      	b.n	800101a <MIDI_Send_RawChannelMsg+0x7e>
    	}
    	state.last_status = first;
 8000fe8:	7bba      	ldrb	r2, [r7, #14]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MIDI_Send_RawChannelMsg+0x88>)
 8000fec:	70da      	strb	r2, [r3, #3]
    }

    if (num_data_bytes > 0 && (data != NULL)) {
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d011      	beq.n	8001018 <MIDI_Send_RawChannelMsg+0x7c>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00e      	beq.n	8001018 <MIDI_Send_RawChannelMsg+0x7c>
    	tx_status = HAL_UART_Transmit_IT(config.UART_out, data, num_data_bytes);
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MIDI_Send_RawChannelMsg+0x8c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	797a      	ldrb	r2, [r7, #5]
 8001000:	b292      	uxth	r2, r2
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f005 f837 	bl	8006078 <HAL_UART_Transmit_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
    	if (tx_status != HAL_OK) {
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MIDI_Send_RawChannelMsg+0x7c>
    		return MIDI_TIMEOUT;
 8001014:	2302      	movs	r3, #2
 8001016:	e000      	b.n	800101a <MIDI_Send_RawChannelMsg+0x7e>
    	}
    }
    return MIDI_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000da0 	.word	0x20000da0
 8001028:	20000570 	.word	0x20000570

0800102c <MIDI_Send_NoteOnMsg>:

MIDI_error_t MIDI_Send_NoteOnMsg(uint8_t channel, uint8_t note, uint8_t vel)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	4613      	mov	r3, r2
 800103c:	717b      	strb	r3, [r7, #5]
	uint8_t msg[2];

	msg[0] = note;
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	733b      	strb	r3, [r7, #12]
	msg[1] = vel;
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	737b      	strb	r3, [r7, #13]

	return(MIDI_Send_RawChannelMsg(NoteOn, channel, 2, msg));
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	79f9      	ldrb	r1, [r7, #7]
 800104c:	2202      	movs	r2, #2
 800104e:	2090      	movs	r0, #144	; 0x90
 8001050:	f7ff ffa4 	bl	8000f9c <MIDI_Send_RawChannelMsg>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <MIDI_Send_NoteOffMsg>:

MIDI_error_t MIDI_Send_NoteOffMsg(uint8_t channel, uint8_t note)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	460a      	mov	r2, r1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	4613      	mov	r3, r2
 800106c:	71bb      	strb	r3, [r7, #6]
	uint8_t msg[1];

	msg[0] = note;
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	733b      	strb	r3, [r7, #12]
	msg[1] = 127;
 8001072:	237f      	movs	r3, #127	; 0x7f
 8001074:	737b      	strb	r3, [r7, #13]
	return(MIDI_Send_RawChannelMsg(NoteOff, channel, 2, msg));
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	79f9      	ldrb	r1, [r7, #7]
 800107c:	2202      	movs	r2, #2
 800107e:	2080      	movs	r0, #128	; 0x80
 8001080:	f7ff ff8c 	bl	8000f9c <MIDI_Send_RawChannelMsg>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <MIDI_Send_CCMsg>:

MIDI_error_t MIDI_Send_CCMsg(uint8_t channel, uint8_t control, uint8_t val)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	460b      	mov	r3, r1
 800109a:	71bb      	strb	r3, [r7, #6]
 800109c:	4613      	mov	r3, r2
 800109e:	717b      	strb	r3, [r7, #5]
	uint8_t msg[2];

	msg[0] = control;
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	733b      	strb	r3, [r7, #12]
	msg[1] = val;
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	737b      	strb	r3, [r7, #13]
	return(MIDI_Send_RawChannelMsg(CC, channel, 2, msg));
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	79f9      	ldrb	r1, [r7, #7]
 80010ae:	2202      	movs	r2, #2
 80010b0:	20b0      	movs	r0, #176	; 0xb0
 80010b2:	f7ff ff73 	bl	8000f9c <MIDI_Send_RawChannelMsg>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MIDI_Send_AllNotesOffMsg>:

MIDI_error_t MIDI_Send_AllNotesOffMsg(uint8_t channel)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	return(MIDI_Send_CCMsg(channel, AllNotesOff, 0));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2200      	movs	r2, #0
 80010ce:	217b      	movs	r1, #123	; 0x7b
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffdc 	bl	800108e <MIDI_Send_CCMsg>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MIDI_Interrupt_Is_Armed>:

/*
 * MIDI Reception APIs
 */
bool MIDI_Interrupt_Is_Armed(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	return !state.last_rx_arm_failed;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MIDI_Interrupt_Is_Armed+0x28>)
 80010e6:	789b      	ldrb	r3, [r3, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20000da0 	.word	0x20000da0

0800110c <MIDI_Interrupt_Receive_Begin>:


MIDI_error_t MIDI_Interrupt_Receive_Begin(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_UART_Receive_IT(config.UART_in, midi_interrupt_rx_buf, 1);
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MIDI_Interrupt_Receive_Begin+0x4c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	4910      	ldr	r1, [pc, #64]	; (800115c <MIDI_Interrupt_Receive_Begin+0x50>)
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f808 	bl	8006130 <HAL_UART_Receive_IT>
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
	if (halStatus != HAL_OK) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00d      	beq.n	8001146 <MIDI_Interrupt_Receive_Begin+0x3a>
		stats.hal_errors++;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MIDI_Interrupt_Receive_Begin+0x54>)
 800112c:	895b      	ldrh	r3, [r3, #10]
 800112e:	3301      	adds	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MIDI_Interrupt_Receive_Begin+0x54>)
 8001134:	815a      	strh	r2, [r3, #10]
		stats.last_hal_error = halStatus;
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <MIDI_Interrupt_Receive_Begin+0x54>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	7313      	strb	r3, [r2, #12]
		state.last_rx_arm_failed = true;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MIDI_Interrupt_Receive_Begin+0x58>)
 800113e:	2201      	movs	r2, #1
 8001140:	709a      	strb	r2, [r3, #2]
		return MIDI_RX_ERROR;
 8001142:	2304      	movs	r3, #4
 8001144:	e003      	b.n	800114e <MIDI_Interrupt_Receive_Begin+0x42>
	}
	state.last_rx_arm_failed = false;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MIDI_Interrupt_Receive_Begin+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	709a      	strb	r2, [r3, #2]
	return MIDI_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000570 	.word	0x20000570
 800115c:	20000590 	.word	0x20000590
 8001160:	20000da4 	.word	0x20000da4
 8001164:	20000da0 	.word	0x20000da0

08001168 <MIDI_Interrupt_Receive>:

MIDI_error_t MIDI_Interrupt_Receive(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	eCircularBufferError status;

	stats.rx_count++;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MIDI_Interrupt_Receive+0x48>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MIDI_Interrupt_Receive+0x48>)
 8001178:	809a      	strh	r2, [r3, #4]

	if (state.inited == false) {
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MIDI_Interrupt_Receive+0x4c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MIDI_Interrupt_Receive+0x24>
		return MIDI_NOT_READY;
 8001188:	2301      	movs	r3, #1
 800118a:	e00c      	b.n	80011a6 <MIDI_Interrupt_Receive+0x3e>
	}
	status = circularBuffer_write_bytes(&config.midi_rx_ring, midi_interrupt_rx_buf, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	490a      	ldr	r1, [pc, #40]	; (80011b8 <MIDI_Interrupt_Receive+0x50>)
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <MIDI_Interrupt_Receive+0x54>)
 8001192:	f000 f96a 	bl	800146a <circularBuffer_write_bytes>
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	if (status != eCircularBufferOk) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MIDI_Interrupt_Receive+0x3c>
		return MIDI_RX_OVERFLOW;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e000      	b.n	80011a6 <MIDI_Interrupt_Receive+0x3e>
	} else {
		return MIDI_OK;
 80011a4:	2300      	movs	r3, #0
	}
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000da4 	.word	0x20000da4
 80011b4:	20000da0 	.word	0x20000da0
 80011b8:	20000590 	.word	0x20000590
 80011bc:	20000578 	.word	0x20000578

080011c0 <MIDI_Dequeue_Receive>:

MIDI_error_t MIDI_Dequeue_Receive(uint8_t *bytes, uint16_t *len) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	eCircularBufferError status;
	if (state.inited == false) {
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MIDI_Dequeue_Receive+0x4c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MIDI_Dequeue_Receive+0x1c>
			return MIDI_NOT_READY;
 80011d8:	2301      	movs	r3, #1
 80011da:	e012      	b.n	8001202 <MIDI_Dequeue_Receive+0x42>
	}
	status = circularBuffer_read_bytes(&config.midi_rx_ring, bytes, len);
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <MIDI_Dequeue_Receive+0x50>)
 80011e2:	f000 f983 	bl	80014ec <circularBuffer_read_bytes>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
	if (status != eCircularBufferOk) {
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MIDI_Dequeue_Receive+0x34>
		return MIDI_RX_ERROR; // Possibly just nothing left to read.
 80011f0:	2304      	movs	r3, #4
 80011f2:	e006      	b.n	8001202 <MIDI_Dequeue_Receive+0x42>
	}
	stats.dequeues++;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MIDI_Dequeue_Receive+0x54>)
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <MIDI_Dequeue_Receive+0x54>)
 80011fe:	80da      	strh	r2, [r3, #6]

	return MIDI_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000da0 	.word	0x20000da0
 8001210:	20000578 	.word	0x20000578
 8001214:	20000da4 	.word	0x20000da4

08001218 <MIDI_Interrupt_Transmit_Begin>:

MIDI_error_t MIDI_Interrupt_Transmit_Begin(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	eCircularBufferError status;
	HAL_StatusTypeDef halStatus;
	uint16_t read_len = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	80bb      	strh	r3, [r7, #4]
	uint8_t byte = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	70fb      	strb	r3, [r7, #3]

	if (state.inited == false) {
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MIDI_Interrupt_Transmit_Begin+0x74>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MIDI_Interrupt_Transmit_Begin+0x20>
			return MIDI_NOT_READY;
 8001234:	2301      	movs	r3, #1
 8001236:	e025      	b.n	8001284 <MIDI_Interrupt_Transmit_Begin+0x6c>
	}
	status = circularBuffer_read_bytes(&config.midi_tx_ring, &byte, &read_len);
 8001238:	1d3a      	adds	r2, r7, #4
 800123a:	1cfb      	adds	r3, r7, #3
 800123c:	4619      	mov	r1, r3
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MIDI_Interrupt_Transmit_Begin+0x78>)
 8001240:	f000 f954 	bl	80014ec <circularBuffer_read_bytes>
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
	if (status != eCircularBufferOk) {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <MIDI_Interrupt_Transmit_Begin+0x40>
		state.last_tx_complete = true;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MIDI_Interrupt_Transmit_Begin+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	705a      	strb	r2, [r3, #1]
		return MIDI_TX_ERROR;
 8001254:	2305      	movs	r3, #5
 8001256:	e015      	b.n	8001284 <MIDI_Interrupt_Transmit_Begin+0x6c>
	}
	state.last_tx_complete = false;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MIDI_Interrupt_Transmit_Begin+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
	halStatus = HAL_UART_Transmit_IT(config.UART_in, &byte, 1);
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MIDI_Interrupt_Transmit_Begin+0x7c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1cf9      	adds	r1, r7, #3
 8001264:	2201      	movs	r2, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f004 ff06 	bl	8006078 <HAL_UART_Transmit_IT>
 800126c:	4603      	mov	r3, r0
 800126e:	71bb      	strb	r3, [r7, #6]
	if (halStatus != HAL_OK) {
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <MIDI_Interrupt_Transmit_Begin+0x6a>
		stats.hal_errors++;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MIDI_Interrupt_Transmit_Begin+0x80>)
 8001278:	895b      	ldrh	r3, [r3, #10]
 800127a:	3301      	adds	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MIDI_Interrupt_Transmit_Begin+0x80>)
 8001280:	815a      	strh	r2, [r3, #10]
	}
	return MIDI_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000da0 	.word	0x20000da0
 8001290:	20000584 	.word	0x20000584
 8001294:	20000570 	.word	0x20000570
 8001298:	20000da4 	.word	0x20000da4

0800129c <MIDI_Interrupt_Transmit_End>:

MIDI_error_t MIDI_Interrupt_Transmit_End(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	if (state.inited == false) {
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MIDI_Interrupt_Transmit_End+0x2c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MIDI_Interrupt_Transmit_End+0x16>
		return MIDI_NOT_READY;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e008      	b.n	80012c4 <MIDI_Interrupt_Transmit_End+0x28>
	}
	stats.tx_done++;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MIDI_Interrupt_Transmit_End+0x30>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <MIDI_Interrupt_Transmit_End+0x30>)
 80012bc:	805a      	strh	r2, [r3, #2]
	MIDI_Interrupt_Transmit_Begin(); // Start handling any additional bytes that were added during tx
 80012be:	f7ff ffab 	bl	8001218 <MIDI_Interrupt_Transmit_Begin>
	return MIDI_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000da0 	.word	0x20000da0
 80012cc:	20000da4 	.word	0x20000da4

080012d0 <MIDI_Enqueue_Send>:

MIDI_error_t MIDI_Enqueue_Send(uint8_t *bytes, uint16_t *len) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	eCircularBufferError status;
	if (state.inited == false) {
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MIDI_Enqueue_Send+0x70>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f083 0301 	eor.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MIDI_Enqueue_Send+0x1c>
		return MIDI_NOT_READY;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e024      	b.n	8001336 <MIDI_Enqueue_Send+0x66>
	}

	status = circularBuffer_write_bytes(&config.midi_tx_ring, bytes, *len);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <MIDI_Enqueue_Send+0x74>)
 80012f6:	f000 f8b8 	bl	800146a <circularBuffer_write_bytes>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
	if (status != eCircularBufferOk) {
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MIDI_Enqueue_Send+0x38>
		return MIDI_RX_ERROR;
 8001304:	2304      	movs	r3, #4
 8001306:	e016      	b.n	8001336 <MIDI_Enqueue_Send+0x66>
	}

	stats.enqueues++;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MIDI_Enqueue_Send+0x78>)
 800130a:	891b      	ldrh	r3, [r3, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MIDI_Enqueue_Send+0x78>)
 8001312:	811a      	strh	r2, [r3, #8]

	if (state.last_tx_complete) {
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MIDI_Enqueue_Send+0x70>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <MIDI_Enqueue_Send+0x58>
		state.last_tx_complete = false;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MIDI_Enqueue_Send+0x70>)
 800131e:	2200      	movs	r2, #0
 8001320:	705a      	strb	r2, [r3, #1]
		MIDI_Interrupt_Transmit_Begin();
 8001322:	f7ff ff79 	bl	8001218 <MIDI_Interrupt_Transmit_Begin>
 8001326:	e005      	b.n	8001334 <MIDI_Enqueue_Send+0x64>
	} else {
		stats.tx_waits++;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <MIDI_Enqueue_Send+0x78>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MIDI_Enqueue_Send+0x78>)
 8001332:	801a      	strh	r2, [r3, #0]
	}
	return MIDI_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000da0 	.word	0x20000da0
 8001344:	20000584 	.word	0x20000584
 8001348:	20000da4 	.word	0x20000da4

0800134c <MIDI_Log_Error>:

void MIDI_Log_Error(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	stats.hal_errors++;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <MIDI_Log_Error+0x1c>)
 8001352:	895b      	ldrh	r3, [r3, #10]
 8001354:	3301      	adds	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <MIDI_Log_Error+0x1c>)
 800135a:	815a      	strh	r2, [r3, #10]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000da4 	.word	0x20000da4

0800136c <MIDI_Print_Stats>:

void MIDI_Print_Stats(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	printf("rx_count: %d\r\n", stats.rx_count);
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 8001372:	889b      	ldrh	r3, [r3, #4]
 8001374:	4619      	mov	r1, r3
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <MIDI_Print_Stats+0x60>)
 8001378:	f006 f9d4 	bl	8007724 <iprintf>
	printf("tx_done: %d\r\n", stats.tx_done);
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 800137e:	885b      	ldrh	r3, [r3, #2]
 8001380:	4619      	mov	r1, r3
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MIDI_Print_Stats+0x64>)
 8001384:	f006 f9ce 	bl	8007724 <iprintf>
	printf("tx_waits: %d\r\n", stats.tx_waits);
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MIDI_Print_Stats+0x68>)
 8001390:	f006 f9c8 	bl	8007724 <iprintf>
	printf("dequeues: %d\r\n", stats.dequeues);
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 8001396:	88db      	ldrh	r3, [r3, #6]
 8001398:	4619      	mov	r1, r3
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <MIDI_Print_Stats+0x6c>)
 800139c:	f006 f9c2 	bl	8007724 <iprintf>
	printf("enqueues: %d\r\n", stats.enqueues);
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 80013a2:	891b      	ldrh	r3, [r3, #8]
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MIDI_Print_Stats+0x70>)
 80013a8:	f006 f9bc 	bl	8007724 <iprintf>
	printf("HAL errors: %d\r\n", stats.hal_errors);
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 80013ae:	895b      	ldrh	r3, [r3, #10]
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <MIDI_Print_Stats+0x74>)
 80013b4:	f006 f9b6 	bl	8007724 <iprintf>
	printf("Last HAL error: %d\r\n", stats.last_hal_error);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <MIDI_Print_Stats+0x5c>)
 80013ba:	7b1b      	ldrb	r3, [r3, #12]
 80013bc:	4619      	mov	r1, r3
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MIDI_Print_Stats+0x78>)
 80013c0:	f006 f9b0 	bl	8007724 <iprintf>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000da4 	.word	0x20000da4
 80013cc:	0800872c 	.word	0x0800872c
 80013d0:	0800873c 	.word	0x0800873c
 80013d4:	0800874c 	.word	0x0800874c
 80013d8:	0800875c 	.word	0x0800875c
 80013dc:	0800876c 	.word	0x0800876c
 80013e0:	0800877c 	.word	0x0800877c
 80013e4:	08008790 	.word	0x08008790

080013e8 <buffer_is_valid>:
 */

#include <stddef.h>
#include "circular_buffer.h"

static inline eCircularBufferError buffer_is_valid(circular_buffer_t *cb) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	// Check proper initialization
	if ((cb->data == NULL) || (cb->size == 0) || (cb->size & 0x01)) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d009      	beq.n	800140c <buffer_is_valid+0x24>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	889b      	ldrh	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <buffer_is_valid+0x24>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	889b      	ldrh	r3, [r3, #4]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <buffer_is_valid+0x28>
		return eCircularBufferNotValid;
 800140c:	2303      	movs	r3, #3
 800140e:	e000      	b.n	8001412 <buffer_is_valid+0x2a>
	}
	return eCircularBufferOk;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <circularBuffer_get_length>:

eCircularBufferError circularBuffer_get_length(circular_buffer_t *cb, uint16_t *length) {
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]

	if ((buffer_is_valid(cb) == eCircularBufferOk) && (length != NULL)) {
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffdd 	bl	80013e8 <buffer_is_valid>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d115      	bne.n	8001460 <circularBuffer_get_length+0x42>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d012      	beq.n	8001460 <circularBuffer_get_length+0x42>
		*length = (cb->write_pos - cb->read_pos) & (cb->size - 1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	891a      	ldrh	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	88db      	ldrh	r3, [r3, #6]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	3b01      	subs	r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	b21b      	sxth	r3, r3
 8001452:	4013      	ands	r3, r2
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	801a      	strh	r2, [r3, #0]
		return eCircularBufferOk;
 800145c:	2300      	movs	r3, #0
 800145e:	e000      	b.n	8001462 <circularBuffer_get_length+0x44>
	}
	return eCircularBufferNotValid;
 8001460:	2303      	movs	r3, #3
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <circularBuffer_write_bytes>:

eCircularBufferError circularBuffer_write_bytes(circular_buffer_t *cb, uint8_t *data, uint16_t len) {
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	4613      	mov	r3, r2
 8001476:	80fb      	strh	r3, [r7, #6]
	uint16_t curr_length = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	82bb      	strh	r3, [r7, #20]
	eCircularBufferError status;

	status = circularBuffer_get_length(cb, &curr_length);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ffcb 	bl	800141e <circularBuffer_get_length>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]
	if (status == eCircularBufferOk) {
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d127      	bne.n	80014e2 <circularBuffer_write_bytes+0x78>
		if (curr_length == (cb->size - len)) {
 8001492:	8abb      	ldrh	r3, [r7, #20]
 8001494:	461a      	mov	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	4619      	mov	r1, r3
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	1acb      	subs	r3, r1, r3
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d101      	bne.n	80014a8 <circularBuffer_write_bytes+0x3e>
			return eCircularBufferFull; // Can't fit!
 80014a4:	2301      	movs	r3, #1
 80014a6:	e01d      	b.n	80014e4 <circularBuffer_write_bytes+0x7a>
		}

		memcpy(&cb->data[cb->write_pos], data, len);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	8912      	ldrh	r2, [r2, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	88fa      	ldrh	r2, [r7, #6]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f006 f920 	bl	80076fc <memcpy>
		cb->write_pos = (cb->write_pos + len) & (cb->size - len); // Atomic?
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	891a      	ldrh	r2, [r3, #8]
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8899      	ldrh	r1, [r3, #4]
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	811a      	strh	r2, [r3, #8]
		return eCircularBufferOk;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <circularBuffer_write_bytes+0x7a>
	} else {
		return status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <circularBuffer_read_bytes>:

eCircularBufferError circularBuffer_read_bytes(circular_buffer_t *cb, uint8_t *data, uint16_t *read_len) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	uint16_t curr_length = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	82bb      	strh	r3, [r7, #20]
	eCircularBufferError status;

	status = circularBuffer_get_length(cb, &curr_length);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff ff8b 	bl	800141e <circularBuffer_get_length>
 8001508:	4603      	mov	r3, r0
 800150a:	75fb      	strb	r3, [r7, #23]
	if (status == eCircularBufferOk) {
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d12c      	bne.n	800156c <circularBuffer_read_bytes+0x80>
		if (curr_length == 0) {
 8001512:	8abb      	ldrh	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <circularBuffer_read_bytes+0x30>
			return eCircularBufferEmpty;
 8001518:	2302      	movs	r3, #2
 800151a:	e028      	b.n	800156e <circularBuffer_read_bytes+0x82>
		}

		if (curr_length < *read_len) { // Underflow, read as many bytes as we can
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	8abb      	ldrh	r3, [r7, #20]
 8001522:	429a      	cmp	r2, r3
 8001524:	d902      	bls.n	800152c <circularBuffer_read_bytes+0x40>
			*read_len = curr_length;
 8001526:	8aba      	ldrh	r2, [r7, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	801a      	strh	r2, [r3, #0]
		}
		memcpy(data, &cb->data[cb->read_pos], *read_len);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	88d2      	ldrh	r2, [r2, #6]
 8001534:	1899      	adds	r1, r3, r2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f006 f8dd 	bl	80076fc <memcpy>
		cb->read_pos = (cb->read_pos + *read_len) & (cb->size - *read_len);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	88da      	ldrh	r2, [r3, #6]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	b29b      	uxth	r3, r3
 800154e:	b21a      	sxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8899      	ldrh	r1, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	1acb      	subs	r3, r1, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	b21b      	sxth	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	80da      	strh	r2, [r3, #6]
		return eCircularBufferOk;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <circularBuffer_read_bytes+0x82>
	} else {
		return status;
 800156c:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *outgoing, int len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart3, outgoing, len, 100);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	b29a      	uxth	r2, r3
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <_write+0x24>)
 800158e:	f004 fc13 	bl	8005db8 <HAL_UART_Transmit>
   return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000ec4 	.word	0x20000ec4

080015a0 <_read>:

int _read(int file, char *result, size_t len) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    int retcode = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

    if (len != 0) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <_read+0x3c>
        status = HAL_UART_Receive( &huart3, (uint8_t *) result, len, HAL_MAX_DELAY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <_read+0x48>)
 80015c2:	f004 fc8c 	bl	8005ede <HAL_UART_Receive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 80015ca:	7cfb      	ldrb	r3, [r7, #19]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_read+0x36>
            retcode = len;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e002      	b.n	80015dc <_read+0x3c>
        } else {
            retcode = -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015da:	617b      	str	r3, [r7, #20]
        }
    }
    return( retcode);
 80015dc:	697b      	ldr	r3, [r7, #20]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000ec4 	.word	0x20000ec4

080015ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f0:	f000 fda4 	bl	800213c <HAL_Init>

  /* USER CODE BEGIN Init */
  MIDI_Init(&huart1, &huart1);
 80015f4:	4910      	ldr	r1, [pc, #64]	; (8001638 <main+0x4c>)
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <main+0x4c>)
 80015f8:	f7ff fc92 	bl	8000f20 <MIDI_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f820 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 f9d4 	bl	80019ac <MX_GPIO_Init>
  MX_RTC_Init();
 8001604:	f000 f8b8 	bl	8001778 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001608:	f000 f97a 	bl	8001900 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 800160c:	f000 f9a8 	bl	8001960 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8001610:	f000 f916 	bl	8001840 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001614:	f000 f944 	bl	80018a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001618:	f000 f8d4 	bl	80017c4 <MX_SPI1_Init>
  MX_I2S3_Init();
 800161c:	f000 f87e 	bl	800171c <MX_I2S3_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  test1();
 8001620:	f7ff fc26 	bl	8000e70 <test1>
  ConsoleInit(&huart3);
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <main+0x50>)
 8001626:	f7fe ff25 	bl	8000474 <ConsoleInit>
  MIDI_Interrupt_Receive_Begin();
 800162a:	f7ff fd6f 	bl	800110c <MIDI_Interrupt_Receive_Begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MIDI_Application_Process();
 800162e:	f000 fab4 	bl	8001b9a <MIDI_Application_Process>
	ConsoleProcess();
 8001632:	f7fe ff4f 	bl	80004d4 <ConsoleProcess>
  {
 8001636:	e7fa      	b.n	800162e <main+0x42>
 8001638:	20000f44 	.word	0x20000f44
 800163c:	20000ec4 	.word	0x20000ec4

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0a6      	sub	sp, #152	; 0x98
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800164a:	2228      	movs	r2, #40	; 0x28
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f006 f85f 	bl	8007712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2258      	movs	r2, #88	; 0x58
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f006 f851 	bl	8007712 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001670:	2309      	movs	r3, #9
 8001672:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001678:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167a:	2301      	movs	r3, #1
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800167e:	2301      	movs	r3, #1
 8001680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001692:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fbd5 	bl	8003e54 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016b0:	f000 fa6c 	bl	8001b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b8:	2302      	movs	r3, #2
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ce:	2102      	movs	r1, #2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fad5 	bl	8004c80 <HAL_RCC_ClockConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016dc:	f000 fa56 	bl	8001b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2S
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <SystemClock_Config+0xd8>)
 80016e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80016fa:	2300      	movs	r3, #0
 80016fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fcf3 	bl	80050ec <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800170c:	f000 fa3e 	bl	8001b8c <Error_Handler>
  }
}
 8001710:	bf00      	nop
 8001712:	3798      	adds	r7, #152	; 0x98
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00030207 	.word	0x00030207

0800171c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_I2S3_Init+0x54>)
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <MX_I2S3_Init+0x58>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2S3_Init+0x54>)
 8001728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_I2S3_Init+0x54>)
 8001730:	2210      	movs	r2, #16
 8001732:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2S3_Init+0x54>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_I2S3_Init+0x54>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_I2S3_Init+0x54>)
 8001742:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001746:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2S3_Init+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_SYSCLK;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_I2S3_Init+0x54>)
 8001750:	2202      	movs	r2, #2
 8001752:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2S3_Init+0x54>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2S3_Init+0x54>)
 800175c:	f001 f868 	bl	8002830 <HAL_I2S_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001766:	f000 fa11 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20001334 	.word	0x20001334
 8001774:	40003c00 	.word	0x40003c00

08001778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_RTC_Init+0x44>)
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <MX_RTC_Init+0x48>)
 8001780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_RTC_Init+0x44>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_RTC_Init+0x44>)
 800178a:	227f      	movs	r2, #127	; 0x7f
 800178c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_RTC_Init+0x44>)
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_RTC_Init+0x44>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_RTC_Init+0x44>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_RTC_Init+0x44>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_RTC_Init+0x44>)
 80017a8:	f003 febe 	bl	8005528 <HAL_RTC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80017b2:	f000 f9eb 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000fc4 	.word	0x20000fc4
 80017c0:	40002800 	.word	0x40002800

080017c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_SPI1_Init+0x74>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <MX_SPI1_Init+0x78>)
 80017cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_SPI1_Init+0x74>)
 80017d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_SPI1_Init+0x74>)
 80017d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_SPI1_Init+0x74>)
 80017e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_SPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_SPI1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_SPI1_Init+0x74>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_SPI1_Init+0x74>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <MX_SPI1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_SPI1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_SPI1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_SPI1_Init+0x74>)
 8001814:	2207      	movs	r2, #7
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_SPI1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_SPI1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_SPI1_Init+0x74>)
 8001826:	f003 ff64 	bl	80056f2 <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001830:	f000 f9ac 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000fe4 	.word	0x20000fe4
 800183c:	40013000 	.word	0x40013000

08001840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <MX_USART1_UART_Init+0x5c>)
 8001848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_USART1_UART_Init+0x58>)
 800184c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_USART1_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_USART1_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_USART1_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_USART1_UART_Init+0x58>)
 8001884:	f004 fa4a 	bl	8005d1c <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800188e:	f000 f97d 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000f44 	.word	0x20000f44
 800189c:	40013800 	.word	0x40013800

080018a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <MX_USART2_UART_Init+0x5c>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART2_UART_Init+0x58>)
 80018e4:	f004 fa1a 	bl	8005d1c <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ee:	f000 f94d 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20001048 	.word	0x20001048
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <MX_USART3_UART_Init+0x5c>)
 8001908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800190c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USART3_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_USART3_UART_Init+0x58>)
 8001944:	f004 f9ea 	bl	8005d1c <HAL_UART_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800194e:	f000 f91d 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000ec4 	.word	0x20000ec4
 800195c:	40004800 	.word	0x40004800

08001960 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <MX_USB_PCD_Init+0x48>)
 8001968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 800196c:	2208      	movs	r2, #8
 800196e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 8001972:	2202      	movs	r2, #2
 8001974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 8001978:	2202      	movs	r2, #2
 800197a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USB_PCD_Init+0x44>)
 8001990:	f001 fd38 	bl	8003404 <HAL_PCD_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800199a:	f000 f8f7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200010c8 	.word	0x200010c8
 80019a8:	40005c00 	.word	0x40005c00

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019cc:	6153      	str	r3, [r2, #20]
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a54      	ldr	r2, [pc, #336]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <MX_GPIO_Init+0x184>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6153      	str	r3, [r2, #20]
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6153      	str	r3, [r2, #20]
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4a42      	ldr	r2, [pc, #264]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a2c:	6153      	str	r3, [r2, #20]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a3c      	ldr	r2, [pc, #240]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <MX_GPIO_Init+0x184>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8 
 8001a52:	2200      	movs	r2, #0
 8001a54:	f244 3181 	movw	r1, #17281	; 0x4381
 8001a58:	4836      	ldr	r0, [pc, #216]	; (8001b34 <MX_GPIO_Init+0x188>)
 8001a5a:	f000 fed1 	bl	8002800 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a64:	4834      	ldr	r0, [pc, #208]	; (8001b38 <MX_GPIO_Init+0x18c>)
 8001a66:	f000 fecb 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a70:	4832      	ldr	r0, [pc, #200]	; (8001b3c <MX_GPIO_Init+0x190>)
 8001a72:	f000 fec5 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	4831      	ldr	r0, [pc, #196]	; (8001b40 <MX_GPIO_Init+0x194>)
 8001a7c:	f000 fec0 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <MX_GPIO_Init+0x198>)
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	482c      	ldr	r0, [pc, #176]	; (8001b48 <MX_GPIO_Init+0x19c>)
 8001a96:	f000 fd29 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8 
 8001a9a:	f244 3381 	movw	r3, #17281	; 0x4381
 8001a9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4820      	ldr	r0, [pc, #128]	; (8001b34 <MX_GPIO_Init+0x188>)
 8001ab4:	f000 fd1a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4819      	ldr	r0, [pc, #100]	; (8001b38 <MX_GPIO_Init+0x18c>)
 8001ad2:	f000 fd0b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_GPIO_Init+0x190>)
 8001af0:	f000 fcfc 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_GPIO_Init+0x194>)
 8001b0c:	f000 fcee 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_GPIO_Init+0x194>)
 8001b24:	f000 fce2 	bl	80024ec <HAL_GPIO_Init>

}
 8001b28:	bf00      	nop
 8001b2a:	3730      	adds	r7, #48	; 0x30
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400
 8001b38:	48001400 	.word	0x48001400
 8001b3c:	48000c00 	.word	0x48000c00
 8001b40:	48001800 	.word	0x48001800
 8001b44:	10110000 	.word	0x10110000
 8001b48:	48000800 	.word	0x48000800

08001b4c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  MIDI_Interrupt_Receive();
 8001b54:	f7ff fb08 	bl	8001168 <MIDI_Interrupt_Receive>
  MIDI_Interrupt_Receive_Begin();
 8001b58:	f7ff fad8 	bl	800110c <MIDI_Interrupt_Receive_Begin>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  MIDI_Interrupt_Transmit_End();
 8001b6c:	f7ff fb96 	bl	800129c <MIDI_Interrupt_Transmit_End>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_ErrorCallback>:

/*
 *
 */
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	MIDI_Log_Error();
 8001b80:	f7ff fbe4 	bl	800134c <MIDI_Log_Error>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <MIDI_Application_Process>:

//#define DEBUG_MIDI_TX
#include "midi_application.h"

void MIDI_Application_Process(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
	MIDI_error_t status = MIDI_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	71fb      	strb	r3, [r7, #7]
	uint8_t next_byte = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71bb      	strb	r3, [r7, #6]
	uint16_t bytes_to_read = 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	80bb      	strh	r3, [r7, #4]

	// Just emulate MIDI through for now
	do {
		if (!MIDI_Interrupt_Is_Armed()) {
 8001bac:	f7ff fa98 	bl	80010e0 <MIDI_Interrupt_Is_Armed>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <MIDI_Application_Process+0x20>
			MIDI_Interrupt_Receive_Begin();
 8001bb6:	f7ff faa9 	bl	800110c <MIDI_Interrupt_Receive_Begin>
		}

		status = MIDI_Dequeue_Receive(&next_byte, &bytes_to_read);
 8001bba:	1d3a      	adds	r2, r7, #4
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fafd 	bl	80011c0 <MIDI_Dequeue_Receive>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
		if (status == MIDI_OK) {
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <MIDI_Application_Process+0x46>
			status = MIDI_Enqueue_Send(&next_byte, &bytes_to_read);
 8001bd0:	1d3a      	adds	r2, r7, #4
 8001bd2:	1dbb      	adds	r3, r7, #6
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb7a 	bl	80012d0 <MIDI_Enqueue_Send>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_MIDI_TX
			printf("Sent: %x\r\n", next_byte);
#endif
		}
	} while (status == MIDI_OK);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0e2      	beq.n	8001bac <MIDI_Application_Process+0x12>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x44>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_MspInit+0x44>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x44>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x44>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x44>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a26      	ldr	r2, [pc, #152]	; (8001cf0 <HAL_I2S_MspInit+0xb8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d145      	bne.n	8001ce6 <HAL_I2S_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	6153      	str	r3, [r2, #20]
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_I2S_MspInit+0xbc>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration    
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ca2:	2310      	movs	r3, #16
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f000 fc14 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_I2S_MspInit+0xc0>)
 8001ce2:	f000 fc03 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40003c00 	.word	0x40003c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000800 	.word	0x48000800

08001cfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_RTC_MspInit+0x44>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d111      	bne.n	8001d32 <HAL_RTC_MspInit+0x36>
 8001d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d12:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RTC_MspInit+0x48>)
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2301      	movs	r3, #1
 8001d30:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40002800 	.word	0x40002800
 8001d44:	10908100 	.word	0x10908100

08001d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_SPI_MspInit+0x7c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d128      	bne.n	8001dbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d74:	6193      	str	r3, [r2, #24]
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	6153      	str	r3, [r2, #20]
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_SPI_MspInit+0x80>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d9a:	23e0      	movs	r3, #224	; 0xe0
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001daa:	2305      	movs	r3, #5
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db8:	f000 fb98 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40013000 	.word	0x40013000
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_UART_MspInit+0x148>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d130      	bne.n	8001e50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a43      	ldr	r2, [pc, #268]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e1e:	2330      	movs	r3, #48	; 0x30
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4838      	ldr	r0, [pc, #224]	; (8001f1c <HAL_UART_MspInit+0x150>)
 8001e3a:	f000 fb57 	bl	80024ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2025      	movs	r0, #37	; 0x25
 8001e44:	f000 fadd 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e48:	2025      	movs	r0, #37	; 0x25
 8001e4a:	f000 faf6 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e4e:	e05c      	b.n	8001f0a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <HAL_UART_MspInit+0x154>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d129      	bne.n	8001eae <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	6153      	str	r3, [r2, #20]
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f000 fb20 	bl	80024ec <HAL_GPIO_Init>
}
 8001eac:	e02d      	b.n	8001f0a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_UART_MspInit+0x158>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d128      	bne.n	8001f0a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec2:	61d3      	str	r3, [r2, #28]
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eda:	6153      	str	r3, [r2, #20]
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_UART_MspInit+0x14c>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001efa:	2307      	movs	r3, #7
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	4808      	ldr	r0, [pc, #32]	; (8001f28 <HAL_UART_MspInit+0x15c>)
 8001f06:	f000 faf1 	bl	80024ec <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3738      	adds	r7, #56	; 0x38
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	48000800 	.word	0x48000800
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40004800 	.word	0x40004800
 8001f28:	48000c00 	.word	0x48000c00

08001f2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_PCD_MspInit+0x44>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d113      	bne.n	8001f66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_PCD_MspInit+0x48>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_PCD_MspInit+0x48>)
 8001f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f48:	61d3      	str	r3, [r2, #28]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_PCD_MspInit+0x48>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2014      	movs	r0, #20
 8001f5c:	f000 fa51 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001f60:	2014      	movs	r0, #20
 8001f62:	f000 fa6a 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40005c00 	.word	0x40005c00
 8001f74:	40021000 	.word	0x40021000

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f000 f8fc 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001fda:	f001 fac7 	bl	800356c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200010c8 	.word	0x200010c8

08001fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART1_IRQHandler+0x10>)
 8001fee:	f004 f941 	bl	8006274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000f44 	.word	0x20000f44

08001ffc <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002024:	605a      	str	r2, [r3, #4]
	return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_isatty>:

int _isatty(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_sbrk+0x50>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x16>
		heap_end = &end;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <_sbrk+0x50>)
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <_sbrk+0x54>)
 8002078:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <_sbrk+0x50>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <_sbrk+0x50>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	466a      	mov	r2, sp
 800208a:	4293      	cmp	r3, r2
 800208c:	d907      	bls.n	800209e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800208e:	f005 fb0b 	bl	80076a8 <__errno>
 8002092:	4602      	mov	r2, r0
 8002094:	230c      	movs	r3, #12
 8002096:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209c:	e006      	b.n	80020ac <_sbrk+0x48>
	}

	heap_end += incr;
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <_sbrk+0x50>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <_sbrk+0x50>)
 80020a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000db4 	.word	0x20000db4
 80020b8:	20001388 	.word	0x20001388

080020bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <SystemInit+0x28>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <SystemInit+0x28>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SystemInit+0x28>)
 80020d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d6:	609a      	str	r2, [r3, #8]
#endif
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ee:	e003      	b.n	80020f8 <LoopCopyDataInit>

080020f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020f6:	3104      	adds	r1, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002100:	d3f6      	bcc.n	80020f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002104:	e002      	b.n	800210c <LoopFillZerobss>

08002106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002106:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002108:	f842 3b04 	str.w	r3, [r2], #4

0800210c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <LoopForever+0x16>)
	cmp	r2, r3
 800210e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002110:	d3f9      	bcc.n	8002106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002112:	f7ff ffd3 	bl	80020bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002116:	f005 facd 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211a:	f7ff fa67 	bl	80015ec <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002120:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002124:	08008cd4 	.word	0x08008cd4
	ldr	r0, =_sdata
 8002128:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800212c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002130:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002134:	20001384 	.word	0x20001384

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f94d 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fd4a 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f965 	bl	8002456 <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a4:	f000 f92d 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008
 80021ec:	2000137c 	.word	0x2000137c

080021f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000137c 	.word	0x2000137c

08002208 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_Delay+0x40>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000008 	.word	0x20000008

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002480:	2b02      	cmp	r3, #2
 8002482:	d005      	beq.n	8002490 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e027      	b.n	80024e0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
    } 
  }
  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e160      	b.n	80027be <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8152 	beq.w	80027b8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x38>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b12      	cmp	r3, #18
 8002522:	d123      	bne.n	800256c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	6939      	ldr	r1, [r7, #16]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d00b      	beq.n	80025c0 <HAL_GPIO_Init+0xd4>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b4:	2b11      	cmp	r3, #17
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d130      	bne.n	8002622 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f6:	2201      	movs	r2, #1
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0201 	and.w	r2, r3, #1
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80ac 	beq.w	80027b8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <HAL_GPIO_Init+0x2f0>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a5d      	ldr	r2, [pc, #372]	; (80027dc <HAL_GPIO_Init+0x2f0>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_GPIO_Init+0x2f0>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a59      	ldr	r2, [pc, #356]	; (80027e0 <HAL_GPIO_Init+0x2f4>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026a2:	d025      	beq.n	80026f0 <HAL_GPIO_Init+0x204>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a4f      	ldr	r2, [pc, #316]	; (80027e4 <HAL_GPIO_Init+0x2f8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01f      	beq.n	80026ec <HAL_GPIO_Init+0x200>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a4e      	ldr	r2, [pc, #312]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d019      	beq.n	80026e8 <HAL_GPIO_Init+0x1fc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a4d      	ldr	r2, [pc, #308]	; (80027ec <HAL_GPIO_Init+0x300>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1f8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1f4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a4b      	ldr	r2, [pc, #300]	; (80027f4 <HAL_GPIO_Init+0x308>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1f0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1ec>
 80026d4:	2306      	movs	r3, #6
 80026d6:	e00c      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026d8:	2307      	movs	r3, #7
 80026da:	e00a      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026dc:	2305      	movs	r3, #5
 80026de:	e008      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e006      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e4:	2303      	movs	r3, #3
 80026e6:	e004      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e002      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_GPIO_Init+0x206>
 80026f0:	2300      	movs	r3, #0
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	f002 0203 	and.w	r2, r2, #3
 80026f8:	0092      	lsls	r2, r2, #2
 80026fa:	4093      	lsls	r3, r2
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002702:	4937      	ldr	r1, [pc, #220]	; (80027e0 <HAL_GPIO_Init+0x2f4>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002734:	4a31      	ldr	r2, [pc, #196]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_GPIO_Init+0x310>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43db      	mvns	r3, r3
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_GPIO_Init+0x310>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_GPIO_Init+0x310>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3301      	adds	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f47f ae97 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000
 80027e4:	48000400 	.word	0x48000400
 80027e8:	48000800 	.word	0x48000800
 80027ec:	48000c00 	.word	0x48000c00
 80027f0:	48001000 	.word	0x48001000
 80027f4:	48001400 	.word	0x48001400
 80027f8:	48001800 	.word	0x48001800
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800281c:	e002      	b.n	8002824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b09e      	sub	sp, #120	; 0x78
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t i2sdiv;
  uint32_t i2sodd;
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	667b      	str	r3, [r7, #100]	; 0x64
#if defined(SPI_I2S_FULLDUPLEX_SUPPORT)
  RCC_PeriphCLKInitTypeDef rccperiphclkinit;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_I2S_Init+0x16>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e144      	b.n	8002ad0 <HAL_I2S_Init+0x2a0>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_I2S_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a9e      	ldr	r2, [pc, #632]	; (8002ad8 <HAL_I2S_Init+0x2a8>)
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff f9e9 	bl	8001c38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800287c:	f023 030f 	bic.w	r3, r3, #15
 8002880:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d078      	beq.n	8002984 <HAL_I2S_Init+0x154>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_I2S_Init+0x70>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800289a:	2310      	movs	r3, #16
 800289c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800289e:	e001      	b.n	80028a4 <HAL_I2S_Init+0x74>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d802      	bhi.n	80028b2 <HAL_I2S_Init+0x82>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

    /* Get the source clock value **********************************************/
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
    rccperiphclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80028b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b6:	60bb      	str	r3, [r7, #8]

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10a      	bne.n	80028d6 <HAL_I2S_Init+0xa6>
    {
      /* Set external clock as I2S clock source */
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_EXT;
 80028c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fc0e 	bl	80050ec <HAL_RCCEx_PeriphCLKConfig>

      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80028d0:	4b82      	ldr	r3, [pc, #520]	; (8002adc <HAL_I2S_Init+0x2ac>)
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
 80028d4:	e009      	b.n	80028ea <HAL_I2S_Init+0xba>
    }
    else
    {
      /* Set SYSCLK as I2S clock source */
      rccperiphclkinit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      HAL_RCCEx_PeriphCLKConfig(&rccperiphclkinit);
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fc04 	bl	80050ec <HAL_RCCEx_PeriphCLKConfig>

      /* Get the I2S source clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 80028e4:	f002 fb48 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 80028e8:	6678      	str	r0, [r7, #100]	; 0x64
      i2sclk = HAL_RCC_GetPCLK1Freq();
    }
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d125      	bne.n	8002940 <HAL_I2S_Init+0x110>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <HAL_I2S_Init+0xee>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002902:	fbb2 f2f3 	udiv	r2, r2, r3
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	3305      	adds	r3, #5
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
 800291c:	e01f      	b.n	800295e <HAL_I2S_Init+0x12e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002924:	fbb2 f2f3 	udiv	r2, r2, r3
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	3305      	adds	r3, #5
 800293c:	66bb      	str	r3, [r7, #104]	; 0x68
 800293e:	e00e      	b.n	800295e <HAL_I2S_Init+0x12e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002944:	fbb2 f2f3 	udiv	r2, r2, r3
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	3305      	adds	r3, #5
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	4a5f      	ldr	r2, [pc, #380]	; (8002ae0 <HAL_I2S_Init+0x2b0>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800296a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	673b      	str	r3, [r7, #112]	; 0x70

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800297c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
 8002982:	e003      	b.n	800298c <HAL_I2S_Init+0x15c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002984:	2302      	movs	r3, #2
 8002986:	677b      	str	r3, [r7, #116]	; 0x74
    i2sodd = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800298c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298e:	2b01      	cmp	r3, #1
 8002990:	d902      	bls.n	8002998 <HAL_I2S_Init+0x168>
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	2bff      	cmp	r3, #255	; 0xff
 8002996:	d907      	bls.n	80029a8 <HAL_I2S_Init+0x178>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e093      	b.n	8002ad0 <HAL_I2S_Init+0x2a0>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029b8:	430a      	orrs	r2, r1
 80029ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029c6:	f023 030f 	bic.w	r3, r3, #15
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6851      	ldr	r1, [r2, #4]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	4311      	orrs	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68d2      	ldr	r2, [r2, #12]
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6992      	ldr	r2, [r2, #24]
 80029de:	430a      	orrs	r2, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d165      	bne.n	8002ac0 <HAL_I2S_Init+0x290>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <HAL_I2S_Init+0x2b4>)
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <HAL_I2S_Init+0x2b8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_I2S_Init+0x1d8>
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_I2S_Init+0x2bc>)
 8002a06:	e001      	b.n	8002a0c <HAL_I2S_Init+0x1dc>
 8002a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_I2S_Init+0x2b8>)
 8002a14:	428a      	cmp	r2, r1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2S_Init+0x1ec>
 8002a18:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_I2S_Init+0x2bc>)
 8002a1a:	e001      	b.n	8002a20 <HAL_I2S_Init+0x1f0>
 8002a1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a24:	f023 030f 	bic.w	r3, r3, #15
 8002a28:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <HAL_I2S_Init+0x2b8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_I2S_Init+0x208>
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_I2S_Init+0x2bc>)
 8002a36:	e001      	b.n	8002a3c <HAL_I2S_Init+0x20c>
 8002a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_I2S_Init+0x2b8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_I2S_Init+0x21e>
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_I2S_Init+0x2bc>)
 8002a4c:	e001      	b.n	8002a52 <HAL_I2S_Init+0x222>
 8002a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a60:	d003      	beq.n	8002a6a <HAL_I2S_Init+0x23a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_I2S_Init+0x242>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a70:	e001      	b.n	8002a76 <HAL_I2S_Init+0x246>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a72:	2300      	movs	r3, #0
 8002a74:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a78:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	b299      	uxth	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002a8c:	4303      	orrs	r3, r0
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	430b      	orrs	r3, r1
 8002a92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002a94:	4313      	orrs	r3, r2
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_I2S_Init+0x2b8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2S_Init+0x286>
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_I2S_Init+0x2bc>)
 8002ab4:	e001      	b.n	8002aba <HAL_I2S_Init+0x28a>
 8002ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aba:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8002abe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3778      	adds	r7, #120	; 0x78
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	08002dc9 	.word	0x08002dc9
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	cccccccd 	.word	0xcccccccd
 8002ae4:	08002f51 	.word	0x08002f51
 8002ae8:	40003800 	.word	0x40003800
 8002aec:	40003400 	.word	0x40003400

08002af0 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_I2S_Transmit+0x1c>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0dc      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2S_Transmit+0x30>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e0d4      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0c4      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d002      	beq.n	8002b6c <HAL_I2S_Transmit+0x7c>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d10a      	bne.n	8002b82 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b80:	e005      	b.n	8002b8e <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d007      	beq.n	8002bb6 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2102      	movs	r1, #2
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f98d 	bl	8002edc <I2S_WaitFlagStateUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d04e      	beq.n	8002c66 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e070      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2102      	movs	r1, #2
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f962 	bl	8002edc <I2S_WaitFlagStateUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00f      	beq.n	8002c3e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e045      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d10c      	bne.n	8002c66 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1bb      	bne.n	8002be8 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c84:	d118      	bne.n	8002cb8 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f925 	bl	8002edc <I2S_WaitFlagStateUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00f      	beq.n	8002cb8 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e008      	b.n	8002cca <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c9a      	adds	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10e      	bne.n	8002d62 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffb8 	bl	8002cd2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	1c9a      	adds	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10e      	bne.n	8002dc0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff93 	bl	8002ce6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d13a      	bne.n	8002e5a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d109      	bne.n	8002e02 <I2S_IRQHandler+0x3a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d102      	bne.n	8002e02 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ffb4 	bl	8002d6a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d126      	bne.n	8002e5a <I2S_IRQHandler+0x92>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d11f      	bne.n	8002e5a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e28:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f043 0202 	orr.w	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff50 	bl	8002cfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d136      	bne.n	8002ed4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d109      	bne.n	8002e84 <I2S_IRQHandler+0xbc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d102      	bne.n	8002e84 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff45 	bl	8002d0e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d122      	bne.n	8002ed4 <I2S_IRQHandler+0x10c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d11b      	bne.n	8002ed4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eaa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff13 	bl	8002cfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7ff f980 	bl	80021f0 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002ef2:	e018      	b.n	8002f26 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efa:	d014      	beq.n	8002f26 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002efc:	f7ff f978 	bl	80021f0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d902      	bls.n	8002f12 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e00f      	b.n	8002f46 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1d7      	bne.n	8002ef4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aa2      	ldr	r2, [pc, #648]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f6a:	4ba2      	ldr	r3, [pc, #648]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f6c:	e001      	b.n	8002f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a9b      	ldr	r2, [pc, #620]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f88:	4b9a      	ldr	r3, [pc, #616]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f8a:	e001      	b.n	8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f9c:	d004      	beq.n	8002fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f040 8099 	bne.w	80030da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f925 	bl	800320c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9c8 	bl	800336c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d13a      	bne.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d035      	beq.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a7e      	ldr	r2, [pc, #504]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ffa:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ffc:	e001      	b.n	8003002 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4979      	ldr	r1, [pc, #484]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800300a:	428b      	cmp	r3, r1
 800300c:	d101      	bne.n	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003010:	e001      	b.n	8003016 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800302a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0202 	orr.w	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fe4f 	bl	8002cfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	f040 80be 	bne.w	80031e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80b8 	beq.w	80031e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003082:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a59      	ldr	r2, [pc, #356]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800308e:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003090:	e001      	b.n	8003096 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4954      	ldr	r1, [pc, #336]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800309e:	428b      	cmp	r3, r1
 80030a0:	d101      	bne.n	80030a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030a4:	e001      	b.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80030a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fe11 	bl	8002cfa <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030d8:	e084      	b.n	80031e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d107      	bne.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8be 	bl	8003270 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8fd 	bl	8003308 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d12f      	bne.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02a      	beq.n	8003178 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003130:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800313e:	e001      	b.n	8003144 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4929      	ldr	r1, [pc, #164]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800314c:	428b      	cmp	r3, r1
 800314e:	d101      	bne.n	8003154 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003152:	e001      	b.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800315c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f043 0202 	orr.w	r2, r3, #2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fdc1 	bl	8002cfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d131      	bne.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02c      	beq.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003198:	e001      	b.n	800319e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800319a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031a6:	428b      	cmp	r3, r1
 80031a8:	d101      	bne.n	80031ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ac:	e001      	b.n	80031b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80031ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fd8c 	bl	8002cfa <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031e2:	e000      	b.n	80031e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031e4:	bf00      	nop
}
 80031e6:	bf00      	nop
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40003800 	.word	0x40003800
 80031f4:	40003400 	.word	0x40003400

080031f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c99      	adds	r1, r3, #2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6251      	str	r1, [r2, #36]	; 0x24
 800321e:	881a      	ldrh	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800324c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffc9 	bl	80031f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c99      	adds	r1, r3, #2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6251      	str	r1, [r2, #36]	; 0x24
 8003282:	8819      	ldrh	r1, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <I2SEx_TxISR_I2SExt+0x90>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <I2SEx_TxISR_I2SExt+0x22>
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <I2SEx_TxISR_I2SExt+0x94>)
 8003290:	e001      	b.n	8003296 <I2SEx_TxISR_I2SExt+0x26>
 8003292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003296:	460a      	mov	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <I2SEx_TxISR_I2SExt+0x90>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <I2SEx_TxISR_I2SExt+0x50>
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <I2SEx_TxISR_I2SExt+0x94>)
 80032be:	e001      	b.n	80032c4 <I2SEx_TxISR_I2SExt+0x54>
 80032c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	490d      	ldr	r1, [pc, #52]	; (8003300 <I2SEx_TxISR_I2SExt+0x90>)
 80032cc:	428b      	cmp	r3, r1
 80032ce:	d101      	bne.n	80032d4 <I2SEx_TxISR_I2SExt+0x64>
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <I2SEx_TxISR_I2SExt+0x94>)
 80032d2:	e001      	b.n	80032d8 <I2SEx_TxISR_I2SExt+0x68>
 80032d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff81 	bl	80031f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40003800 	.word	0x40003800
 8003304:	40003400 	.word	0x40003400

08003308 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68d8      	ldr	r0, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	1c99      	adds	r1, r3, #2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003320:	b282      	uxth	r2, r0
 8003322:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800334a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ff4a 	bl	80031f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <I2SEx_RxISR_I2SExt+0x90>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <I2SEx_RxISR_I2SExt+0x16>
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <I2SEx_RxISR_I2SExt+0x94>)
 8003380:	e001      	b.n	8003386 <I2SEx_RxISR_I2SExt+0x1a>
 8003382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003386:	68d8      	ldr	r0, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	1c99      	adds	r1, r3, #2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003392:	b282      	uxth	r2, r0
 8003394:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d121      	bne.n	80033f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <I2SEx_RxISR_I2SExt+0x90>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d101      	bne.n	80033bc <I2SEx_RxISR_I2SExt+0x50>
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <I2SEx_RxISR_I2SExt+0x94>)
 80033ba:	e001      	b.n	80033c0 <I2SEx_RxISR_I2SExt+0x54>
 80033bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	490d      	ldr	r1, [pc, #52]	; (80033fc <I2SEx_RxISR_I2SExt+0x90>)
 80033c8:	428b      	cmp	r3, r1
 80033ca:	d101      	bne.n	80033d0 <I2SEx_RxISR_I2SExt+0x64>
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <I2SEx_RxISR_I2SExt+0x94>)
 80033ce:	e001      	b.n	80033d4 <I2SEx_RxISR_I2SExt+0x68>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff03 	bl	80031f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40003800 	.word	0x40003800
 8003400:	40003400 	.word	0x40003400

08003404 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	b08b      	sub	sp, #44	; 0x2c
 8003408:	af06      	add	r7, sp, #24
 800340a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0a6      	b.n	8003564 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fd7e 	bl	8001f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fd6a 	bl	8006f16 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e035      	b.n	80034b4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	015b      	lsls	r3, r3, #5
 800344e:	4413      	add	r3, r2
 8003450:	3329      	adds	r3, #41	; 0x29
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	4413      	add	r3, r2
 800345e:	3328      	adds	r3, #40	; 0x28
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	b291      	uxth	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	015b      	lsls	r3, r3, #5
 800346e:	4413      	add	r3, r2
 8003470:	3336      	adds	r3, #54	; 0x36
 8003472:	460a      	mov	r2, r1
 8003474:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	4413      	add	r3, r2
 800347e:	332b      	adds	r3, #43	; 0x2b
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	015b      	lsls	r3, r3, #5
 800348a:	4413      	add	r3, r2
 800348c:	3338      	adds	r3, #56	; 0x38
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	015b      	lsls	r3, r3, #5
 8003498:	4413      	add	r3, r2
 800349a:	333c      	adds	r3, #60	; 0x3c
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	3302      	adds	r3, #2
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	4413      	add	r3, r2
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3301      	adds	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d3c4      	bcc.n	8003448 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e031      	b.n	8003528 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	015b      	lsls	r3, r3, #5
 80034ca:	4413      	add	r3, r2
 80034cc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	015b      	lsls	r3, r3, #5
 80034da:	4413      	add	r3, r2
 80034dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	4413      	add	r3, r2
 80034ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	015b      	lsls	r3, r3, #5
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	015b      	lsls	r3, r3, #5
 800350a:	4413      	add	r3, r2
 800350c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	330a      	adds	r3, #10
 800351a:	015b      	lsls	r3, r3, #5
 800351c:	4413      	add	r3, r2
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	3301      	adds	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d3c8      	bcc.n	80034c4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	687e      	ldr	r6, [r7, #4]
 800353a:	466d      	mov	r5, sp
 800353c:	f106 0410 	add.w	r4, r6, #16
 8003540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	1d33      	adds	r3, r6, #4
 800354a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	f003 fcff 	bl	8006f50 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800356c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fff3 	bl	8007564 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d102      	bne.n	8003590 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9d2 	bl	8003934 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f003 ffe5 	bl	8007564 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d112      	bne.n	80035cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b8:	b292      	uxth	r2, r2
 80035ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f902 	bl	80037c8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035c4:	2100      	movs	r1, #0
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f91c 	bl	8003804 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 ffc7 	bl	8007564 <USB_ReadInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e0:	d10b      	bne.n	80035fa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 ffb0 	bl	8007564 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360e:	d10b      	bne.n	8003628 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003622:	b292      	uxth	r2, r2
 8003624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f003 ff99 	bl	8007564 <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d126      	bne.n	800368c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0204 	bic.w	r2, r2, #4
 8003650:	b292      	uxth	r2, r2
 8003652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0208 	bic.w	r2, r2, #8
 8003668:	b292      	uxth	r2, r2
 800366a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8be 	bl	80037f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 ff67 	bl	8007564 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a0:	d131      	bne.n	8003706 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0208 	orr.w	r2, r2, #8
 80036b4:	b292      	uxth	r2, r2
 80036b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036cc:	b292      	uxth	r2, r2
 80036ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0204 	orr.w	r2, r2, #4
 80036e4:	b292      	uxth	r2, r2
 80036e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 ff38 	bl	8007564 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d002      	beq.n	8003706 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f86b 	bl	80037dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f003 ff2a 	bl	8007564 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371a:	d10e      	bne.n	800373a <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800372e:	b292      	uxth	r2, r2
 8003730:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f83d 	bl	80037b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 ff10 	bl	8007564 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374e:	d10b      	bne.n	8003768 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003758:	b29a      	uxth	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003762:	b292      	uxth	r2, r2
 8003764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_PCD_SetAddress+0x1a>
 800381a:	2302      	movs	r3, #2
 800381c:	e013      	b.n	8003846 <HAL_PCD_SetAddress+0x42>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fe80 	bl	800753c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	460b      	mov	r3, r1
 800385c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800385e:	7afb      	ldrb	r3, [r7, #11]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	015b      	lsls	r3, r3, #5
 8003866:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003888:	7afb      	ldrb	r3, [r7, #11]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	b2da      	uxtb	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003894:	7afb      	ldrb	r3, [r7, #11]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f003 fb77 	bl	8006f98 <USB_EPStartXfer>
 80038aa:	e005      	b.n	80038b8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fb70 	bl	8006f98 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	460b      	mov	r3, r1
 80038d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	015b      	lsls	r3, r3, #5
 80038da:	3328      	adds	r3, #40	; 0x28
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2201      	movs	r2, #1
 80038f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	b2da      	uxtb	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	4618      	mov	r0, r3
 8003918:	f003 fb3e 	bl	8006f98 <USB_EPStartXfer>
 800391c:	e005      	b.n	800392a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fb37 	bl	8006f98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800393c:	e278      	b.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
  {
    wIstr = hpcd->Instance->ISTR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003946:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003948:	8afb      	ldrh	r3, [r7, #22]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003952:	7d7b      	ldrb	r3, [r7, #21]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8140 	bne.w	8003bda <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d14f      	bne.n	8003a04 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003974:	b29c      	uxth	r4, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800397e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3328      	adds	r3, #40	; 0x28
 800398a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fedf 	bl	8003788 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 822c 	beq.w	8003e30 <PCD_EP_ISR_Handler+0x4fc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 8227 	bne.w	8003e30 <PCD_EP_ISR_Handler+0x4fc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b292      	uxth	r2, r2
 80039f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a02:	e215      	b.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a0a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a14:	8a7b      	ldrh	r3, [r7, #18]
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d031      	beq.n	8003a82 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f003 fdd4 	bl	8007606 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	b29c      	uxth	r4, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003a76:	b292      	uxth	r2, r2
 8003a78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe90 	bl	80037a0 <HAL_PCD_SetupStageCallback>
 8003a80:	e1d6      	b.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f280 81d2 	bge.w	8003e30 <PCD_EP_ISR_Handler+0x4fc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d019      	beq.n	8003b0c <PCD_EP_ISR_Handler+0x1d8>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6959      	ldr	r1, [r3, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f003 fd88 	bl	8007606 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	441a      	add	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b04:	2100      	movs	r1, #0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fe32 	bl	8003770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461c      	mov	r4, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	441c      	add	r4, r3
 8003b1e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d110      	bne.n	8003b4e <PCD_EP_ISR_Handler+0x21a>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e02f      	b.n	8003bae <PCD_EP_ISR_Handler+0x27a>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b3e      	cmp	r3, #62	; 0x3e
 8003b54:	d813      	bhi.n	8003b7e <PCD_EP_ISR_Handler+0x24a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <PCD_EP_ISR_Handler+0x23c>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	e017      	b.n	8003bae <PCD_EP_ISR_Handler+0x27a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <PCD_EP_ISR_Handler+0x264>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	b29c      	uxth	r4, r3
 8003bc0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bc4:	b29c      	uxth	r4, r3
 8003bc6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b9e      	ldr	r3, [pc, #632]	; (8003e4c <PCD_EP_ISR_Handler+0x518>)
 8003bd2:	4323      	orrs	r3, r4
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
 8003bd8:	e12a      	b.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	7d7b      	ldrb	r3, [r7, #21]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f280 80cb 	bge.w	8003d8a <PCD_EP_ISR_Handler+0x456>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	7d7b      	ldrb	r3, [r7, #21]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c08:	4013      	ands	r3, r2
 8003c0a:	b29c      	uxth	r4, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	7d7b      	ldrb	r3, [r7, #21]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c20:	7d7b      	ldrb	r3, [r7, #21]
 8003c22:	015b      	lsls	r3, r3, #5
 8003c24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	7b1b      	ldrb	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11f      	bne.n	8003c76 <PCD_EP_ISR_Handler+0x342>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003c5c:	8bfb      	ldrh	r3, [r7, #30]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d06e      	beq.n	8003d40 <PCD_EP_ISR_Handler+0x40c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88da      	ldrh	r2, [r3, #6]
 8003c6e:	8bfb      	ldrh	r3, [r7, #30]
 8003c70:	f003 fcc9 	bl	8007606 <USB_ReadPMA>
 8003c74:	e064      	b.n	8003d40 <PCD_EP_ISR_Handler+0x40c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <PCD_EP_ISR_Handler+0x39c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003cb6:	8bfb      	ldrh	r3, [r7, #30]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d028      	beq.n	8003d0e <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6959      	ldr	r1, [r3, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	891a      	ldrh	r2, [r3, #8]
 8003cc8:	8bfb      	ldrh	r3, [r7, #30]
 8003cca:	f003 fc9c 	bl	8007606 <USB_ReadPMA>
 8003cce:	e01e      	b.n	8003d0e <PCD_EP_ISR_Handler+0x3da>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003cf6:	8bfb      	ldrh	r3, [r7, #30]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6959      	ldr	r1, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	895a      	ldrh	r2, [r3, #10]
 8003d08:	8bfb      	ldrh	r3, [r7, #30]
 8003d0a:	f003 fc7c 	bl	8007606 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d28:	b29c      	uxth	r4, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	441a      	add	r2, r3
 8003d38:	4b45      	ldr	r3, [pc, #276]	; (8003e50 <PCD_EP_ISR_Handler+0x51c>)
 8003d3a:	4323      	orrs	r3, r4
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	8bfb      	ldrh	r3, [r7, #30]
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <PCD_EP_ISR_Handler+0x436>
 8003d60:	8bfa      	ldrh	r2, [r7, #30]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d206      	bcs.n	8003d78 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fcfd 	bl	8003770 <HAL_PCD_DataOutStageCallback>
 8003d76:	e008      	b.n	8003d8a <PCD_EP_ISR_Handler+0x456>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	7819      	ldrb	r1, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fd62 	bl	800384e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d8a:	8a7b      	ldrh	r3, [r7, #18]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d04d      	beq.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d94:	7d7b      	ldrb	r3, [r7, #21]
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	3328      	adds	r3, #40	; 0x28
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	7d7b      	ldrb	r3, [r7, #21]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	b29c      	uxth	r4, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	7d7b      	ldrb	r3, [r7, #21]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <PCD_EP_ISR_Handler+0x4ea>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fcb6 	bl	8003788 <HAL_PCD_DataInStageCallback>
 8003e1c:	e008      	b.n	8003e30 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	7819      	ldrb	r1, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fd49 	bl	80038c2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f6ff ad7e 	blt.w	800393e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3724      	adds	r7, #36	; 0x24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	ffff8080 	.word	0xffff8080
 8003e50:	ffff80c0 	.word	0xffff80c0

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f000 bf01 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8160 	beq.w	800413e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e7e:	4bae      	ldr	r3, [pc, #696]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8a:	4bab      	ldr	r3, [pc, #684]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d159      	bne.n	8003f4a <HAL_RCC_OscConfig+0xf6>
 8003e96:	4ba8      	ldr	r3, [pc, #672]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d152      	bne.n	8003f4a <HAL_RCC_OscConfig+0xf6>
 8003ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8003eb8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x82>
 8003ed0:	4b99      	ldr	r3, [pc, #612]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0xae>
 8003ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ef2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003efe:	4b8e      	ldr	r3, [pc, #568]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f06:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003f0a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003f0e:	fa92 f2a2 	rbit	r2, r2
 8003f12:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003f16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8102 	beq.w	800413c <HAL_RCC_OscConfig+0x2e8>
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 80fc 	bne.w	800413c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 be93 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x110>
 8003f56:	4b78      	ldr	r3, [pc, #480]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a77      	ldr	r2, [pc, #476]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e030      	b.n	8003fc6 <HAL_RCC_OscConfig+0x172>
 8003f64:	1d3b      	adds	r3, r7, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x134>
 8003f6e:	4b72      	ldr	r3, [pc, #456]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a71      	ldr	r2, [pc, #452]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6e      	ldr	r2, [pc, #440]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01e      	b.n	8003fc6 <HAL_RCC_OscConfig+0x172>
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0x15a>
 8003f94:	4b68      	ldr	r3, [pc, #416]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a67      	ldr	r2, [pc, #412]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b65      	ldr	r3, [pc, #404]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a64      	ldr	r2, [pc, #400]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x172>
 8003fae:	4b62      	ldr	r3, [pc, #392]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a61      	ldr	r2, [pc, #388]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d059      	beq.n	8004084 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe f90e 	bl	80021f0 <HAL_GetTick>
 8003fd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fda:	f7fe f909 	bl	80021f0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d902      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	f000 be40 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
 8003ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ff4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004004:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d102      	bne.n	8004022 <HAL_RCC_OscConfig+0x1ce>
 800401c:	4b46      	ldr	r3, [pc, #280]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	e015      	b.n	800404e <HAL_RCC_OscConfig+0x1fa>
 8004022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004026:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800403a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800403e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800404a:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004052:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004056:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800405a:	fa92 f2a2 	rbit	r2, r2
 800405e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004062:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004066:	fab2 f282 	clz	r2, r2
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	f042 0220 	orr.w	r2, r2, #32
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	f002 021f 	and.w	r2, r2, #31
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f202 	lsl.w	r2, r1, r2
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ab      	beq.n	8003fda <HAL_RCC_OscConfig+0x186>
 8004082:	e05c      	b.n	800413e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe f8b4 	bl	80021f0 <HAL_GetTick>
 8004088:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408e:	f7fe f8af 	bl	80021f0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d902      	bls.n	80040a4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	f000 bde6 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
 80040a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80040b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_OscConfig+0x282>
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	e015      	b.n	8004102 <HAL_RCC_OscConfig+0x2ae>
 80040d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80040ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80040f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_RCC_OscConfig+0x2e4>)
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004106:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800410a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800410e:	fa92 f2a2 	rbit	r2, r2
 8004112:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004116:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800411a:	fab2 f282 	clz	r2, r2
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	f002 021f 	and.w	r2, r2, #31
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f202 	lsl.w	r2, r1, r2
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ab      	bne.n	800408e <HAL_RCC_OscConfig+0x23a>
 8004136:	e002      	b.n	800413e <HAL_RCC_OscConfig+0x2ea>
 8004138:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8170 	beq.w	800442e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800414e:	4bd0      	ldr	r3, [pc, #832]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800415a:	4bcd      	ldr	r3, [pc, #820]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b08      	cmp	r3, #8
 8004164:	d16d      	bne.n	8004242 <HAL_RCC_OscConfig+0x3ee>
 8004166:	4bca      	ldr	r3, [pc, #808]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004172:	d166      	bne.n	8004242 <HAL_RCC_OscConfig+0x3ee>
 8004174:	2302      	movs	r3, #2
 8004176:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004186:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x350>
 800419e:	4bbc      	ldr	r3, [pc, #752]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e013      	b.n	80041cc <HAL_RCC_OscConfig+0x378>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80041b6:	2302      	movs	r3, #2
 80041b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80041bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041c8:	4bb1      	ldr	r3, [pc, #708]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80041d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80041d6:	fa92 f2a2 	rbit	r2, r2
 80041da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80041de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80041e2:	fab2 f282 	clz	r2, r2
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	f042 0220 	orr.w	r2, r2, #32
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	f002 021f 	and.w	r2, r2, #31
 80041f2:	2101      	movs	r1, #1
 80041f4:	fa01 f202 	lsl.w	r2, r1, r2
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_RCC_OscConfig+0x3ba>
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d002      	beq.n	800420e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f000 bd31 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420e:	4ba0      	ldr	r3, [pc, #640]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	21f8      	movs	r1, #248	; 0xf8
 800421e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004226:	fa91 f1a1 	rbit	r1, r1
 800422a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800422e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004232:	fab1 f181 	clz	r1, r1
 8004236:	b2c9      	uxtb	r1, r1
 8004238:	408b      	lsls	r3, r1
 800423a:	4995      	ldr	r1, [pc, #596]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004240:	e0f5      	b.n	800442e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8085 	beq.w	8004358 <HAL_RCC_OscConfig+0x504>
 800424e:	2301      	movs	r3, #1
 8004250:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004260:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800426e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	461a      	mov	r2, r3
 8004276:	2301      	movs	r3, #1
 8004278:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fd ffb9 	bl	80021f0 <HAL_GetTick>
 800427e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004284:	f7fd ffb4 	bl	80021f0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	f000 bceb 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
 800429a:	2302      	movs	r3, #2
 800429c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80042ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_OscConfig+0x476>
 80042c4:	4b72      	ldr	r3, [pc, #456]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	e013      	b.n	80042f2 <HAL_RCC_OscConfig+0x49e>
 80042ca:	2302      	movs	r3, #2
 80042cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80042dc:	2302      	movs	r3, #2
 80042de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80042e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80042ee:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2202      	movs	r2, #2
 80042f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80042f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80042fc:	fa92 f2a2 	rbit	r2, r2
 8004300:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004304:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004308:	fab2 f282 	clz	r2, r2
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	f042 0220 	orr.w	r2, r2, #32
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	f002 021f 	and.w	r2, r2, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f202 	lsl.w	r2, r1, r2
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0af      	beq.n	8004284 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b5a      	ldr	r3, [pc, #360]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	21f8      	movs	r1, #248	; 0xf8
 8004334:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800433c:	fa91 f1a1 	rbit	r1, r1
 8004340:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004344:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004348:	fab1 f181 	clz	r1, r1
 800434c:	b2c9      	uxtb	r1, r1
 800434e:	408b      	lsls	r3, r1
 8004350:	494f      	ldr	r1, [pc, #316]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	e06a      	b.n	800442e <HAL_RCC_OscConfig+0x5da>
 8004358:	2301      	movs	r3, #1
 800435a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800436a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	461a      	mov	r2, r3
 8004380:	2300      	movs	r3, #0
 8004382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd ff34 	bl	80021f0 <HAL_GetTick>
 8004388:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438e:	f7fd ff2f 	bl	80021f0 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	f000 bc66 	b.w	8004c70 <HAL_RCC_OscConfig+0xe1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80043b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_RCC_OscConfig+0x580>
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	e013      	b.n	80043fc <HAL_RCC_OscConfig+0x5a8>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043e6:	2302      	movs	r3, #2
 80043e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80043ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x63c>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004402:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004406:	fa92 f2a2 	rbit	r2, r2
 800440a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800440e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004412:	fab2 f282 	clz	r2, r2
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f042 0220 	orr.w	r2, r2, #32
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	f002 021f 	and.w	r2, r2, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1af      	bne.n	800438e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80da 	beq.w	80045f2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443e:	1d3b      	adds	r3, r7, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d069      	beq.n	800451c <HAL_RCC_OscConfig+0x6c8>
 8004448:	2301      	movs	r3, #1
 800444a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004452:	fa93 f3a3 	rbit	r3, r3
 8004456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800445a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x640>)
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	461a      	mov	r2, r3
 800446e:	2301      	movs	r3, #1
 8004470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004472:	f7fd febd 	bl	80021f0 <HAL_GetTick>
 8004476:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e00d      	b.n	8004498 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447c:	f7fd feb8 	bl	80021f0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d905      	bls.n	8004498 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e3ef      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 8004490:	40021000 	.word	0x40021000
 8004494:	10908120 	.word	0x10908120
 8004498:	2302      	movs	r3, #2
 800449a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a2:	fa93 f2a3 	rbit	r2, r3
 80044a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80044b0:	2202      	movs	r2, #2
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	fa93 f2a3 	rbit	r2, r3
 80044be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80044c8:	2202      	movs	r2, #2
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	fa93 f2a3 	rbit	r2, r3
 80044d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80044da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044dc:	4ba4      	ldr	r3, [pc, #656]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80044de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80044e4:	2102      	movs	r1, #2
 80044e6:	6019      	str	r1, [r3, #0]
 80044e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	fa93 f1a3 	rbit	r1, r3
 80044f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044f6:	6019      	str	r1, [r3, #0]
  return result;
 80044f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0b0      	beq.n	800447c <HAL_RCC_OscConfig+0x628>
 800451a:	e06a      	b.n	80045f2 <HAL_RCC_OscConfig+0x79e>
 800451c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fa93 f2a3 	rbit	r2, r3
 800452e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004532:	601a      	str	r2, [r3, #0]
  return result;
 8004534:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004538:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	4b8c      	ldr	r3, [pc, #560]	; (8004774 <HAL_RCC_OscConfig+0x920>)
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	461a      	mov	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fd fe4f 	bl	80021f0 <HAL_GetTick>
 8004552:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004556:	e009      	b.n	800456c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004558:	f7fd fe4a 	bl	80021f0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e381      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 800456c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004570:	2202      	movs	r2, #2
 8004572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	fa93 f2a3 	rbit	r2, r3
 800457e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004588:	2202      	movs	r2, #2
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	fa93 f2a3 	rbit	r2, r3
 8004596:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045a0:	2202      	movs	r2, #2
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	fa93 f2a3 	rbit	r2, r3
 80045ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	4b6e      	ldr	r3, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80045b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045bc:	2102      	movs	r1, #2
 80045be:	6019      	str	r1, [r3, #0]
 80045c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	fa93 f1a3 	rbit	r1, r3
 80045ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045ce:	6019      	str	r1, [r3, #0]
  return result;
 80045d0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1b2      	bne.n	8004558 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8157 	beq.w	80048b0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004608:	4b59      	ldr	r3, [pc, #356]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d112      	bne.n	800463a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004614:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	61d3      	str	r3, [r2, #28]
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCC_OscConfig+0x924>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d11a      	bne.n	800467c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_RCC_OscConfig+0x924>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_RCC_OscConfig+0x924>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fd fdcd 	bl	80021f0 <HAL_GetTick>
 8004656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	e009      	b.n	8004670 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fd fdc8 	bl	80021f0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e2ff      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x924>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ef      	beq.n	800465c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <HAL_RCC_OscConfig+0x840>
 8004686:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4a39      	ldr	r2, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6213      	str	r3, [r2, #32]
 8004692:	e02f      	b.n	80046f4 <HAL_RCC_OscConfig+0x8a0>
 8004694:	1d3b      	adds	r3, r7, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x864>
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4a33      	ldr	r2, [pc, #204]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6213      	str	r3, [r2, #32]
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a30      	ldr	r2, [pc, #192]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0x8a0>
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x888>
 80046c2:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6213      	str	r3, [r2, #32]
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4a27      	ldr	r2, [pc, #156]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6213      	str	r3, [r2, #32]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0x8a0>
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6213      	str	r3, [r2, #32]
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4a20      	ldr	r2, [pc, #128]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 80046ee:	f023 0304 	bic.w	r3, r3, #4
 80046f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d06a      	beq.n	80047d4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fd fd77 	bl	80021f0 <HAL_GetTick>
 8004702:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd fd72 	bl	80021f0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e2a7      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 8004720:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004724:	2202      	movs	r2, #2
 8004726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	fa93 f2a3 	rbit	r2, r3
 8004732:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	fa93 f2a3 	rbit	r2, r3
 800474a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800474e:	601a      	str	r2, [r3, #0]
  return result;
 8004750:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004754:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d108      	bne.n	800477c <HAL_RCC_OscConfig+0x928>
 800476a:	4b01      	ldr	r3, [pc, #4]	; (8004770 <HAL_RCC_OscConfig+0x91c>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	e013      	b.n	8004798 <HAL_RCC_OscConfig+0x944>
 8004770:	40021000 	.word	0x40021000
 8004774:	10908120 	.word	0x10908120
 8004778:	40007000 	.word	0x40007000
 800477c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004780:	2202      	movs	r2, #2
 8004782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	fa93 f2a3 	rbit	r2, r3
 800478e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	4bc0      	ldr	r3, [pc, #768]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800479c:	2102      	movs	r1, #2
 800479e:	6011      	str	r1, [r2, #0]
 80047a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	fa92 f1a2 	rbit	r1, r2
 80047aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80047ae:	6011      	str	r1, [r2, #0]
  return result;
 80047b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	fab2 f282 	clz	r2, r2
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	f002 021f 	and.w	r2, r2, #31
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f202 	lsl.w	r2, r1, r2
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d09a      	beq.n	8004708 <HAL_RCC_OscConfig+0x8b4>
 80047d2:	e063      	b.n	800489c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d4:	f7fd fd0c 	bl	80021f0 <HAL_GetTick>
 80047d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047dc:	e00b      	b.n	80047f6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fd fd07 	bl	80021f0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e23c      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 80047f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047fa:	2202      	movs	r2, #2
 80047fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	fa93 f2a3 	rbit	r2, r3
 8004808:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004812:	2202      	movs	r2, #2
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004824:	601a      	str	r2, [r3, #0]
  return result;
 8004826:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800482a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	b2db      	uxtb	r3, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d102      	bne.n	8004846 <HAL_RCC_OscConfig+0x9f2>
 8004840:	4b95      	ldr	r3, [pc, #596]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	e00d      	b.n	8004862 <HAL_RCC_OscConfig+0xa0e>
 8004846:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800484a:	2202      	movs	r2, #2
 800484c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	fa93 f2a3 	rbit	r2, r3
 8004858:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	4b8e      	ldr	r3, [pc, #568]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004866:	2102      	movs	r1, #2
 8004868:	6011      	str	r1, [r2, #0]
 800486a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	fa92 f1a2 	rbit	r1, r2
 8004874:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004878:	6011      	str	r1, [r2, #0]
  return result;
 800487a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	f002 021f 	and.w	r2, r2, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1a0      	bne.n	80047de <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800489c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b7c      	ldr	r3, [pc, #496]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4a7b      	ldr	r2, [pc, #492]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 81d9 	beq.w	8004c6e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	4b76      	ldr	r3, [pc, #472]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	f000 81a6 	beq.w	8004c16 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f040 811e 	bne.w	8004b12 <HAL_RCC_OscConfig+0xcbe>
 80048d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80048da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	fa93 f2a3 	rbit	r2, r3
 80048ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048ee:	601a      	str	r2, [r3, #0]
  return result;
 80048f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd fc70 	bl	80021f0 <HAL_GetTick>
 8004910:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004914:	e009      	b.n	800492a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004916:	f7fd fc6b 	bl	80021f0 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1a2      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 800492a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800492e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004932:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	fa93 f2a3 	rbit	r2, r3
 800493e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004942:	601a      	str	r2, [r3, #0]
  return result;
 8004944:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_RCC_OscConfig+0xb10>
 800495e:	4b4e      	ldr	r3, [pc, #312]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	e01b      	b.n	800499c <HAL_RCC_OscConfig+0xb48>
 8004964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800496c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	fa93 f2a3 	rbit	r2, r3
 8004978:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fa93 f2a3 	rbit	r2, r3
 8004992:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80049a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049a4:	6011      	str	r1, [r2, #0]
 80049a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	fa92 f1a2 	rbit	r1, r2
 80049b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049b4:	6011      	str	r1, [r2, #0]
  return result;
 80049b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	fab2 f282 	clz	r2, r2
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f002 021f 	and.w	r2, r2, #31
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d19e      	bne.n	8004916 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f023 020f 	bic.w	r2, r3, #15
 80049e0:	1d3b      	adds	r3, r7, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	492c      	ldr	r1, [pc, #176]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a19      	ldr	r1, [r3, #32]
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	4925      	ldr	r1, [pc, #148]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
 8004a08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fa93 f2a3 	rbit	r2, r3
 8004a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a20:	601a      	str	r2, [r3, #0]
  return result;
 8004a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fbd7 	bl	80021f0 <HAL_GetTick>
 8004a42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a46:	e009      	b.n	8004a5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd fbd2 	bl	80021f0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e109      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 8004a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	fa93 f2a3 	rbit	r2, r3
 8004a70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a74:	601a      	str	r2, [r3, #0]
  return result;
 8004a76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a7c:	fab3 f383 	clz	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f043 0301 	orr.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0xc48>
 8004a90:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <HAL_RCC_OscConfig+0xc44>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	e01e      	b.n	8004ad4 <HAL_RCC_OscConfig+0xc80>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	fa93 f2a3 	rbit	r2, r3
 8004ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	fa93 f2a3 	rbit	r2, r3
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0xe28>)
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ad8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	fa92 f1a2 	rbit	r1, r2
 8004ae8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004aec:	6011      	str	r1, [r2, #0]
  return result;
 8004aee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	fab2 f282 	clz	r2, r2
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	f042 0220 	orr.w	r2, r2, #32
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f002 021f 	and.w	r2, r2, #31
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d09b      	beq.n	8004a48 <HAL_RCC_OscConfig+0xbf4>
 8004b10:	e0ad      	b.n	8004c6e <HAL_RCC_OscConfig+0xe1a>
 8004b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	fa93 f2a3 	rbit	r2, r3
 8004b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b2a:	601a      	str	r2, [r3, #0]
  return result;
 8004b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd fb52 	bl	80021f0 <HAL_GetTick>
 8004b4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fd fb4d 	bl	80021f0 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e084      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
 8004b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	fa93 f2a3 	rbit	r2, r3
 8004b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b7e:	601a      	str	r2, [r3, #0]
  return result;
 8004b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <HAL_RCC_OscConfig+0xd4c>
 8004b9a:	4b38      	ldr	r3, [pc, #224]	; (8004c7c <HAL_RCC_OscConfig+0xe28>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	e01b      	b.n	8004bd8 <HAL_RCC_OscConfig+0xd84>
 8004ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	fa93 f2a3 	rbit	r2, r3
 8004bb4:	f107 0320 	add.w	r3, r7, #32
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f107 031c 	add.w	r3, r7, #28
 8004bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	fa93 f2a3 	rbit	r2, r3
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <HAL_RCC_OscConfig+0xe28>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f107 0214 	add.w	r2, r7, #20
 8004bdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004be0:	6011      	str	r1, [r2, #0]
 8004be2:	f107 0214 	add.w	r2, r7, #20
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	fa92 f1a2 	rbit	r1, r2
 8004bec:	f107 0210 	add.w	r2, r7, #16
 8004bf0:	6011      	str	r1, [r2, #0]
  return result;
 8004bf2:	f107 0210 	add.w	r2, r7, #16
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	fab2 f282 	clz	r2, r2
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f042 0220 	orr.w	r2, r2, #32
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	f002 021f 	and.w	r2, r2, #31
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d19e      	bne.n	8004b52 <HAL_RCC_OscConfig+0xcfe>
 8004c14:	e02b      	b.n	8004c6e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e025      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_RCC_OscConfig+0xe28>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004c2c:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <HAL_RCC_OscConfig+0xe28>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c38:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d111      	bne.n	8004c6a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004c46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d108      	bne.n	8004c6a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000

08004c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b09e      	sub	sp, #120	; 0x78
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e162      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b90      	ldr	r3, [pc, #576]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d910      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0207 	bic.w	r2, r3, #7
 8004cae:	498b      	ldr	r1, [pc, #556]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b89      	ldr	r3, [pc, #548]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e14a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b82      	ldr	r3, [pc, #520]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	497f      	ldr	r1, [pc, #508]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80dc 	beq.w	8004eac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d13c      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xf6>
 8004cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xa6>
 8004d20:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	e00f      	b.n	8004d46 <HAL_RCC_ClockConfig+0xc6>
 8004d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d2e:	fa93 f3a3 	rbit	r3, r3
 8004d32:	667b      	str	r3, [r7, #100]	; 0x64
 8004d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d38:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d42:	4b67      	ldr	r3, [pc, #412]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d4e:	fa92 f2a2 	rbit	r2, r2
 8004d52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d56:	fab2 f282 	clz	r2, r2
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	f042 0220 	orr.w	r2, r2, #32
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	f002 021f 	and.w	r2, r2, #31
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d17b      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0f3      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d13c      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x178>
 8004d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x128>
 8004da2:	4b4f      	ldr	r3, [pc, #316]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	e00f      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
 8004da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dba:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc4:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd0:	fa92 f2a2 	rbit	r2, r2
 8004dd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd8:	fab2 f282 	clz	r2, r2
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	f042 0220 	orr.w	r2, r2, #32
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	f002 021f 	and.w	r2, r2, #31
 8004de8:	2101      	movs	r1, #1
 8004dea:	fa01 f202 	lsl.w	r2, r1, r2
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d13a      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b2      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x1a0>
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e00d      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1bc>
 8004e20:	2302      	movs	r3, #2
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	61ba      	str	r2, [r7, #24]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	fa92 f2a2 	rbit	r2, r2
 8004e46:	617a      	str	r2, [r7, #20]
  return result;
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	fab2 f282 	clz	r2, r2
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	f002 021f 	and.w	r2, r2, #31
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e079      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	491a      	ldr	r1, [pc, #104]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f9b8 	bl	80021f0 <HAL_GetTick>
 8004e80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd f9b4 	bl	80021f0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e061      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d214      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b08      	ldr	r3, [pc, #32]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 0207 	bic.w	r2, r3, #7
 8004ec2:	4906      	ldr	r1, [pc, #24]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCC_ClockConfig+0x25c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e040      	b.n	8004f5e <HAL_RCC_ClockConfig+0x2de>
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_RCC_ClockConfig+0x2e8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	491a      	ldr	r1, [pc, #104]	; (8004f68 <HAL_RCC_ClockConfig+0x2e8>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <HAL_RCC_ClockConfig+0x2e8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4912      	ldr	r1, [pc, #72]	; (8004f68 <HAL_RCC_ClockConfig+0x2e8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f22:	f000 f829 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCC_ClockConfig+0x2e8>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	22f0      	movs	r2, #240	; 0xf0
 8004f32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	fa92 f2a2 	rbit	r2, r2
 8004f3a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	fab2 f282 	clz	r2, r2
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	40d3      	lsrs	r3, r2
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_RCC_ClockConfig+0x2ec>)
 8004f48:	5cd3      	ldrb	r3, [r2, r3]
 8004f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <HAL_RCC_ClockConfig+0x2f0>)
 8004f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_RCC_ClockConfig+0x2f4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd f906 	bl	8002168 <HAL_InitTick>
  
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3778      	adds	r7, #120	; 0x78
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	08008af0 	.word	0x08008af0
 8004f70:	20000000 	.word	0x20000000
 8004f74:	20000004 	.word	0x20000004

08004f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d002      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0x36>
 8004fa6:	e03f      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004faa:	623b      	str	r3, [r7, #32]
      break;
 8004fac:	e03f      	b.n	800502e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004fb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fb8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	fa92 f2a2 	rbit	r2, r2
 8004fc0:	607a      	str	r2, [r7, #4]
  return result;
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	fab2 f282 	clz	r2, r2
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	40d3      	lsrs	r3, r2
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fce:	5cd3      	ldrb	r3, [r2, r3]
 8004fd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	220f      	movs	r2, #15
 8004fdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	fa92 f2a2 	rbit	r2, r2
 8004fe4:	60fa      	str	r2, [r7, #12]
  return result;
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	fab2 f282 	clz	r2, r2
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	40d3      	lsrs	r3, r2
 8004ff0:	4a15      	ldr	r2, [pc, #84]	; (8005048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ff2:	5cd3      	ldrb	r3, [r2, r3]
 8004ff4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	fbb2 f2f3 	udiv	r2, r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
 8005010:	e007      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005012:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	fbb2 f2f3 	udiv	r2, r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	623b      	str	r3, [r7, #32]
      break;
 8005026:	e002      	b.n	800502e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetSysClockFreq+0xc8>)
 800502a:	623b      	str	r3, [r7, #32]
      break;
 800502c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502e:	6a3b      	ldr	r3, [r7, #32]
}
 8005030:	4618      	mov	r0, r3
 8005032:	372c      	adds	r7, #44	; 0x2c
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40021000 	.word	0x40021000
 8005040:	007a1200 	.word	0x007a1200
 8005044:	08008b08 	.word	0x08008b08
 8005048:	08008b18 	.word	0x08008b18

0800504c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_GetHCLKFreq+0x14>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000000 	.word	0x20000000

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800506a:	f7ff ffef 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800506e:	4601      	mov	r1, r0
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005078:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800507c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	fa92 f2a2 	rbit	r2, r2
 8005084:	603a      	str	r2, [r7, #0]
  return result;
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	fab2 f282 	clz	r2, r2
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	40d3      	lsrs	r3, r2
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	08008b00 	.word	0x08008b00

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80050ae:	f7ff ffcd 	bl	800504c <HAL_RCC_GetHCLKFreq>
 80050b2:	4601      	mov	r1, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80050bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	fa92 f2a2 	rbit	r2, r2
 80050c8:	603a      	str	r2, [r7, #0]
  return result;
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	fab2 f282 	clz	r2, r2
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	40d3      	lsrs	r3, r2
 80050d4:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	08008b00 	.word	0x08008b00

080050ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b092      	sub	sp, #72	; 0x48
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80d7 	beq.w	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005110:	4b4e      	ldr	r3, [pc, #312]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10e      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511c:	4b4b      	ldr	r3, [pc, #300]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4a4a      	ldr	r2, [pc, #296]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005126:	61d3      	str	r3, [r2, #28]
 8005128:	4b48      	ldr	r3, [pc, #288]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513a:	4b45      	ldr	r3, [pc, #276]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d118      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005146:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a41      	ldr	r2, [pc, #260]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005152:	f7fd f84d 	bl	80021f0 <HAL_GetTick>
 8005156:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	e008      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515a:	f7fd f849 	bl	80021f0 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	; 0x64
 8005166:	d901      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e1d6      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005178:	4b34      	ldr	r3, [pc, #208]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8084 	beq.w	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005194:	429a      	cmp	r2, r3
 8005196:	d07c      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005198:	4b2c      	ldr	r3, [pc, #176]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	fa93 f3a3 	rbit	r3, r3
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051b2:	fab3 f383 	clz	r3, r3
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	461a      	mov	r2, r3
 80051c2:	2301      	movs	r3, #1
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	fa93 f3a3 	rbit	r3, r3
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	461a      	mov	r2, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04b      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fc fff9 	bl	80021f0 <HAL_GetTick>
 80051fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005200:	e00a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005202:	f7fc fff5 	bl	80021f0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e180      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005218:	2302      	movs	r3, #2
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	fa93 f3a3 	rbit	r3, r3
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	2302      	movs	r3, #2
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	61fb      	str	r3, [r7, #28]
  return result;
 8005230:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d108      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005246:	4b01      	ldr	r3, [pc, #4]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	e00d      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800524c:	40021000 	.word	0x40021000
 8005250:	40007000 	.word	0x40007000
 8005254:	10908100 	.word	0x10908100
 8005258:	2302      	movs	r3, #2
 800525a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	4ba0      	ldr	r3, [pc, #640]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2202      	movs	r2, #2
 800526a:	613a      	str	r2, [r7, #16]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	fa92 f2a2 	rbit	r2, r2
 8005272:	60fa      	str	r2, [r7, #12]
  return result;
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	fab2 f282 	clz	r2, r2
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	f002 021f 	and.w	r2, r2, #31
 8005286:	2101      	movs	r1, #1
 8005288:	fa01 f202 	lsl.w	r2, r1, r2
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0b7      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005292:	4b95      	ldr	r3, [pc, #596]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4992      	ldr	r1, [pc, #584]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ac:	4b8e      	ldr	r3, [pc, #568]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4a8d      	ldr	r2, [pc, #564]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c4:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	f023 0203 	bic.w	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4985      	ldr	r1, [pc, #532]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d008      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e2:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	497e      	ldr	r1, [pc, #504]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005300:	4b79      	ldr	r3, [pc, #484]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	4976      	ldr	r1, [pc, #472]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f023 0210 	bic.w	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	496f      	ldr	r1, [pc, #444]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800533c:	4b6a      	ldr	r3, [pc, #424]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	4967      	ldr	r1, [pc, #412]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535a:	4b63      	ldr	r3, [pc, #396]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f023 0220 	bic.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4960      	ldr	r1, [pc, #384]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005378:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	4958      	ldr	r1, [pc, #352]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005396:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4951      	ldr	r1, [pc, #324]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053b4:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4949      	ldr	r1, [pc, #292]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d2:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4942      	ldr	r1, [pc, #264]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	493a      	ldr	r1, [pc, #232]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800540e:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	4933      	ldr	r1, [pc, #204]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005438:	492b      	ldr	r1, [pc, #172]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	4924      	ldr	r1, [pc, #144]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005468:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	491c      	ldr	r1, [pc, #112]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005486:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	4915      	ldr	r1, [pc, #84]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	490d      	ldr	r1, [pc, #52]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ce:	4906      	ldr	r1, [pc, #24]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	490b      	ldr	r1, [pc, #44]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	4904      	ldr	r1, [pc, #16]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005514:	4313      	orrs	r3, r2
 8005516:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3748      	adds	r7, #72	; 0x48
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000

08005528 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e083      	b.n	8005642 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7f5b      	ldrb	r3, [r3, #29]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc fbd6 	bl	8001cfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	22ca      	movs	r2, #202	; 0xca
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2253      	movs	r2, #83	; 0x53
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f897 	bl	800569a <RTC_EnterInitMode>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	22ff      	movs	r2, #255	; 0xff
 8005578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2204      	movs	r2, #4
 800557e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e05e      	b.n	8005642 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005596:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6919      	ldr	r1, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	041a      	lsls	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10e      	bne.n	8005610 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f829 	bl	800564a <HAL_RTC_WaitForSynchro>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	22ff      	movs	r2, #255	; 0xff
 8005604:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e018      	b.n	8005642 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	22ff      	movs	r2, #255	; 0xff
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005664:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005666:	f7fc fdc3 	bl	80021f0 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800566c:	e009      	b.n	8005682 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800566e:	f7fc fdbf 	bl	80021f0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800567c:	d901      	bls.n	8005682 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e007      	b.n	8005692 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ee      	beq.n	800566e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d119      	bne.n	80056e8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056bc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056be:	f7fc fd97 	bl	80021f0 <HAL_GetTick>
 80056c2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80056c4:	e009      	b.n	80056da <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056c6:	f7fc fd93 	bl	80021f0 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d4:	d901      	bls.n	80056da <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e007      	b.n	80056ea <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e084      	b.n	800580e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fc fb12 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005744:	d902      	bls.n	800574c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e002      	b.n	8005752 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800574c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005750:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800575a:	d007      	beq.n	800576c <HAL_SPI_Init+0x7a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005764:	d002      	beq.n	800576c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800577c:	d903      	bls.n	8005786 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
 8005784:	e002      	b.n	800578c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	ea42 0103 	orr.w	r1, r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	f003 0204 	and.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	ea42 0103 	orr.w	r1, r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_SPI_Transmit+0x22>
 8005834:	2302      	movs	r3, #2
 8005836:	e150      	b.n	8005ada <HAL_SPI_Transmit+0x2c4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005840:	f7fc fcd6 	bl	80021f0 <HAL_GetTick>
 8005844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005856:	2302      	movs	r3, #2
 8005858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800585a:	e135      	b.n	8005ac8 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_Transmit+0x52>
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800586c:	e12c      	b.n	8005ac8 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2203      	movs	r2, #3
 8005872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b8:	d107      	bne.n	80058ca <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d007      	beq.n	80058e8 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f0:	d94b      	bls.n	800598a <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_Transmit+0xea>
 80058fa:	8afb      	ldrh	r3, [r7, #22]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d13e      	bne.n	800597e <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	1c9a      	adds	r2, r3, #2
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005924:	e02b      	b.n	800597e <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d112      	bne.n	800595a <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005958:	e011      	b.n	800597e <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595a:	f7fc fc49 	bl	80021f0 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d803      	bhi.n	8005972 <HAL_SPI_Transmit+0x15c>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d102      	bne.n	8005978 <HAL_SPI_Transmit+0x162>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800597c:	e0a4      	b.n	8005ac8 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ce      	bne.n	8005926 <HAL_SPI_Transmit+0x110>
 8005988:	e07c      	b.n	8005a84 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Transmit+0x182>
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d170      	bne.n	8005a7a <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d912      	bls.n	80059c8 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	881a      	ldrh	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	1c9a      	adds	r2, r3, #2
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b02      	subs	r3, #2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c6:	e058      	b.n	8005a7a <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059ee:	e044      	b.n	8005a7a <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d12b      	bne.n	8005a56 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d912      	bls.n	8005a2e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	1c9a      	adds	r2, r3, #2
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b02      	subs	r3, #2
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a2c:	e025      	b.n	8005a7a <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a54:	e011      	b.n	8005a7a <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a56:	f7fc fbcb 	bl	80021f0 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d803      	bhi.n	8005a6e <HAL_SPI_Transmit+0x258>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a6c:	d102      	bne.n	8005a74 <HAL_SPI_Transmit+0x25e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a78:	e026      	b.n	8005ac8 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1b5      	bne.n	80059f0 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f901 	bl	8005c90 <SPI_EndRxTxTransaction>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e000      	b.n	8005ac8 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af2:	e04c      	b.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d048      	beq.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005afc:	f7fc fb78 	bl	80021f0 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d902      	bls.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d13d      	bne.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b2a:	d111      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b34:	d004      	beq.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3e:	d107      	bne.n	8005b50 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b58:	d10f      	bne.n	8005b7a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e00f      	b.n	8005bae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4013      	ands	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1a3      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005bc4:	e057      	b.n	8005c76 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bcc:	d106      	bne.n	8005bdc <SPI_WaitFifoStateUntilTimeout+0x26>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be2:	d048      	beq.n	8005c76 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005be4:	f7fc fb04 	bl	80021f0 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d902      	bls.n	8005bfa <SPI_WaitFifoStateUntilTimeout+0x44>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d13d      	bne.n	8005c76 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c12:	d111      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1c:	d004      	beq.n	8005c28 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c26:	d107      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c40:	d10f      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e008      	b.n	8005c88 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d19f      	bne.n	8005bc6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff ff84 	bl	8005bb6 <SPI_WaitFifoStateUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e027      	b.n	8005d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff07 	bl	8005ae2 <SPI_WaitFlagStateUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e014      	b.n	8005d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff ff5d 	bl	8005bb6 <SPI_WaitFifoStateUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e000      	b.n	8005d14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e040      	b.n	8005db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc f844 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fbd0 	bl	8006500 <UART_SetConfig>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e022      	b.n	8005db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fdde 	bl	8006934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fe65 	bl	8006a78 <UART_CheckIdleState>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	f040 8081 	bne.w	8005ed4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_UART_Transmit+0x26>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e079      	b.n	8005ed6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UART_Transmit+0x38>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e072      	b.n	8005ed6 <HAL_UART_Transmit+0x11e>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005e04:	f7fc f9f4 	bl	80021f0 <HAL_GetTick>
 8005e08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d108      	bne.n	8005e36 <HAL_UART_Transmit+0x7e>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e003      	b.n	8005e3e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e3e:	e02d      	b.n	8005e9c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fe59 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e03d      	b.n	8005ed6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	881a      	ldrh	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	3302      	adds	r3, #2
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	e008      	b.n	8005e8a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	b292      	uxth	r2, r2
 8005e82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	3301      	adds	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1cb      	bne.n	8005e40 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2140      	movs	r1, #64	; 0x40
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fe25 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e009      	b.n	8005ed6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005ed4:	2302      	movs	r3, #2
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b08a      	sub	sp, #40	; 0x28
 8005ee2:	af02      	add	r7, sp, #8
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	f040 80bb 	bne.w	800606e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_UART_Receive+0x26>
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0b3      	b.n	8006070 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Receive+0x38>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0ac      	b.n	8006070 <HAL_UART_Receive+0x192>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2222      	movs	r2, #34	; 0x22
 8005f28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005f2a:	f7fc f961 	bl	80021f0 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f48:	d10e      	bne.n	8005f68 <HAL_UART_Receive+0x8a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <HAL_UART_Receive+0x80>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f5c:	e02d      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f66:	e028      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10d      	bne.n	8005f8c <HAL_UART_Receive+0xae>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <HAL_UART_Receive+0xa4>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f80:	e01b      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	227f      	movs	r2, #127	; 0x7f
 8005f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f8a:	e016      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f94:	d10d      	bne.n	8005fb2 <HAL_UART_Receive+0xd4>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_Receive+0xca>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	227f      	movs	r2, #127	; 0x7f
 8005fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fa6:	e008      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	223f      	movs	r2, #63	; 0x3f
 8005fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fb0:	e003      	b.n	8005fba <HAL_UART_Receive+0xdc>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d108      	bne.n	8005fde <HAL_UART_Receive+0x100>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d104      	bne.n	8005fde <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	e003      	b.n	8005fe6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005fe6:	e033      	b.n	8006050 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fd85 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e036      	b.n	8006070 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10c      	bne.n	8006022 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800600e:	b29a      	uxth	r2, r3
 8006010:	8a7b      	ldrh	r3, [r7, #18]
 8006012:	4013      	ands	r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3302      	adds	r3, #2
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	e00d      	b.n	800603e <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006028:	b29b      	uxth	r3, r3
 800602a:	b2da      	uxtb	r2, r3
 800602c:	8a7b      	ldrh	r3, [r7, #18]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4013      	ands	r3, r2
 8006032:	b2da      	uxtb	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1c5      	bne.n	8005fe8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608a:	2b20      	cmp	r3, #32
 800608c:	d144      	bne.n	8006118 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_Transmit_IT+0x22>
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e03d      	b.n	800611a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Transmit_IT+0x34>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e036      	b.n	800611a <HAL_UART_Transmit_IT+0xa2>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2221      	movs	r2, #33	; 0x21
 80060da:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	d107      	bne.n	80060f6 <HAL_UART_Transmit_IT+0x7e>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <HAL_UART_Transmit_IT+0xb0>)
 80060f2:	665a      	str	r2, [r3, #100]	; 0x64
 80060f4:	e002      	b.n	80060fc <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a0c      	ldr	r2, [pc, #48]	; (800612c <HAL_UART_Transmit_IT+0xb4>)
 80060fa:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006112:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	08006cd9 	.word	0x08006cd9
 800612c:	08006c65 	.word	0x08006c65

08006130 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006142:	2b20      	cmp	r3, #32
 8006144:	f040 808a 	bne.w	800625c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_UART_Receive_IT+0x24>
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e082      	b.n	800625e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_UART_Receive_IT+0x36>
 8006162:	2302      	movs	r3, #2
 8006164:	e07b      	b.n	800625e <HAL_UART_Receive_IT+0x12e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d10e      	bne.n	80061b2 <HAL_UART_Receive_IT+0x82>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <HAL_UART_Receive_IT+0x78>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061a6:	e02d      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b0:	e028      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <HAL_UART_Receive_IT+0xa6>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Receive_IT+0x9c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ca:	e01b      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	227f      	movs	r2, #127	; 0x7f
 80061d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d4:	e016      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d10d      	bne.n	80061fc <HAL_UART_Receive_IT+0xcc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_UART_Receive_IT+0xc2>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	227f      	movs	r2, #127	; 0x7f
 80061ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061f0:	e008      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	223f      	movs	r2, #63	; 0x3f
 80061f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fa:	e003      	b.n	8006204 <HAL_UART_Receive_IT+0xd4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2222      	movs	r2, #34	; 0x22
 800620e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d107      	bne.n	800623a <HAL_UART_Receive_IT+0x10a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <HAL_UART_Receive_IT+0x13c>)
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
 8006238:	e002      	b.n	8006240 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <HAL_UART_Receive_IT+0x140>)
 800623e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006256:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	08006e2d 	.word	0x08006e2d
 8006270:	08006d87 	.word	0x08006d87

08006274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	f640 030f 	movw	r3, #2063	; 0x80f
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d113      	bne.n	80062cc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8114 	beq.w	80064ea <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
      }
      return;
 80062ca:	e10e      	b.n	80064ea <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80d6 	beq.w	8006480 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80cb 	beq.w	8006480 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <HAL_UART_IRQHandler+0x9e>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2201      	movs	r2, #1
 8006304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630a:	f043 0201 	orr.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <HAL_UART_IRQHandler+0xc6>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d009      	beq.n	800633a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2202      	movs	r2, #2
 800632c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00e      	beq.n	8006362 <HAL_UART_IRQHandler+0xee>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2204      	movs	r2, #4
 8006354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635a:	f043 0202 	orr.w	r2, r3, #2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d013      	beq.n	8006394 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800638c:	f043 0208 	orr.w	r2, r3, #8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <HAL_UART_IRQHandler+0x14a>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8093 	beq.w	80064ee <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	d004      	beq.n	800640a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006406:	2b00      	cmp	r3, #0
 8006408:	d031      	beq.n	800646e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fbf4 	bl	8006bf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d123      	bne.n	8006466 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800643a:	4a30      	ldr	r2, [pc, #192]	; (80064fc <HAL_UART_IRQHandler+0x288>)
 800643c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc f813 	bl	800246e <HAL_DMA_Abort_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00e      	b.n	800647c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb fb8a 	bl	8001b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00a      	b.n	800647c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb fb86 	bl	8001b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e006      	b.n	800647c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fb fb82 	bl	8001b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800647a:	e038      	b.n	80064ee <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	bf00      	nop
    return;
 800647e:	e036      	b.n	80064ee <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <HAL_UART_IRQHandler+0x232>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800649c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fd17 	bl	8006ed2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064a4:	e026      	b.n	80064f4 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
    }
    return;
 80064ca:	e012      	b.n	80064f2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <HAL_UART_IRQHandler+0x280>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fc37 	bl	8006d54 <UART_EndTransmit_IT>
    return;
 80064e6:	bf00      	nop
 80064e8:	e004      	b.n	80064f4 <HAL_UART_IRQHandler+0x280>
      return;
 80064ea:	bf00      	nop
 80064ec:	e002      	b.n	80064f4 <HAL_UART_IRQHandler+0x280>
    return;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_UART_IRQHandler+0x280>
    return;
 80064f2:	bf00      	nop
  }

}
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	08006c39 	.word	0x08006c39

08006500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4bac      	ldr	r3, [pc, #688]	; (80067e0 <UART_SetConfig+0x2e0>)
 8006530:	4013      	ands	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	6939      	ldr	r1, [r7, #16]
 8006538:	430b      	orrs	r3, r1
 800653a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	430a      	orrs	r2, r1
 8006574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a9a      	ldr	r2, [pc, #616]	; (80067e4 <UART_SetConfig+0x2e4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d121      	bne.n	80065c4 <UART_SetConfig+0xc4>
 8006580:	4b99      	ldr	r3, [pc, #612]	; (80067e8 <UART_SetConfig+0x2e8>)
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d817      	bhi.n	80065bc <UART_SetConfig+0xbc>
 800658c:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x94>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065b1 	.word	0x080065b1
 800659c:	080065b7 	.word	0x080065b7
 80065a0:	080065ab 	.word	0x080065ab
 80065a4:	2301      	movs	r3, #1
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e0b2      	b.n	8006710 <UART_SetConfig+0x210>
 80065aa:	2302      	movs	r3, #2
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e0af      	b.n	8006710 <UART_SetConfig+0x210>
 80065b0:	2304      	movs	r3, #4
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e0ac      	b.n	8006710 <UART_SetConfig+0x210>
 80065b6:	2308      	movs	r3, #8
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e0a9      	b.n	8006710 <UART_SetConfig+0x210>
 80065bc:	2310      	movs	r3, #16
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	bf00      	nop
 80065c2:	e0a5      	b.n	8006710 <UART_SetConfig+0x210>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a88      	ldr	r2, [pc, #544]	; (80067ec <UART_SetConfig+0x2ec>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d123      	bne.n	8006616 <UART_SetConfig+0x116>
 80065ce:	4b86      	ldr	r3, [pc, #536]	; (80067e8 <UART_SetConfig+0x2e8>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d012      	beq.n	8006602 <UART_SetConfig+0x102>
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d802      	bhi.n	80065e8 <UART_SetConfig+0xe8>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <UART_SetConfig+0xf6>
 80065e6:	e012      	b.n	800660e <UART_SetConfig+0x10e>
 80065e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ec:	d00c      	beq.n	8006608 <UART_SetConfig+0x108>
 80065ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065f2:	d003      	beq.n	80065fc <UART_SetConfig+0xfc>
 80065f4:	e00b      	b.n	800660e <UART_SetConfig+0x10e>
 80065f6:	2300      	movs	r3, #0
 80065f8:	77fb      	strb	r3, [r7, #31]
 80065fa:	e089      	b.n	8006710 <UART_SetConfig+0x210>
 80065fc:	2302      	movs	r3, #2
 80065fe:	77fb      	strb	r3, [r7, #31]
 8006600:	e086      	b.n	8006710 <UART_SetConfig+0x210>
 8006602:	2304      	movs	r3, #4
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e083      	b.n	8006710 <UART_SetConfig+0x210>
 8006608:	2308      	movs	r3, #8
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e080      	b.n	8006710 <UART_SetConfig+0x210>
 800660e:	2310      	movs	r3, #16
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	bf00      	nop
 8006614:	e07c      	b.n	8006710 <UART_SetConfig+0x210>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a75      	ldr	r2, [pc, #468]	; (80067f0 <UART_SetConfig+0x2f0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d123      	bne.n	8006668 <UART_SetConfig+0x168>
 8006620:	4b71      	ldr	r3, [pc, #452]	; (80067e8 <UART_SetConfig+0x2e8>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800662c:	d012      	beq.n	8006654 <UART_SetConfig+0x154>
 800662e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006632:	d802      	bhi.n	800663a <UART_SetConfig+0x13a>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <UART_SetConfig+0x148>
 8006638:	e012      	b.n	8006660 <UART_SetConfig+0x160>
 800663a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800663e:	d00c      	beq.n	800665a <UART_SetConfig+0x15a>
 8006640:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006644:	d003      	beq.n	800664e <UART_SetConfig+0x14e>
 8006646:	e00b      	b.n	8006660 <UART_SetConfig+0x160>
 8006648:	2300      	movs	r3, #0
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e060      	b.n	8006710 <UART_SetConfig+0x210>
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e05d      	b.n	8006710 <UART_SetConfig+0x210>
 8006654:	2304      	movs	r3, #4
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e05a      	b.n	8006710 <UART_SetConfig+0x210>
 800665a:	2308      	movs	r3, #8
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e057      	b.n	8006710 <UART_SetConfig+0x210>
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	bf00      	nop
 8006666:	e053      	b.n	8006710 <UART_SetConfig+0x210>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a61      	ldr	r2, [pc, #388]	; (80067f4 <UART_SetConfig+0x2f4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d123      	bne.n	80066ba <UART_SetConfig+0x1ba>
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <UART_SetConfig+0x2e8>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800667a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667e:	d012      	beq.n	80066a6 <UART_SetConfig+0x1a6>
 8006680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006684:	d802      	bhi.n	800668c <UART_SetConfig+0x18c>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <UART_SetConfig+0x19a>
 800668a:	e012      	b.n	80066b2 <UART_SetConfig+0x1b2>
 800668c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006690:	d00c      	beq.n	80066ac <UART_SetConfig+0x1ac>
 8006692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006696:	d003      	beq.n	80066a0 <UART_SetConfig+0x1a0>
 8006698:	e00b      	b.n	80066b2 <UART_SetConfig+0x1b2>
 800669a:	2300      	movs	r3, #0
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e037      	b.n	8006710 <UART_SetConfig+0x210>
 80066a0:	2302      	movs	r3, #2
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e034      	b.n	8006710 <UART_SetConfig+0x210>
 80066a6:	2304      	movs	r3, #4
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e031      	b.n	8006710 <UART_SetConfig+0x210>
 80066ac:	2308      	movs	r3, #8
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e02e      	b.n	8006710 <UART_SetConfig+0x210>
 80066b2:	2310      	movs	r3, #16
 80066b4:	77fb      	strb	r3, [r7, #31]
 80066b6:	bf00      	nop
 80066b8:	e02a      	b.n	8006710 <UART_SetConfig+0x210>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4e      	ldr	r2, [pc, #312]	; (80067f8 <UART_SetConfig+0x2f8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d123      	bne.n	800670c <UART_SetConfig+0x20c>
 80066c4:	4b48      	ldr	r3, [pc, #288]	; (80067e8 <UART_SetConfig+0x2e8>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80066cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d0:	d012      	beq.n	80066f8 <UART_SetConfig+0x1f8>
 80066d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d6:	d802      	bhi.n	80066de <UART_SetConfig+0x1de>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <UART_SetConfig+0x1ec>
 80066dc:	e012      	b.n	8006704 <UART_SetConfig+0x204>
 80066de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066e2:	d00c      	beq.n	80066fe <UART_SetConfig+0x1fe>
 80066e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066e8:	d003      	beq.n	80066f2 <UART_SetConfig+0x1f2>
 80066ea:	e00b      	b.n	8006704 <UART_SetConfig+0x204>
 80066ec:	2300      	movs	r3, #0
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e00e      	b.n	8006710 <UART_SetConfig+0x210>
 80066f2:	2302      	movs	r3, #2
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e00b      	b.n	8006710 <UART_SetConfig+0x210>
 80066f8:	2304      	movs	r3, #4
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e008      	b.n	8006710 <UART_SetConfig+0x210>
 80066fe:	2308      	movs	r3, #8
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e005      	b.n	8006710 <UART_SetConfig+0x210>
 8006704:	2310      	movs	r3, #16
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	bf00      	nop
 800670a:	e001      	b.n	8006710 <UART_SetConfig+0x210>
 800670c:	2310      	movs	r3, #16
 800670e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	f040 8090 	bne.w	800683c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	2b08      	cmp	r3, #8
 8006720:	d86c      	bhi.n	80067fc <UART_SetConfig+0x2fc>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x228>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800674d 	.word	0x0800674d
 800672c:	0800676d 	.word	0x0800676d
 8006730:	0800678d 	.word	0x0800678d
 8006734:	080067fd 	.word	0x080067fd
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067fd 	.word	0x080067fd
 8006740:	080067fd 	.word	0x080067fd
 8006744:	080067fd 	.word	0x080067fd
 8006748:	080067c9 	.word	0x080067c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fe fc8a 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8006750:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	005a      	lsls	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	441a      	add	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	fbb2 f3f3 	udiv	r3, r2, r3
 8006766:	b29b      	uxth	r3, r3
 8006768:	61bb      	str	r3, [r7, #24]
        break;
 800676a:	e04a      	b.n	8006802 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fe fc9c 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006770:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	005a      	lsls	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	61bb      	str	r3, [r7, #24]
        break;
 800678a:	e03a      	b.n	8006802 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006796:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6852      	ldr	r2, [r2, #4]
 800679e:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	61bb      	str	r3, [r7, #24]
        break;
 80067a6:	e02c      	b.n	8006802 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a8:	f7fe fbe6 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 80067ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	005a      	lsls	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	61bb      	str	r3, [r7, #24]
        break;
 80067c6:	e01c      	b.n	8006802 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	b29b      	uxth	r3, r3
 80067dc:	61bb      	str	r3, [r7, #24]
        break;
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0x302>
 80067e0:	efff69f3 	.word	0xefff69f3
 80067e4:	40013800 	.word	0x40013800
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40004400 	.word	0x40004400
 80067f0:	40004800 	.word	0x40004800
 80067f4:	40004c00 	.word	0x40004c00
 80067f8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d916      	bls.n	8006836 <UART_SetConfig+0x336>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680e:	d212      	bcs.n	8006836 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	b29b      	uxth	r3, r3
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	b29a      	uxth	r2, r3
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	4313      	orrs	r3, r2
 800682a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	897a      	ldrh	r2, [r7, #10]
 8006832:	60da      	str	r2, [r3, #12]
 8006834:	e072      	b.n	800691c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
 800683a:	e06f      	b.n	800691c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	2b08      	cmp	r3, #8
 8006840:	d85b      	bhi.n	80068fa <UART_SetConfig+0x3fa>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <UART_SetConfig+0x348>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800688b 	.word	0x0800688b
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068fb 	.word	0x080068fb
 8006858:	080068c5 	.word	0x080068c5
 800685c:	080068fb 	.word	0x080068fb
 8006860:	080068fb 	.word	0x080068fb
 8006864:	080068fb 	.word	0x080068fb
 8006868:	080068e3 	.word	0x080068e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fbfa 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8006870:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085a      	lsrs	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	b29b      	uxth	r3, r3
 8006886:	61bb      	str	r3, [r7, #24]
        break;
 8006888:	e03a      	b.n	8006900 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688a:	f7fe fc0d 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 800688e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	085a      	lsrs	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	61bb      	str	r3, [r7, #24]
        break;
 80068a6:	e02b      	b.n	8006900 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80068b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80068be:	b29b      	uxth	r3, r3
 80068c0:	61bb      	str	r3, [r7, #24]
        break;
 80068c2:	e01d      	b.n	8006900 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c4:	f7fe fb58 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 80068c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	085a      	lsrs	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	441a      	add	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	61bb      	str	r3, [r7, #24]
        break;
 80068e0:	e00e      	b.n	8006900 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	61bb      	str	r3, [r7, #24]
        break;
 80068f8:	e002      	b.n	8006900 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	75fb      	strb	r3, [r7, #23]
        break;
 80068fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b0f      	cmp	r3, #15
 8006904:	d908      	bls.n	8006918 <UART_SetConfig+0x418>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690c:	d204      	bcs.n	8006918 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e001      	b.n	800691c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop

08006934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a32:	d10a      	bne.n	8006a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a86:	f7fb fbb3 	bl	80021f0 <HAL_GetTick>
 8006a8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d10e      	bne.n	8006ab8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f82a 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e020      	b.n	8006afa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d10e      	bne.n	8006ae4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f814 	bl	8006b02 <UART_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e00a      	b.n	8006afa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	e05d      	b.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b1a:	d059      	beq.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1c:	f7fb fb68 	bl	80021f0 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d11b      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e042      	b.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d02b      	beq.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b86:	d123      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b90:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ba0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e00f      	b.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d092      	beq.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7fa ff8e 	bl	8001b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c70:	2b21      	cmp	r3, #33	; 0x21
 8006c72:	d12b      	bne.n	8006ccc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d110      	bne.n	8006ca2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006ca0:	e014      	b.n	8006ccc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b292      	uxth	r2, r2
 8006cae:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	2b21      	cmp	r3, #33	; 0x21
 8006ce6:	d12f      	bne.n	8006d48 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d110      	bne.n	8006d16 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d02:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d12:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d14:	e018      	b.n	8006d48 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7fa fef3 	bl	8001b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d94:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9a:	2b22      	cmp	r3, #34	; 0x22
 8006d9c:	d13a      	bne.n	8006e14 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006da4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006da6:	89bb      	ldrh	r3, [r7, #12]
 8006da8:	b2d9      	uxtb	r1, r3
 8006daa:	89fb      	ldrh	r3, [r7, #14]
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	400a      	ands	r2, r1
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d121      	bne.n	8006e24 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fa fe9d 	bl	8001b4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e12:	e007      	b.n	8006e24 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0208 	orr.w	r2, r2, #8
 8006e22:	619a      	str	r2, [r3, #24]
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e40:	2b22      	cmp	r3, #34	; 0x22
 8006e42:	d13a      	bne.n	8006eba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e4a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e52:	89ba      	ldrh	r2, [r7, #12]
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	4013      	ands	r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d121      	bne.n	8006eca <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0201 	bic.w	r2, r2, #1
 8006ea4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fa fe4a 	bl	8001b4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eb8:	e007      	b.n	8006eca <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0208 	orr.w	r2, r2, #8
 8006ec8:	619a      	str	r2, [r3, #24]
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006eee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006ef2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f1e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f22:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b21a      	sxth	r2, r3
 8006f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f32:	43db      	mvns	r3, r3
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	4013      	ands	r3, r2
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f50:	b084      	sub	sp, #16
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	f107 0014 	add.w	r0, r7, #20
 8006f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff ffaf 	bl	8006ee6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f94:	b004      	add	sp, #16
 8006f96:	4770      	bx	lr

08006f98 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b095      	sub	sp, #84	; 0x54
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	f040 816d 	bne.w	8007286 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d909      	bls.n	8006fcc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc4:	1ad2      	subs	r2, r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	619a      	str	r2, [r3, #24]
 8006fca:	e005      	b.n	8006fd8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d11a      	bne.n	8007016 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6959      	ldr	r1, [r3, #20]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88da      	ldrh	r2, [r3, #6]
 8006fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fac9 	bl	8007584 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ff2:	687c      	ldr	r4, [r7, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	441c      	add	r4, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4423      	add	r3, r4
 8007006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e11b      	b.n	800724e <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d06a      	beq.n	8007102 <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800702c:	687c      	ldr	r4, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d14c      	bne.n	80070d0 <USB_EPStartXfer+0x138>
 8007036:	687c      	ldr	r4, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703e:	b29b      	uxth	r3, r3
 8007040:	441c      	add	r4, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4423      	add	r3, r4
 800704a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007052:	2b00      	cmp	r3, #0
 8007054:	d110      	bne.n	8007078 <USB_EPStartXfer+0xe0>
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800705e:	b29a      	uxth	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29a      	uxth	r2, r3
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e03f      	b.n	80070f8 <USB_EPStartXfer+0x160>
 8007078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707a:	2b3e      	cmp	r3, #62	; 0x3e
 800707c:	d811      	bhi.n	80070a2 <USB_EPStartXfer+0x10a>
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
 8007084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <USB_EPStartXfer+0xfc>
 800708e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007090:	3301      	adds	r3, #1
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007096:	b29b      	uxth	r3, r3
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	b29a      	uxth	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e02a      	b.n	80070f8 <USB_EPStartXfer+0x160>
 80070a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	647b      	str	r3, [r7, #68]	; 0x44
 80070a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <USB_EPStartXfer+0x120>
 80070b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b4:	3b01      	subs	r3, #1
 80070b6:	647b      	str	r3, [r7, #68]	; 0x44
 80070b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	029b      	lsls	r3, r3, #10
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e013      	b.n	80070f8 <USB_EPStartXfer+0x160>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10f      	bne.n	80070f8 <USB_EPStartXfer+0x160>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	441c      	add	r4, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4423      	add	r3, r4
 80070ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	895b      	ldrh	r3, [r3, #10]
 80070fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007100:	e069      	b.n	80071d6 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d14c      	bne.n	80071a4 <USB_EPStartXfer+0x20c>
 800710a:	687c      	ldr	r4, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	441c      	add	r4, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4423      	add	r3, r4
 800711e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <USB_EPStartXfer+0x1b4>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007132:	b29a      	uxth	r2, r3
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e040      	b.n	80071ce <USB_EPStartXfer+0x236>
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	2b3e      	cmp	r3, #62	; 0x3e
 8007150:	d811      	bhi.n	8007176 <USB_EPStartXfer+0x1de>
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	643b      	str	r3, [r7, #64]	; 0x40
 8007158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <USB_EPStartXfer+0x1d0>
 8007162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007164:	3301      	adds	r3, #1
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
 8007168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716a:	b29b      	uxth	r3, r3
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	b29a      	uxth	r2, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e02b      	b.n	80071ce <USB_EPStartXfer+0x236>
 8007176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
 800717c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <USB_EPStartXfer+0x1f4>
 8007186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007188:	3b01      	subs	r3, #1
 800718a:	643b      	str	r3, [r7, #64]	; 0x40
 800718c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e014      	b.n	80071ce <USB_EPStartXfer+0x236>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d110      	bne.n	80071ce <USB_EPStartXfer+0x236>
 80071ac:	687c      	ldr	r4, [r7, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	441c      	add	r4, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4423      	add	r3, r4
 80071c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	891b      	ldrh	r3, [r3, #8]
 80071d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6959      	ldr	r1, [r3, #20]
 80071da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9ce 	bl	8007584 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d115      	bne.n	800721c <USB_EPStartXfer+0x284>
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	b29c      	uxth	r4, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	4b96      	ldr	r3, [pc, #600]	; (800746c <USB_EPStartXfer+0x4d4>)
 8007214:	4323      	orrs	r3, r4
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]
 800721a:	e018      	b.n	800724e <USB_EPStartXfer+0x2b6>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d114      	bne.n	800724e <USB_EPStartXfer+0x2b6>
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	b29c      	uxth	r4, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	4b8a      	ldr	r3, [pc, #552]	; (8007470 <USB_EPStartXfer+0x4d8>)
 8007248:	4323      	orrs	r3, r4
 800724a:	b29b      	uxth	r3, r3
 800724c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007264:	b29c      	uxth	r4, r3
 8007266:	f084 0310 	eor.w	r3, r4, #16
 800726a:	b29c      	uxth	r4, r3
 800726c:	f084 0320 	eor.w	r3, r4, #32
 8007270:	b29c      	uxth	r4, r3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	441a      	add	r2, r3
 800727c:	4b7d      	ldr	r3, [pc, #500]	; (8007474 <USB_EPStartXfer+0x4dc>)
 800727e:	4323      	orrs	r3, r4
 8007280:	b29b      	uxth	r3, r3
 8007282:	8013      	strh	r3, [r2, #0]
 8007284:	e153      	b.n	800752e <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	429a      	cmp	r2, r3
 8007290:	d909      	bls.n	80072a6 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	619a      	str	r2, [r3, #24]
 80072a4:	e005      	b.n	80072b2 <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	7b1b      	ldrb	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d14c      	bne.n	8007354 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072ba:	687c      	ldr	r4, [r7, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	441c      	add	r4, r3
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4423      	add	r3, r4
 80072ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d110      	bne.n	80072fc <USB_EPStartXfer+0x364>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e0fd      	b.n	80074f8 <USB_EPStartXfer+0x560>
 80072fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007300:	d811      	bhi.n	8007326 <USB_EPStartXfer+0x38e>
 8007302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <USB_EPStartXfer+0x380>
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007314:	3301      	adds	r3, #1
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29a      	uxth	r2, r3
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e0e8      	b.n	80074f8 <USB_EPStartXfer+0x560>
 8007326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2b00      	cmp	r3, #0
 8007334:	d102      	bne.n	800733c <USB_EPStartXfer+0x3a4>
 8007336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007338:	3b01      	subs	r3, #1
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800733c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29b      	uxth	r3, r3
 8007344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734c:	b29a      	uxth	r2, r3
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e0d1      	b.n	80074f8 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d14c      	bne.n	80073f6 <USB_EPStartXfer+0x45e>
 800735c:	687c      	ldr	r4, [r7, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007364:	b29b      	uxth	r3, r3
 8007366:	441c      	add	r4, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4423      	add	r3, r4
 8007370:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <USB_EPStartXfer+0x406>
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007384:	b29a      	uxth	r2, r3
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007396:	b29a      	uxth	r2, r3
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e040      	b.n	8007420 <USB_EPStartXfer+0x488>
 800739e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a0:	2b3e      	cmp	r3, #62	; 0x3e
 80073a2:	d811      	bhi.n	80073c8 <USB_EPStartXfer+0x430>
 80073a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <USB_EPStartXfer+0x422>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	3301      	adds	r3, #1
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	b29b      	uxth	r3, r3
 80073be:	029b      	lsls	r3, r3, #10
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e02b      	b.n	8007420 <USB_EPStartXfer+0x488>
 80073c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <USB_EPStartXfer+0x446>
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	3b01      	subs	r3, #1
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	e014      	b.n	8007420 <USB_EPStartXfer+0x488>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d110      	bne.n	8007420 <USB_EPStartXfer+0x488>
 80073fe:	687c      	ldr	r4, [r7, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	441c      	add	r4, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	4423      	add	r3, r4
 8007412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
 8007418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741a:	b29a      	uxth	r2, r3
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	687c      	ldr	r4, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d152      	bne.n	80074d0 <USB_EPStartXfer+0x538>
 800742a:	687c      	ldr	r4, [r7, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007432:	b29b      	uxth	r3, r3
 8007434:	441c      	add	r4, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	4423      	add	r3, r4
 800743e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	2b00      	cmp	r3, #0
 8007448:	d116      	bne.n	8007478 <USB_EPStartXfer+0x4e0>
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007452:	b29a      	uxth	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e045      	b.n	80074f8 <USB_EPStartXfer+0x560>
 800746c:	ffff80c0 	.word	0xffff80c0
 8007470:	ffffc080 	.word	0xffffc080
 8007474:	ffff8080 	.word	0xffff8080
 8007478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747a:	2b3e      	cmp	r3, #62	; 0x3e
 800747c:	d811      	bhi.n	80074a2 <USB_EPStartXfer+0x50a>
 800747e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
 8007484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <USB_EPStartXfer+0x4fc>
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	3301      	adds	r3, #1
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	b29b      	uxth	r3, r3
 8007498:	029b      	lsls	r3, r3, #10
 800749a:	b29a      	uxth	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	e02a      	b.n	80074f8 <USB_EPStartXfer+0x560>
 80074a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <USB_EPStartXfer+0x520>
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	3b01      	subs	r3, #1
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	029b      	lsls	r3, r3, #10
 80074be:	b29b      	uxth	r3, r3
 80074c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e013      	b.n	80074f8 <USB_EPStartXfer+0x560>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d10f      	bne.n	80074f8 <USB_EPStartXfer+0x560>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	441c      	add	r4, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4423      	add	r3, r4
 80074ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	b29b      	uxth	r3, r3
 8007506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	b29c      	uxth	r4, r3
 8007510:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007514:	b29c      	uxth	r4, r3
 8007516:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800751a:	b29c      	uxth	r4, r3
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	4b04      	ldr	r3, [pc, #16]	; (8007538 <USB_EPStartXfer+0x5a0>)
 8007528:	4323      	orrs	r3, r4
 800752a:	b29b      	uxth	r3, r3
 800752c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3754      	adds	r7, #84	; 0x54
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}
 8007538:	ffff8080 	.word	0xffff8080

0800753c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2280      	movs	r2, #128	; 0x80
 8007552:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007572:	b29b      	uxth	r3, r3
 8007574:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007584:	b480      	push	{r7}
 8007586:	b08d      	sub	sp, #52	; 0x34
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4611      	mov	r1, r2
 8007590:	461a      	mov	r2, r3
 8007592:	460b      	mov	r3, r1
 8007594:	80fb      	strh	r3, [r7, #6]
 8007596:	4613      	mov	r3, r2
 8007598:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800759a:	88bb      	ldrh	r3, [r7, #4]
 800759c:	3301      	adds	r3, #1
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ba:	e01b      	b.n	80075f4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	3301      	adds	r3, #1
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	3302      	adds	r3, #2
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	3301      	adds	r3, #1
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	3b01      	subs	r3, #1
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e0      	bne.n	80075bc <USB_WritePMA+0x38>
  }
}
 80075fa:	bf00      	nop
 80075fc:	3734      	adds	r7, #52	; 0x34
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007606:	b480      	push	{r7}
 8007608:	b08b      	sub	sp, #44	; 0x2c
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	4611      	mov	r1, r2
 8007612:	461a      	mov	r2, r3
 8007614:	460b      	mov	r3, r1
 8007616:	80fb      	strh	r3, [r7, #6]
 8007618:	4613      	mov	r3, r2
 800761a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800761c:	88bb      	ldrh	r3, [r7, #4]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007636:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
 800763c:	e018      	b.n	8007670 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	3302      	adds	r3, #2
 800764a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	b2da      	uxtb	r2, r3
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	3301      	adds	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	b2da      	uxtb	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	3301      	adds	r3, #1
 8007668:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	3b01      	subs	r3, #1
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e3      	bne.n	800763e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007676:	88bb      	ldrh	r3, [r7, #4]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	b2da      	uxtb	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	701a      	strb	r2, [r3, #0]
  }
}
 8007692:	bf00      	nop
 8007694:	372c      	adds	r7, #44	; 0x2c
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <atoi>:
 800769e:	220a      	movs	r2, #10
 80076a0:	2100      	movs	r1, #0
 80076a2:	f000 b8d3 	b.w	800784c <strtol>
	...

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4e0d      	ldr	r6, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1ba4      	subs	r4, r4, r6
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2500      	movs	r5, #0
 80076c0:	42a5      	cmp	r5, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4e0b      	ldr	r6, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 ffc6 	bl	8008658 <_init>
 80076cc:	1ba4      	subs	r4, r4, r6
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2500      	movs	r5, #0
 80076d2:	42a5      	cmp	r5, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076dc:	4798      	blx	r3
 80076de:	3501      	adds	r5, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076e6:	4798      	blx	r3
 80076e8:	3501      	adds	r5, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	08008ccc 	.word	0x08008ccc
 80076f0:	08008ccc 	.word	0x08008ccc
 80076f4:	08008ccc 	.word	0x08008ccc
 80076f8:	08008cd0 	.word	0x08008cd0

080076fc <memcpy>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	1e43      	subs	r3, r0, #1
 8007700:	440a      	add	r2, r1
 8007702:	4291      	cmp	r1, r2
 8007704:	d100      	bne.n	8007708 <memcpy+0xc>
 8007706:	bd10      	pop	{r4, pc}
 8007708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800770c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007710:	e7f7      	b.n	8007702 <memcpy+0x6>

08007712 <memset>:
 8007712:	4402      	add	r2, r0
 8007714:	4603      	mov	r3, r0
 8007716:	4293      	cmp	r3, r2
 8007718:	d100      	bne.n	800771c <memset+0xa>
 800771a:	4770      	bx	lr
 800771c:	f803 1b01 	strb.w	r1, [r3], #1
 8007720:	e7f9      	b.n	8007716 <memset+0x4>
	...

08007724 <iprintf>:
 8007724:	b40f      	push	{r0, r1, r2, r3}
 8007726:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <iprintf+0x2c>)
 8007728:	b513      	push	{r0, r1, r4, lr}
 800772a:	681c      	ldr	r4, [r3, #0]
 800772c:	b124      	cbz	r4, 8007738 <iprintf+0x14>
 800772e:	69a3      	ldr	r3, [r4, #24]
 8007730:	b913      	cbnz	r3, 8007738 <iprintf+0x14>
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f8e0 	bl	80078f8 <__sinit>
 8007738:	ab05      	add	r3, sp, #20
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	68a1      	ldr	r1, [r4, #8]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	4620      	mov	r0, r4
 8007742:	f000 f9fd 	bl	8007b40 <_vfiprintf_r>
 8007746:	b002      	add	sp, #8
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	b004      	add	sp, #16
 800774e:	4770      	bx	lr
 8007750:	2000000c 	.word	0x2000000c

08007754 <_strtol_l.isra.0>:
 8007754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	4680      	mov	r8, r0
 800775a:	4689      	mov	r9, r1
 800775c:	4692      	mov	sl, r2
 800775e:	461e      	mov	r6, r3
 8007760:	460f      	mov	r7, r1
 8007762:	463d      	mov	r5, r7
 8007764:	9808      	ldr	r0, [sp, #32]
 8007766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800776a:	f000 f94f 	bl	8007a0c <__locale_ctype_ptr_l>
 800776e:	4420      	add	r0, r4
 8007770:	7843      	ldrb	r3, [r0, #1]
 8007772:	f013 0308 	ands.w	r3, r3, #8
 8007776:	d132      	bne.n	80077de <_strtol_l.isra.0+0x8a>
 8007778:	2c2d      	cmp	r4, #45	; 0x2d
 800777a:	d132      	bne.n	80077e2 <_strtol_l.isra.0+0x8e>
 800777c:	787c      	ldrb	r4, [r7, #1]
 800777e:	1cbd      	adds	r5, r7, #2
 8007780:	2201      	movs	r2, #1
 8007782:	2e00      	cmp	r6, #0
 8007784:	d05d      	beq.n	8007842 <_strtol_l.isra.0+0xee>
 8007786:	2e10      	cmp	r6, #16
 8007788:	d109      	bne.n	800779e <_strtol_l.isra.0+0x4a>
 800778a:	2c30      	cmp	r4, #48	; 0x30
 800778c:	d107      	bne.n	800779e <_strtol_l.isra.0+0x4a>
 800778e:	782b      	ldrb	r3, [r5, #0]
 8007790:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007794:	2b58      	cmp	r3, #88	; 0x58
 8007796:	d14f      	bne.n	8007838 <_strtol_l.isra.0+0xe4>
 8007798:	786c      	ldrb	r4, [r5, #1]
 800779a:	2610      	movs	r6, #16
 800779c:	3502      	adds	r5, #2
 800779e:	2a00      	cmp	r2, #0
 80077a0:	bf14      	ite	ne
 80077a2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80077a6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80077aa:	2700      	movs	r7, #0
 80077ac:	fbb1 fcf6 	udiv	ip, r1, r6
 80077b0:	4638      	mov	r0, r7
 80077b2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80077b6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	d817      	bhi.n	80077ee <_strtol_l.isra.0+0x9a>
 80077be:	461c      	mov	r4, r3
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	dd23      	ble.n	800780c <_strtol_l.isra.0+0xb8>
 80077c4:	1c7b      	adds	r3, r7, #1
 80077c6:	d007      	beq.n	80077d8 <_strtol_l.isra.0+0x84>
 80077c8:	4584      	cmp	ip, r0
 80077ca:	d31c      	bcc.n	8007806 <_strtol_l.isra.0+0xb2>
 80077cc:	d101      	bne.n	80077d2 <_strtol_l.isra.0+0x7e>
 80077ce:	45a6      	cmp	lr, r4
 80077d0:	db19      	blt.n	8007806 <_strtol_l.isra.0+0xb2>
 80077d2:	fb00 4006 	mla	r0, r0, r6, r4
 80077d6:	2701      	movs	r7, #1
 80077d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077dc:	e7eb      	b.n	80077b6 <_strtol_l.isra.0+0x62>
 80077de:	462f      	mov	r7, r5
 80077e0:	e7bf      	b.n	8007762 <_strtol_l.isra.0+0xe>
 80077e2:	2c2b      	cmp	r4, #43	; 0x2b
 80077e4:	bf04      	itt	eq
 80077e6:	1cbd      	addeq	r5, r7, #2
 80077e8:	787c      	ldrbeq	r4, [r7, #1]
 80077ea:	461a      	mov	r2, r3
 80077ec:	e7c9      	b.n	8007782 <_strtol_l.isra.0+0x2e>
 80077ee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80077f2:	2b19      	cmp	r3, #25
 80077f4:	d801      	bhi.n	80077fa <_strtol_l.isra.0+0xa6>
 80077f6:	3c37      	subs	r4, #55	; 0x37
 80077f8:	e7e2      	b.n	80077c0 <_strtol_l.isra.0+0x6c>
 80077fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80077fe:	2b19      	cmp	r3, #25
 8007800:	d804      	bhi.n	800780c <_strtol_l.isra.0+0xb8>
 8007802:	3c57      	subs	r4, #87	; 0x57
 8007804:	e7dc      	b.n	80077c0 <_strtol_l.isra.0+0x6c>
 8007806:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800780a:	e7e5      	b.n	80077d8 <_strtol_l.isra.0+0x84>
 800780c:	1c7b      	adds	r3, r7, #1
 800780e:	d108      	bne.n	8007822 <_strtol_l.isra.0+0xce>
 8007810:	2322      	movs	r3, #34	; 0x22
 8007812:	f8c8 3000 	str.w	r3, [r8]
 8007816:	4608      	mov	r0, r1
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	d107      	bne.n	800782e <_strtol_l.isra.0+0xda>
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	b102      	cbz	r2, 8007826 <_strtol_l.isra.0+0xd2>
 8007824:	4240      	negs	r0, r0
 8007826:	f1ba 0f00 	cmp.w	sl, #0
 800782a:	d0f8      	beq.n	800781e <_strtol_l.isra.0+0xca>
 800782c:	b10f      	cbz	r7, 8007832 <_strtol_l.isra.0+0xde>
 800782e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007832:	f8ca 9000 	str.w	r9, [sl]
 8007836:	e7f2      	b.n	800781e <_strtol_l.isra.0+0xca>
 8007838:	2430      	movs	r4, #48	; 0x30
 800783a:	2e00      	cmp	r6, #0
 800783c:	d1af      	bne.n	800779e <_strtol_l.isra.0+0x4a>
 800783e:	2608      	movs	r6, #8
 8007840:	e7ad      	b.n	800779e <_strtol_l.isra.0+0x4a>
 8007842:	2c30      	cmp	r4, #48	; 0x30
 8007844:	d0a3      	beq.n	800778e <_strtol_l.isra.0+0x3a>
 8007846:	260a      	movs	r6, #10
 8007848:	e7a9      	b.n	800779e <_strtol_l.isra.0+0x4a>
	...

0800784c <strtol>:
 800784c:	4b08      	ldr	r3, [pc, #32]	; (8007870 <strtol+0x24>)
 800784e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007850:	681c      	ldr	r4, [r3, #0]
 8007852:	4d08      	ldr	r5, [pc, #32]	; (8007874 <strtol+0x28>)
 8007854:	6a23      	ldr	r3, [r4, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf08      	it	eq
 800785a:	462b      	moveq	r3, r5
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	4613      	mov	r3, r2
 8007860:	460a      	mov	r2, r1
 8007862:	4601      	mov	r1, r0
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff ff75 	bl	8007754 <_strtol_l.isra.0>
 800786a:	b003      	add	sp, #12
 800786c:	bd30      	pop	{r4, r5, pc}
 800786e:	bf00      	nop
 8007870:	2000000c 	.word	0x2000000c
 8007874:	20000070 	.word	0x20000070

08007878 <std>:
 8007878:	2300      	movs	r3, #0
 800787a:	b510      	push	{r4, lr}
 800787c:	4604      	mov	r4, r0
 800787e:	e9c0 3300 	strd	r3, r3, [r0]
 8007882:	6083      	str	r3, [r0, #8]
 8007884:	8181      	strh	r1, [r0, #12]
 8007886:	6643      	str	r3, [r0, #100]	; 0x64
 8007888:	81c2      	strh	r2, [r0, #14]
 800788a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800788e:	6183      	str	r3, [r0, #24]
 8007890:	4619      	mov	r1, r3
 8007892:	2208      	movs	r2, #8
 8007894:	305c      	adds	r0, #92	; 0x5c
 8007896:	f7ff ff3c 	bl	8007712 <memset>
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <std+0x38>)
 800789c:	6263      	str	r3, [r4, #36]	; 0x24
 800789e:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <std+0x3c>)
 80078a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <std+0x40>)
 80078a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <std+0x44>)
 80078a8:	6224      	str	r4, [r4, #32]
 80078aa:	6323      	str	r3, [r4, #48]	; 0x30
 80078ac:	bd10      	pop	{r4, pc}
 80078ae:	bf00      	nop
 80078b0:	0800809d 	.word	0x0800809d
 80078b4:	080080bf 	.word	0x080080bf
 80078b8:	080080f7 	.word	0x080080f7
 80078bc:	0800811b 	.word	0x0800811b

080078c0 <_cleanup_r>:
 80078c0:	4901      	ldr	r1, [pc, #4]	; (80078c8 <_cleanup_r+0x8>)
 80078c2:	f000 b885 	b.w	80079d0 <_fwalk_reent>
 80078c6:	bf00      	nop
 80078c8:	08008411 	.word	0x08008411

080078cc <__sfmoreglue>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	1e4a      	subs	r2, r1, #1
 80078d0:	2568      	movs	r5, #104	; 0x68
 80078d2:	4355      	muls	r5, r2
 80078d4:	460e      	mov	r6, r1
 80078d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078da:	f000 f8ad 	bl	8007a38 <_malloc_r>
 80078de:	4604      	mov	r4, r0
 80078e0:	b140      	cbz	r0, 80078f4 <__sfmoreglue+0x28>
 80078e2:	2100      	movs	r1, #0
 80078e4:	e9c0 1600 	strd	r1, r6, [r0]
 80078e8:	300c      	adds	r0, #12
 80078ea:	60a0      	str	r0, [r4, #8]
 80078ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078f0:	f7ff ff0f 	bl	8007712 <memset>
 80078f4:	4620      	mov	r0, r4
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__sinit>:
 80078f8:	6983      	ldr	r3, [r0, #24]
 80078fa:	b510      	push	{r4, lr}
 80078fc:	4604      	mov	r4, r0
 80078fe:	bb33      	cbnz	r3, 800794e <__sinit+0x56>
 8007900:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007904:	6503      	str	r3, [r0, #80]	; 0x50
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <__sinit+0x58>)
 8007908:	4a12      	ldr	r2, [pc, #72]	; (8007954 <__sinit+0x5c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6282      	str	r2, [r0, #40]	; 0x28
 800790e:	4298      	cmp	r0, r3
 8007910:	bf04      	itt	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	6183      	streq	r3, [r0, #24]
 8007916:	f000 f81f 	bl	8007958 <__sfp>
 800791a:	6060      	str	r0, [r4, #4]
 800791c:	4620      	mov	r0, r4
 800791e:	f000 f81b 	bl	8007958 <__sfp>
 8007922:	60a0      	str	r0, [r4, #8]
 8007924:	4620      	mov	r0, r4
 8007926:	f000 f817 	bl	8007958 <__sfp>
 800792a:	2200      	movs	r2, #0
 800792c:	60e0      	str	r0, [r4, #12]
 800792e:	2104      	movs	r1, #4
 8007930:	6860      	ldr	r0, [r4, #4]
 8007932:	f7ff ffa1 	bl	8007878 <std>
 8007936:	2201      	movs	r2, #1
 8007938:	2109      	movs	r1, #9
 800793a:	68a0      	ldr	r0, [r4, #8]
 800793c:	f7ff ff9c 	bl	8007878 <std>
 8007940:	2202      	movs	r2, #2
 8007942:	2112      	movs	r1, #18
 8007944:	68e0      	ldr	r0, [r4, #12]
 8007946:	f7ff ff97 	bl	8007878 <std>
 800794a:	2301      	movs	r3, #1
 800794c:	61a3      	str	r3, [r4, #24]
 800794e:	bd10      	pop	{r4, pc}
 8007950:	08008b28 	.word	0x08008b28
 8007954:	080078c1 	.word	0x080078c1

08007958 <__sfp>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <__sfp+0x70>)
 800795c:	681e      	ldr	r6, [r3, #0]
 800795e:	69b3      	ldr	r3, [r6, #24]
 8007960:	4607      	mov	r7, r0
 8007962:	b913      	cbnz	r3, 800796a <__sfp+0x12>
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffc7 	bl	80078f8 <__sinit>
 800796a:	3648      	adds	r6, #72	; 0x48
 800796c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007970:	3b01      	subs	r3, #1
 8007972:	d503      	bpl.n	800797c <__sfp+0x24>
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	b133      	cbz	r3, 8007986 <__sfp+0x2e>
 8007978:	6836      	ldr	r6, [r6, #0]
 800797a:	e7f7      	b.n	800796c <__sfp+0x14>
 800797c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007980:	b16d      	cbz	r5, 800799e <__sfp+0x46>
 8007982:	3468      	adds	r4, #104	; 0x68
 8007984:	e7f4      	b.n	8007970 <__sfp+0x18>
 8007986:	2104      	movs	r1, #4
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ff9f 	bl	80078cc <__sfmoreglue>
 800798e:	6030      	str	r0, [r6, #0]
 8007990:	2800      	cmp	r0, #0
 8007992:	d1f1      	bne.n	8007978 <__sfp+0x20>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4604      	mov	r4, r0
 800799a:	4620      	mov	r0, r4
 800799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <__sfp+0x74>)
 80079a0:	6665      	str	r5, [r4, #100]	; 0x64
 80079a2:	e9c4 5500 	strd	r5, r5, [r4]
 80079a6:	60a5      	str	r5, [r4, #8]
 80079a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80079ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80079b0:	2208      	movs	r2, #8
 80079b2:	4629      	mov	r1, r5
 80079b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b8:	f7ff feab 	bl	8007712 <memset>
 80079bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079c4:	e7e9      	b.n	800799a <__sfp+0x42>
 80079c6:	bf00      	nop
 80079c8:	08008b28 	.word	0x08008b28
 80079cc:	ffff0001 	.word	0xffff0001

080079d0 <_fwalk_reent>:
 80079d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d4:	4680      	mov	r8, r0
 80079d6:	4689      	mov	r9, r1
 80079d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079dc:	2600      	movs	r6, #0
 80079de:	b914      	cbnz	r4, 80079e6 <_fwalk_reent+0x16>
 80079e0:	4630      	mov	r0, r6
 80079e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80079ea:	3f01      	subs	r7, #1
 80079ec:	d501      	bpl.n	80079f2 <_fwalk_reent+0x22>
 80079ee:	6824      	ldr	r4, [r4, #0]
 80079f0:	e7f5      	b.n	80079de <_fwalk_reent+0xe>
 80079f2:	89ab      	ldrh	r3, [r5, #12]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d907      	bls.n	8007a08 <_fwalk_reent+0x38>
 80079f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079fc:	3301      	adds	r3, #1
 80079fe:	d003      	beq.n	8007a08 <_fwalk_reent+0x38>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4640      	mov	r0, r8
 8007a04:	47c8      	blx	r9
 8007a06:	4306      	orrs	r6, r0
 8007a08:	3568      	adds	r5, #104	; 0x68
 8007a0a:	e7ee      	b.n	80079ea <_fwalk_reent+0x1a>

08007a0c <__locale_ctype_ptr_l>:
 8007a0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007a10:	4770      	bx	lr

08007a12 <__ascii_mbtowc>:
 8007a12:	b082      	sub	sp, #8
 8007a14:	b901      	cbnz	r1, 8007a18 <__ascii_mbtowc+0x6>
 8007a16:	a901      	add	r1, sp, #4
 8007a18:	b142      	cbz	r2, 8007a2c <__ascii_mbtowc+0x1a>
 8007a1a:	b14b      	cbz	r3, 8007a30 <__ascii_mbtowc+0x1e>
 8007a1c:	7813      	ldrb	r3, [r2, #0]
 8007a1e:	600b      	str	r3, [r1, #0]
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	1c10      	adds	r0, r2, #0
 8007a24:	bf18      	it	ne
 8007a26:	2001      	movne	r0, #1
 8007a28:	b002      	add	sp, #8
 8007a2a:	4770      	bx	lr
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	e7fb      	b.n	8007a28 <__ascii_mbtowc+0x16>
 8007a30:	f06f 0001 	mvn.w	r0, #1
 8007a34:	e7f8      	b.n	8007a28 <__ascii_mbtowc+0x16>
	...

08007a38 <_malloc_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	1ccd      	adds	r5, r1, #3
 8007a3c:	f025 0503 	bic.w	r5, r5, #3
 8007a40:	3508      	adds	r5, #8
 8007a42:	2d0c      	cmp	r5, #12
 8007a44:	bf38      	it	cc
 8007a46:	250c      	movcc	r5, #12
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	db01      	blt.n	8007a52 <_malloc_r+0x1a>
 8007a4e:	42a9      	cmp	r1, r5
 8007a50:	d903      	bls.n	8007a5a <_malloc_r+0x22>
 8007a52:	230c      	movs	r3, #12
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	2000      	movs	r0, #0
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
 8007a5a:	f000 fd79 	bl	8008550 <__malloc_lock>
 8007a5e:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <_malloc_r+0xac>)
 8007a60:	6814      	ldr	r4, [r2, #0]
 8007a62:	4621      	mov	r1, r4
 8007a64:	b991      	cbnz	r1, 8007a8c <_malloc_r+0x54>
 8007a66:	4c20      	ldr	r4, [pc, #128]	; (8007ae8 <_malloc_r+0xb0>)
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	b91b      	cbnz	r3, 8007a74 <_malloc_r+0x3c>
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 fb05 	bl	800807c <_sbrk_r>
 8007a72:	6020      	str	r0, [r4, #0]
 8007a74:	4629      	mov	r1, r5
 8007a76:	4630      	mov	r0, r6
 8007a78:	f000 fb00 	bl	800807c <_sbrk_r>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d124      	bne.n	8007aca <_malloc_r+0x92>
 8007a80:	230c      	movs	r3, #12
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	4630      	mov	r0, r6
 8007a86:	f000 fd64 	bl	8008552 <__malloc_unlock>
 8007a8a:	e7e4      	b.n	8007a56 <_malloc_r+0x1e>
 8007a8c:	680b      	ldr	r3, [r1, #0]
 8007a8e:	1b5b      	subs	r3, r3, r5
 8007a90:	d418      	bmi.n	8007ac4 <_malloc_r+0x8c>
 8007a92:	2b0b      	cmp	r3, #11
 8007a94:	d90f      	bls.n	8007ab6 <_malloc_r+0x7e>
 8007a96:	600b      	str	r3, [r1, #0]
 8007a98:	50cd      	str	r5, [r1, r3]
 8007a9a:	18cc      	adds	r4, r1, r3
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fd58 	bl	8008552 <__malloc_unlock>
 8007aa2:	f104 000b 	add.w	r0, r4, #11
 8007aa6:	1d23      	adds	r3, r4, #4
 8007aa8:	f020 0007 	bic.w	r0, r0, #7
 8007aac:	1ac3      	subs	r3, r0, r3
 8007aae:	d0d3      	beq.n	8007a58 <_malloc_r+0x20>
 8007ab0:	425a      	negs	r2, r3
 8007ab2:	50e2      	str	r2, [r4, r3]
 8007ab4:	e7d0      	b.n	8007a58 <_malloc_r+0x20>
 8007ab6:	428c      	cmp	r4, r1
 8007ab8:	684b      	ldr	r3, [r1, #4]
 8007aba:	bf16      	itet	ne
 8007abc:	6063      	strne	r3, [r4, #4]
 8007abe:	6013      	streq	r3, [r2, #0]
 8007ac0:	460c      	movne	r4, r1
 8007ac2:	e7eb      	b.n	8007a9c <_malloc_r+0x64>
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	6849      	ldr	r1, [r1, #4]
 8007ac8:	e7cc      	b.n	8007a64 <_malloc_r+0x2c>
 8007aca:	1cc4      	adds	r4, r0, #3
 8007acc:	f024 0403 	bic.w	r4, r4, #3
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	d005      	beq.n	8007ae0 <_malloc_r+0xa8>
 8007ad4:	1a21      	subs	r1, r4, r0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f000 fad0 	bl	800807c <_sbrk_r>
 8007adc:	3001      	adds	r0, #1
 8007ade:	d0cf      	beq.n	8007a80 <_malloc_r+0x48>
 8007ae0:	6025      	str	r5, [r4, #0]
 8007ae2:	e7db      	b.n	8007a9c <_malloc_r+0x64>
 8007ae4:	20000db8 	.word	0x20000db8
 8007ae8:	20000dbc 	.word	0x20000dbc

08007aec <__sfputc_r>:
 8007aec:	6893      	ldr	r3, [r2, #8]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	b410      	push	{r4}
 8007af4:	6093      	str	r3, [r2, #8]
 8007af6:	da08      	bge.n	8007b0a <__sfputc_r+0x1e>
 8007af8:	6994      	ldr	r4, [r2, #24]
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	db01      	blt.n	8007b02 <__sfputc_r+0x16>
 8007afe:	290a      	cmp	r1, #10
 8007b00:	d103      	bne.n	8007b0a <__sfputc_r+0x1e>
 8007b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b06:	f000 bb0d 	b.w	8008124 <__swbuf_r>
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	1c58      	adds	r0, r3, #1
 8007b0e:	6010      	str	r0, [r2, #0]
 8007b10:	7019      	strb	r1, [r3, #0]
 8007b12:	4608      	mov	r0, r1
 8007b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <__sfputs_r>:
 8007b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	18d5      	adds	r5, r2, r3
 8007b24:	42ac      	cmp	r4, r5
 8007b26:	d101      	bne.n	8007b2c <__sfputs_r+0x12>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e007      	b.n	8007b3c <__sfputs_r+0x22>
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff ffda 	bl	8007aec <__sfputc_r>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d1f3      	bne.n	8007b24 <__sfputs_r+0xa>
 8007b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b40 <_vfiprintf_r>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	460c      	mov	r4, r1
 8007b46:	b09d      	sub	sp, #116	; 0x74
 8007b48:	4617      	mov	r7, r2
 8007b4a:	461d      	mov	r5, r3
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	b118      	cbz	r0, 8007b58 <_vfiprintf_r+0x18>
 8007b50:	6983      	ldr	r3, [r0, #24]
 8007b52:	b90b      	cbnz	r3, 8007b58 <_vfiprintf_r+0x18>
 8007b54:	f7ff fed0 	bl	80078f8 <__sinit>
 8007b58:	4b7c      	ldr	r3, [pc, #496]	; (8007d4c <_vfiprintf_r+0x20c>)
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	d158      	bne.n	8007c10 <_vfiprintf_r+0xd0>
 8007b5e:	6874      	ldr	r4, [r6, #4]
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	0718      	lsls	r0, r3, #28
 8007b64:	d55e      	bpl.n	8007c24 <_vfiprintf_r+0xe4>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d05b      	beq.n	8007c24 <_vfiprintf_r+0xe4>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b70:	2320      	movs	r3, #32
 8007b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b76:	2330      	movs	r3, #48	; 0x30
 8007b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b7c:	9503      	str	r5, [sp, #12]
 8007b7e:	f04f 0b01 	mov.w	fp, #1
 8007b82:	46b8      	mov	r8, r7
 8007b84:	4645      	mov	r5, r8
 8007b86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b8a:	b10b      	cbz	r3, 8007b90 <_vfiprintf_r+0x50>
 8007b8c:	2b25      	cmp	r3, #37	; 0x25
 8007b8e:	d154      	bne.n	8007c3a <_vfiprintf_r+0xfa>
 8007b90:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b94:	d00b      	beq.n	8007bae <_vfiprintf_r+0x6e>
 8007b96:	4653      	mov	r3, sl
 8007b98:	463a      	mov	r2, r7
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff ffbc 	bl	8007b1a <__sfputs_r>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f000 80c2 	beq.w	8007d2c <_vfiprintf_r+0x1ec>
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	4453      	add	r3, sl
 8007bac:	9309      	str	r3, [sp, #36]	; 0x24
 8007bae:	f898 3000 	ldrb.w	r3, [r8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80ba 	beq.w	8007d2c <_vfiprintf_r+0x1ec>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bca:	931a      	str	r3, [sp, #104]	; 0x68
 8007bcc:	46a8      	mov	r8, r5
 8007bce:	2205      	movs	r2, #5
 8007bd0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007bd4:	485e      	ldr	r0, [pc, #376]	; (8007d50 <_vfiprintf_r+0x210>)
 8007bd6:	f7f8 fb03 	bl	80001e0 <memchr>
 8007bda:	9b04      	ldr	r3, [sp, #16]
 8007bdc:	bb78      	cbnz	r0, 8007c3e <_vfiprintf_r+0xfe>
 8007bde:	06d9      	lsls	r1, r3, #27
 8007be0:	bf44      	itt	mi
 8007be2:	2220      	movmi	r2, #32
 8007be4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007be8:	071a      	lsls	r2, r3, #28
 8007bea:	bf44      	itt	mi
 8007bec:	222b      	movmi	r2, #43	; 0x2b
 8007bee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bf2:	782a      	ldrb	r2, [r5, #0]
 8007bf4:	2a2a      	cmp	r2, #42	; 0x2a
 8007bf6:	d02a      	beq.n	8007c4e <_vfiprintf_r+0x10e>
 8007bf8:	9a07      	ldr	r2, [sp, #28]
 8007bfa:	46a8      	mov	r8, r5
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	250a      	movs	r5, #10
 8007c00:	4641      	mov	r1, r8
 8007c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c06:	3b30      	subs	r3, #48	; 0x30
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d969      	bls.n	8007ce0 <_vfiprintf_r+0x1a0>
 8007c0c:	b360      	cbz	r0, 8007c68 <_vfiprintf_r+0x128>
 8007c0e:	e024      	b.n	8007c5a <_vfiprintf_r+0x11a>
 8007c10:	4b50      	ldr	r3, [pc, #320]	; (8007d54 <_vfiprintf_r+0x214>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <_vfiprintf_r+0xda>
 8007c16:	68b4      	ldr	r4, [r6, #8]
 8007c18:	e7a2      	b.n	8007b60 <_vfiprintf_r+0x20>
 8007c1a:	4b4f      	ldr	r3, [pc, #316]	; (8007d58 <_vfiprintf_r+0x218>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68f4      	ldreq	r4, [r6, #12]
 8007c22:	e79d      	b.n	8007b60 <_vfiprintf_r+0x20>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 faee 	bl	8008208 <__swsetup_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d09d      	beq.n	8007b6c <_vfiprintf_r+0x2c>
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c34:	b01d      	add	sp, #116	; 0x74
 8007c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3a:	46a8      	mov	r8, r5
 8007c3c:	e7a2      	b.n	8007b84 <_vfiprintf_r+0x44>
 8007c3e:	4a44      	ldr	r2, [pc, #272]	; (8007d50 <_vfiprintf_r+0x210>)
 8007c40:	1a80      	subs	r0, r0, r2
 8007c42:	fa0b f000 	lsl.w	r0, fp, r0
 8007c46:	4318      	orrs	r0, r3
 8007c48:	9004      	str	r0, [sp, #16]
 8007c4a:	4645      	mov	r5, r8
 8007c4c:	e7be      	b.n	8007bcc <_vfiprintf_r+0x8c>
 8007c4e:	9a03      	ldr	r2, [sp, #12]
 8007c50:	1d11      	adds	r1, r2, #4
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	9103      	str	r1, [sp, #12]
 8007c56:	2a00      	cmp	r2, #0
 8007c58:	db01      	blt.n	8007c5e <_vfiprintf_r+0x11e>
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	e004      	b.n	8007c68 <_vfiprintf_r+0x128>
 8007c5e:	4252      	negs	r2, r2
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	9207      	str	r2, [sp, #28]
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	f898 3000 	ldrb.w	r3, [r8]
 8007c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6e:	d10e      	bne.n	8007c8e <_vfiprintf_r+0x14e>
 8007c70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c74:	2b2a      	cmp	r3, #42	; 0x2a
 8007c76:	d138      	bne.n	8007cea <_vfiprintf_r+0x1aa>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	9203      	str	r2, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfb8      	it	lt
 8007c84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c88:	f108 0802 	add.w	r8, r8, #2
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	4d33      	ldr	r5, [pc, #204]	; (8007d5c <_vfiprintf_r+0x21c>)
 8007c90:	f898 1000 	ldrb.w	r1, [r8]
 8007c94:	2203      	movs	r2, #3
 8007c96:	4628      	mov	r0, r5
 8007c98:	f7f8 faa2 	bl	80001e0 <memchr>
 8007c9c:	b140      	cbz	r0, 8007cb0 <_vfiprintf_r+0x170>
 8007c9e:	2340      	movs	r3, #64	; 0x40
 8007ca0:	1b40      	subs	r0, r0, r5
 8007ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	4303      	orrs	r3, r0
 8007caa:	f108 0801 	add.w	r8, r8, #1
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	f898 1000 	ldrb.w	r1, [r8]
 8007cb4:	482a      	ldr	r0, [pc, #168]	; (8007d60 <_vfiprintf_r+0x220>)
 8007cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cba:	2206      	movs	r2, #6
 8007cbc:	f108 0701 	add.w	r7, r8, #1
 8007cc0:	f7f8 fa8e 	bl	80001e0 <memchr>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d037      	beq.n	8007d38 <_vfiprintf_r+0x1f8>
 8007cc8:	4b26      	ldr	r3, [pc, #152]	; (8007d64 <_vfiprintf_r+0x224>)
 8007cca:	bb1b      	cbnz	r3, 8007d14 <_vfiprintf_r+0x1d4>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cda:	444b      	add	r3, r9
 8007cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cde:	e750      	b.n	8007b82 <_vfiprintf_r+0x42>
 8007ce0:	fb05 3202 	mla	r2, r5, r2, r3
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	4688      	mov	r8, r1
 8007ce8:	e78a      	b.n	8007c00 <_vfiprintf_r+0xc0>
 8007cea:	2300      	movs	r3, #0
 8007cec:	f108 0801 	add.w	r8, r8, #1
 8007cf0:	9305      	str	r3, [sp, #20]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	250a      	movs	r5, #10
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cfc:	3a30      	subs	r2, #48	; 0x30
 8007cfe:	2a09      	cmp	r2, #9
 8007d00:	d903      	bls.n	8007d0a <_vfiprintf_r+0x1ca>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0c3      	beq.n	8007c8e <_vfiprintf_r+0x14e>
 8007d06:	9105      	str	r1, [sp, #20]
 8007d08:	e7c1      	b.n	8007c8e <_vfiprintf_r+0x14e>
 8007d0a:	fb05 2101 	mla	r1, r5, r1, r2
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4680      	mov	r8, r0
 8007d12:	e7f0      	b.n	8007cf6 <_vfiprintf_r+0x1b6>
 8007d14:	ab03      	add	r3, sp, #12
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <_vfiprintf_r+0x228>)
 8007d1c:	a904      	add	r1, sp, #16
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f3af 8000 	nop.w
 8007d24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007d28:	4681      	mov	r9, r0
 8007d2a:	d1d5      	bne.n	8007cd8 <_vfiprintf_r+0x198>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	065b      	lsls	r3, r3, #25
 8007d30:	f53f af7e 	bmi.w	8007c30 <_vfiprintf_r+0xf0>
 8007d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d36:	e77d      	b.n	8007c34 <_vfiprintf_r+0xf4>
 8007d38:	ab03      	add	r3, sp, #12
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <_vfiprintf_r+0x228>)
 8007d40:	a904      	add	r1, sp, #16
 8007d42:	4630      	mov	r0, r6
 8007d44:	f000 f888 	bl	8007e58 <_printf_i>
 8007d48:	e7ec      	b.n	8007d24 <_vfiprintf_r+0x1e4>
 8007d4a:	bf00      	nop
 8007d4c:	08008b4c 	.word	0x08008b4c
 8007d50:	08008b96 	.word	0x08008b96
 8007d54:	08008b6c 	.word	0x08008b6c
 8007d58:	08008b2c 	.word	0x08008b2c
 8007d5c:	08008b9c 	.word	0x08008b9c
 8007d60:	08008ba0 	.word	0x08008ba0
 8007d64:	00000000 	.word	0x00000000
 8007d68:	08007b1b 	.word	0x08007b1b

08007d6c <_printf_common>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	4691      	mov	r9, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	688a      	ldr	r2, [r1, #8]
 8007d76:	690b      	ldr	r3, [r1, #16]
 8007d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfb8      	it	lt
 8007d80:	4613      	movlt	r3, r2
 8007d82:	f8c9 3000 	str.w	r3, [r9]
 8007d86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	b112      	cbz	r2, 8007d96 <_printf_common+0x2a>
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c9 3000 	str.w	r3, [r9]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	0699      	lsls	r1, r3, #26
 8007d9a:	bf42      	ittt	mi
 8007d9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007da0:	3302      	addmi	r3, #2
 8007da2:	f8c9 3000 	strmi.w	r3, [r9]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d107      	bne.n	8007dbe <_printf_common+0x52>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	f8d9 2000 	ldr.w	r2, [r9]
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	dc28      	bgt.n	8007e10 <_printf_common+0xa4>
 8007dbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	3300      	adds	r3, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	0692      	lsls	r2, r2, #26
 8007dcc:	d42d      	bmi.n	8007e2a <_printf_common+0xbe>
 8007dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	47c0      	blx	r8
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d020      	beq.n	8007e1e <_printf_common+0xb2>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	68e5      	ldr	r5, [r4, #12]
 8007de0:	f8d9 2000 	ldr.w	r2, [r9]
 8007de4:	f003 0306 	and.w	r3, r3, #6
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	bf08      	it	eq
 8007dec:	1aad      	subeq	r5, r5, r2
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	6922      	ldr	r2, [r4, #16]
 8007df2:	bf0c      	ite	eq
 8007df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df8:	2500      	movne	r5, #0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bfc4      	itt	gt
 8007dfe:	1a9b      	subgt	r3, r3, r2
 8007e00:	18ed      	addgt	r5, r5, r3
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	341a      	adds	r4, #26
 8007e08:	454d      	cmp	r5, r9
 8007e0a:	d11a      	bne.n	8007e42 <_printf_common+0xd6>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e008      	b.n	8007e22 <_printf_common+0xb6>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4652      	mov	r2, sl
 8007e14:	4639      	mov	r1, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	47c0      	blx	r8
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d103      	bne.n	8007e26 <_printf_common+0xba>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	3501      	adds	r5, #1
 8007e28:	e7c3      	b.n	8007db2 <_printf_common+0x46>
 8007e2a:	18e1      	adds	r1, r4, r3
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	2030      	movs	r0, #48	; 0x30
 8007e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e34:	4422      	add	r2, r4
 8007e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e3e:	3302      	adds	r3, #2
 8007e40:	e7c5      	b.n	8007dce <_printf_common+0x62>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4622      	mov	r2, r4
 8007e46:	4639      	mov	r1, r7
 8007e48:	4630      	mov	r0, r6
 8007e4a:	47c0      	blx	r8
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0e6      	beq.n	8007e1e <_printf_common+0xb2>
 8007e50:	f109 0901 	add.w	r9, r9, #1
 8007e54:	e7d8      	b.n	8007e08 <_printf_common+0x9c>
	...

08007e58 <_printf_i>:
 8007e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e60:	460c      	mov	r4, r1
 8007e62:	7e09      	ldrb	r1, [r1, #24]
 8007e64:	b085      	sub	sp, #20
 8007e66:	296e      	cmp	r1, #110	; 0x6e
 8007e68:	4617      	mov	r7, r2
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	4698      	mov	r8, r3
 8007e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e70:	f000 80b3 	beq.w	8007fda <_printf_i+0x182>
 8007e74:	d822      	bhi.n	8007ebc <_printf_i+0x64>
 8007e76:	2963      	cmp	r1, #99	; 0x63
 8007e78:	d036      	beq.n	8007ee8 <_printf_i+0x90>
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x3a>
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	f000 80b9 	beq.w	8007ff4 <_printf_i+0x19c>
 8007e82:	2958      	cmp	r1, #88	; 0x58
 8007e84:	f000 8083 	beq.w	8007f8e <_printf_i+0x136>
 8007e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e90:	e032      	b.n	8007ef8 <_printf_i+0xa0>
 8007e92:	2964      	cmp	r1, #100	; 0x64
 8007e94:	d001      	beq.n	8007e9a <_printf_i+0x42>
 8007e96:	2969      	cmp	r1, #105	; 0x69
 8007e98:	d1f6      	bne.n	8007e88 <_printf_i+0x30>
 8007e9a:	6820      	ldr	r0, [r4, #0]
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	0605      	lsls	r5, r0, #24
 8007ea0:	f103 0104 	add.w	r1, r3, #4
 8007ea4:	d52a      	bpl.n	8007efc <_printf_i+0xa4>
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da03      	bge.n	8007eb6 <_printf_i+0x5e>
 8007eae:	222d      	movs	r2, #45	; 0x2d
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eb6:	486f      	ldr	r0, [pc, #444]	; (8008074 <_printf_i+0x21c>)
 8007eb8:	220a      	movs	r2, #10
 8007eba:	e039      	b.n	8007f30 <_printf_i+0xd8>
 8007ebc:	2973      	cmp	r1, #115	; 0x73
 8007ebe:	f000 809d 	beq.w	8007ffc <_printf_i+0x1a4>
 8007ec2:	d808      	bhi.n	8007ed6 <_printf_i+0x7e>
 8007ec4:	296f      	cmp	r1, #111	; 0x6f
 8007ec6:	d020      	beq.n	8007f0a <_printf_i+0xb2>
 8007ec8:	2970      	cmp	r1, #112	; 0x70
 8007eca:	d1dd      	bne.n	8007e88 <_printf_i+0x30>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	f043 0320 	orr.w	r3, r3, #32
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	e003      	b.n	8007ede <_printf_i+0x86>
 8007ed6:	2975      	cmp	r1, #117	; 0x75
 8007ed8:	d017      	beq.n	8007f0a <_printf_i+0xb2>
 8007eda:	2978      	cmp	r1, #120	; 0x78
 8007edc:	d1d4      	bne.n	8007e88 <_printf_i+0x30>
 8007ede:	2378      	movs	r3, #120	; 0x78
 8007ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee4:	4864      	ldr	r0, [pc, #400]	; (8008078 <_printf_i+0x220>)
 8007ee6:	e055      	b.n	8007f94 <_printf_i+0x13c>
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	1d19      	adds	r1, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6011      	str	r1, [r2, #0]
 8007ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e08c      	b.n	8008016 <_printf_i+0x1be>
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6011      	str	r1, [r2, #0]
 8007f00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f04:	bf18      	it	ne
 8007f06:	b21b      	sxthne	r3, r3
 8007f08:	e7cf      	b.n	8007eaa <_printf_i+0x52>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	0628      	lsls	r0, r5, #24
 8007f14:	d501      	bpl.n	8007f1a <_printf_i+0xc2>
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	e002      	b.n	8007f20 <_printf_i+0xc8>
 8007f1a:	0668      	lsls	r0, r5, #25
 8007f1c:	d5fb      	bpl.n	8007f16 <_printf_i+0xbe>
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	4854      	ldr	r0, [pc, #336]	; (8008074 <_printf_i+0x21c>)
 8007f22:	296f      	cmp	r1, #111	; 0x6f
 8007f24:	bf14      	ite	ne
 8007f26:	220a      	movne	r2, #10
 8007f28:	2208      	moveq	r2, #8
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f30:	6865      	ldr	r5, [r4, #4]
 8007f32:	60a5      	str	r5, [r4, #8]
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	f2c0 8095 	blt.w	8008064 <_printf_i+0x20c>
 8007f3a:	6821      	ldr	r1, [r4, #0]
 8007f3c:	f021 0104 	bic.w	r1, r1, #4
 8007f40:	6021      	str	r1, [r4, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d13d      	bne.n	8007fc2 <_printf_i+0x16a>
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	f040 808e 	bne.w	8008068 <_printf_i+0x210>
 8007f4c:	4665      	mov	r5, ip
 8007f4e:	2a08      	cmp	r2, #8
 8007f50:	d10b      	bne.n	8007f6a <_printf_i+0x112>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	07db      	lsls	r3, r3, #31
 8007f56:	d508      	bpl.n	8007f6a <_printf_i+0x112>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bfde      	ittt	le
 8007f60:	2330      	movle	r3, #48	; 0x30
 8007f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f6a:	ebac 0305 	sub.w	r3, ip, r5
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	f8cd 8000 	str.w	r8, [sp]
 8007f74:	463b      	mov	r3, r7
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff fef6 	bl	8007d6c <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14d      	bne.n	8008020 <_printf_i+0x1c8>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f88:	b005      	add	sp, #20
 8007f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	4839      	ldr	r0, [pc, #228]	; (8008074 <_printf_i+0x21c>)
 8007f90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1d1d      	adds	r5, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6015      	str	r5, [r2, #0]
 8007f9e:	060a      	lsls	r2, r1, #24
 8007fa0:	d50b      	bpl.n	8007fba <_printf_i+0x162>
 8007fa2:	07ca      	lsls	r2, r1, #31
 8007fa4:	bf44      	itt	mi
 8007fa6:	f041 0120 	orrmi.w	r1, r1, #32
 8007faa:	6021      	strmi	r1, [r4, #0]
 8007fac:	b91b      	cbnz	r3, 8007fb6 <_printf_i+0x15e>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	f022 0220 	bic.w	r2, r2, #32
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	e7b7      	b.n	8007f2a <_printf_i+0xd2>
 8007fba:	064d      	lsls	r5, r1, #25
 8007fbc:	bf48      	it	mi
 8007fbe:	b29b      	uxthmi	r3, r3
 8007fc0:	e7ef      	b.n	8007fa2 <_printf_i+0x14a>
 8007fc2:	4665      	mov	r5, ip
 8007fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc8:	fb02 3311 	mls	r3, r2, r1, r3
 8007fcc:	5cc3      	ldrb	r3, [r0, r3]
 8007fce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d1f5      	bne.n	8007fc4 <_printf_i+0x16c>
 8007fd8:	e7b9      	b.n	8007f4e <_printf_i+0xf6>
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	6961      	ldr	r1, [r4, #20]
 8007fe0:	1d18      	adds	r0, r3, #4
 8007fe2:	6010      	str	r0, [r2, #0]
 8007fe4:	0628      	lsls	r0, r5, #24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	d501      	bpl.n	8007fee <_printf_i+0x196>
 8007fea:	6019      	str	r1, [r3, #0]
 8007fec:	e002      	b.n	8007ff4 <_printf_i+0x19c>
 8007fee:	066a      	lsls	r2, r5, #25
 8007ff0:	d5fb      	bpl.n	8007fea <_printf_i+0x192>
 8007ff2:	8019      	strh	r1, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	4665      	mov	r5, ip
 8007ffa:	e7b9      	b.n	8007f70 <_printf_i+0x118>
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	1d19      	adds	r1, r3, #4
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	681d      	ldr	r5, [r3, #0]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	2100      	movs	r1, #0
 8008008:	4628      	mov	r0, r5
 800800a:	f7f8 f8e9 	bl	80001e0 <memchr>
 800800e:	b108      	cbz	r0, 8008014 <_printf_i+0x1bc>
 8008010:	1b40      	subs	r0, r0, r5
 8008012:	6060      	str	r0, [r4, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	2300      	movs	r3, #0
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	e7a7      	b.n	8007f70 <_printf_i+0x118>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	462a      	mov	r2, r5
 8008024:	4639      	mov	r1, r7
 8008026:	4630      	mov	r0, r6
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0aa      	beq.n	8007f84 <_printf_i+0x12c>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	079b      	lsls	r3, r3, #30
 8008032:	d413      	bmi.n	800805c <_printf_i+0x204>
 8008034:	68e0      	ldr	r0, [r4, #12]
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	4298      	cmp	r0, r3
 800803a:	bfb8      	it	lt
 800803c:	4618      	movlt	r0, r3
 800803e:	e7a3      	b.n	8007f88 <_printf_i+0x130>
 8008040:	2301      	movs	r3, #1
 8008042:	464a      	mov	r2, r9
 8008044:	4639      	mov	r1, r7
 8008046:	4630      	mov	r0, r6
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d09a      	beq.n	8007f84 <_printf_i+0x12c>
 800804e:	3501      	adds	r5, #1
 8008050:	68e3      	ldr	r3, [r4, #12]
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	42ab      	cmp	r3, r5
 8008058:	dcf2      	bgt.n	8008040 <_printf_i+0x1e8>
 800805a:	e7eb      	b.n	8008034 <_printf_i+0x1dc>
 800805c:	2500      	movs	r5, #0
 800805e:	f104 0919 	add.w	r9, r4, #25
 8008062:	e7f5      	b.n	8008050 <_printf_i+0x1f8>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ac      	bne.n	8007fc2 <_printf_i+0x16a>
 8008068:	7803      	ldrb	r3, [r0, #0]
 800806a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800806e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008072:	e76c      	b.n	8007f4e <_printf_i+0xf6>
 8008074:	08008ba7 	.word	0x08008ba7
 8008078:	08008bb8 	.word	0x08008bb8

0800807c <_sbrk_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4c06      	ldr	r4, [pc, #24]	; (8008098 <_sbrk_r+0x1c>)
 8008080:	2300      	movs	r3, #0
 8008082:	4605      	mov	r5, r0
 8008084:	4608      	mov	r0, r1
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	f7f9 ffec 	bl	8002064 <_sbrk>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_sbrk_r+0x1a>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	b103      	cbz	r3, 8008096 <_sbrk_r+0x1a>
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	20001380 	.word	0x20001380

0800809c <__sread>:
 800809c:	b510      	push	{r4, lr}
 800809e:	460c      	mov	r4, r1
 80080a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a4:	f000 faa4 	bl	80085f0 <_read_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	bfab      	itete	ge
 80080ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080ae:	89a3      	ldrhlt	r3, [r4, #12]
 80080b0:	181b      	addge	r3, r3, r0
 80080b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080b6:	bfac      	ite	ge
 80080b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ba:	81a3      	strhlt	r3, [r4, #12]
 80080bc:	bd10      	pop	{r4, pc}

080080be <__swrite>:
 80080be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c2:	461f      	mov	r7, r3
 80080c4:	898b      	ldrh	r3, [r1, #12]
 80080c6:	05db      	lsls	r3, r3, #23
 80080c8:	4605      	mov	r5, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	4616      	mov	r6, r2
 80080ce:	d505      	bpl.n	80080dc <__swrite+0x1e>
 80080d0:	2302      	movs	r3, #2
 80080d2:	2200      	movs	r2, #0
 80080d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d8:	f000 f9c4 	bl	8008464 <_lseek_r>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	4632      	mov	r2, r6
 80080ea:	463b      	mov	r3, r7
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f2:	f000 b877 	b.w	80081e4 <_write_r>

080080f6 <__sseek>:
 80080f6:	b510      	push	{r4, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fe:	f000 f9b1 	bl	8008464 <_lseek_r>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	bf15      	itete	ne
 8008108:	6560      	strne	r0, [r4, #84]	; 0x54
 800810a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800810e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008112:	81a3      	strheq	r3, [r4, #12]
 8008114:	bf18      	it	ne
 8008116:	81a3      	strhne	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__sclose>:
 800811a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811e:	f000 b8e1 	b.w	80082e4 <_close_r>
	...

08008124 <__swbuf_r>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	460e      	mov	r6, r1
 8008128:	4614      	mov	r4, r2
 800812a:	4605      	mov	r5, r0
 800812c:	b118      	cbz	r0, 8008136 <__swbuf_r+0x12>
 800812e:	6983      	ldr	r3, [r0, #24]
 8008130:	b90b      	cbnz	r3, 8008136 <__swbuf_r+0x12>
 8008132:	f7ff fbe1 	bl	80078f8 <__sinit>
 8008136:	4b21      	ldr	r3, [pc, #132]	; (80081bc <__swbuf_r+0x98>)
 8008138:	429c      	cmp	r4, r3
 800813a:	d12a      	bne.n	8008192 <__swbuf_r+0x6e>
 800813c:	686c      	ldr	r4, [r5, #4]
 800813e:	69a3      	ldr	r3, [r4, #24]
 8008140:	60a3      	str	r3, [r4, #8]
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	071a      	lsls	r2, r3, #28
 8008146:	d52e      	bpl.n	80081a6 <__swbuf_r+0x82>
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	b363      	cbz	r3, 80081a6 <__swbuf_r+0x82>
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	6963      	ldr	r3, [r4, #20]
 8008154:	b2f6      	uxtb	r6, r6
 8008156:	4283      	cmp	r3, r0
 8008158:	4637      	mov	r7, r6
 800815a:	dc04      	bgt.n	8008166 <__swbuf_r+0x42>
 800815c:	4621      	mov	r1, r4
 800815e:	4628      	mov	r0, r5
 8008160:	f000 f956 	bl	8008410 <_fflush_r>
 8008164:	bb28      	cbnz	r0, 80081b2 <__swbuf_r+0x8e>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	3b01      	subs	r3, #1
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	701e      	strb	r6, [r3, #0]
 8008174:	6963      	ldr	r3, [r4, #20]
 8008176:	3001      	adds	r0, #1
 8008178:	4283      	cmp	r3, r0
 800817a:	d004      	beq.n	8008186 <__swbuf_r+0x62>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	07db      	lsls	r3, r3, #31
 8008180:	d519      	bpl.n	80081b6 <__swbuf_r+0x92>
 8008182:	2e0a      	cmp	r6, #10
 8008184:	d117      	bne.n	80081b6 <__swbuf_r+0x92>
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f941 	bl	8008410 <_fflush_r>
 800818e:	b190      	cbz	r0, 80081b6 <__swbuf_r+0x92>
 8008190:	e00f      	b.n	80081b2 <__swbuf_r+0x8e>
 8008192:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <__swbuf_r+0x9c>)
 8008194:	429c      	cmp	r4, r3
 8008196:	d101      	bne.n	800819c <__swbuf_r+0x78>
 8008198:	68ac      	ldr	r4, [r5, #8]
 800819a:	e7d0      	b.n	800813e <__swbuf_r+0x1a>
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <__swbuf_r+0xa0>)
 800819e:	429c      	cmp	r4, r3
 80081a0:	bf08      	it	eq
 80081a2:	68ec      	ldreq	r4, [r5, #12]
 80081a4:	e7cb      	b.n	800813e <__swbuf_r+0x1a>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 f82d 	bl	8008208 <__swsetup_r>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0cc      	beq.n	800814c <__swbuf_r+0x28>
 80081b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081b6:	4638      	mov	r0, r7
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ba:	bf00      	nop
 80081bc:	08008b4c 	.word	0x08008b4c
 80081c0:	08008b6c 	.word	0x08008b6c
 80081c4:	08008b2c 	.word	0x08008b2c

080081c8 <__ascii_wctomb>:
 80081c8:	b149      	cbz	r1, 80081de <__ascii_wctomb+0x16>
 80081ca:	2aff      	cmp	r2, #255	; 0xff
 80081cc:	bf85      	ittet	hi
 80081ce:	238a      	movhi	r3, #138	; 0x8a
 80081d0:	6003      	strhi	r3, [r0, #0]
 80081d2:	700a      	strbls	r2, [r1, #0]
 80081d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80081d8:	bf98      	it	ls
 80081da:	2001      	movls	r0, #1
 80081dc:	4770      	bx	lr
 80081de:	4608      	mov	r0, r1
 80081e0:	4770      	bx	lr
	...

080081e4 <_write_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4c07      	ldr	r4, [pc, #28]	; (8008204 <_write_r+0x20>)
 80081e8:	4605      	mov	r5, r0
 80081ea:	4608      	mov	r0, r1
 80081ec:	4611      	mov	r1, r2
 80081ee:	2200      	movs	r2, #0
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f7f9 f9c0 	bl	8001578 <_write>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_write_r+0x1e>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_write_r+0x1e>
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20001380 	.word	0x20001380

08008208 <__swsetup_r>:
 8008208:	4b32      	ldr	r3, [pc, #200]	; (80082d4 <__swsetup_r+0xcc>)
 800820a:	b570      	push	{r4, r5, r6, lr}
 800820c:	681d      	ldr	r5, [r3, #0]
 800820e:	4606      	mov	r6, r0
 8008210:	460c      	mov	r4, r1
 8008212:	b125      	cbz	r5, 800821e <__swsetup_r+0x16>
 8008214:	69ab      	ldr	r3, [r5, #24]
 8008216:	b913      	cbnz	r3, 800821e <__swsetup_r+0x16>
 8008218:	4628      	mov	r0, r5
 800821a:	f7ff fb6d 	bl	80078f8 <__sinit>
 800821e:	4b2e      	ldr	r3, [pc, #184]	; (80082d8 <__swsetup_r+0xd0>)
 8008220:	429c      	cmp	r4, r3
 8008222:	d10f      	bne.n	8008244 <__swsetup_r+0x3c>
 8008224:	686c      	ldr	r4, [r5, #4]
 8008226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822a:	b29a      	uxth	r2, r3
 800822c:	0715      	lsls	r5, r2, #28
 800822e:	d42c      	bmi.n	800828a <__swsetup_r+0x82>
 8008230:	06d0      	lsls	r0, r2, #27
 8008232:	d411      	bmi.n	8008258 <__swsetup_r+0x50>
 8008234:	2209      	movs	r2, #9
 8008236:	6032      	str	r2, [r6, #0]
 8008238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008242:	e03e      	b.n	80082c2 <__swsetup_r+0xba>
 8008244:	4b25      	ldr	r3, [pc, #148]	; (80082dc <__swsetup_r+0xd4>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d101      	bne.n	800824e <__swsetup_r+0x46>
 800824a:	68ac      	ldr	r4, [r5, #8]
 800824c:	e7eb      	b.n	8008226 <__swsetup_r+0x1e>
 800824e:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <__swsetup_r+0xd8>)
 8008250:	429c      	cmp	r4, r3
 8008252:	bf08      	it	eq
 8008254:	68ec      	ldreq	r4, [r5, #12]
 8008256:	e7e6      	b.n	8008226 <__swsetup_r+0x1e>
 8008258:	0751      	lsls	r1, r2, #29
 800825a:	d512      	bpl.n	8008282 <__swsetup_r+0x7a>
 800825c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800825e:	b141      	cbz	r1, 8008272 <__swsetup_r+0x6a>
 8008260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008264:	4299      	cmp	r1, r3
 8008266:	d002      	beq.n	800826e <__swsetup_r+0x66>
 8008268:	4630      	mov	r0, r6
 800826a:	f000 f973 	bl	8008554 <_free_r>
 800826e:	2300      	movs	r3, #0
 8008270:	6363      	str	r3, [r4, #52]	; 0x34
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	6063      	str	r3, [r4, #4]
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f043 0308 	orr.w	r3, r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	b94b      	cbnz	r3, 80082a2 <__swsetup_r+0x9a>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008298:	d003      	beq.n	80082a2 <__swsetup_r+0x9a>
 800829a:	4621      	mov	r1, r4
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f917 	bl	80084d0 <__smakebuf_r>
 80082a2:	89a2      	ldrh	r2, [r4, #12]
 80082a4:	f012 0301 	ands.w	r3, r2, #1
 80082a8:	d00c      	beq.n	80082c4 <__swsetup_r+0xbc>
 80082aa:	2300      	movs	r3, #0
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	6963      	ldr	r3, [r4, #20]
 80082b0:	425b      	negs	r3, r3
 80082b2:	61a3      	str	r3, [r4, #24]
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	b953      	cbnz	r3, 80082ce <__swsetup_r+0xc6>
 80082b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80082c0:	d1ba      	bne.n	8008238 <__swsetup_r+0x30>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	0792      	lsls	r2, r2, #30
 80082c6:	bf58      	it	pl
 80082c8:	6963      	ldrpl	r3, [r4, #20]
 80082ca:	60a3      	str	r3, [r4, #8]
 80082cc:	e7f2      	b.n	80082b4 <__swsetup_r+0xac>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e7f7      	b.n	80082c2 <__swsetup_r+0xba>
 80082d2:	bf00      	nop
 80082d4:	2000000c 	.word	0x2000000c
 80082d8:	08008b4c 	.word	0x08008b4c
 80082dc:	08008b6c 	.word	0x08008b6c
 80082e0:	08008b2c 	.word	0x08008b2c

080082e4 <_close_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4c06      	ldr	r4, [pc, #24]	; (8008300 <_close_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4605      	mov	r5, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	f7f9 fe84 	bl	8001ffc <_close>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_close_r+0x1a>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_close_r+0x1a>
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20001380 	.word	0x20001380

08008304 <__sflush_r>:
 8008304:	898a      	ldrh	r2, [r1, #12]
 8008306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	4605      	mov	r5, r0
 800830c:	0710      	lsls	r0, r2, #28
 800830e:	460c      	mov	r4, r1
 8008310:	d458      	bmi.n	80083c4 <__sflush_r+0xc0>
 8008312:	684b      	ldr	r3, [r1, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc05      	bgt.n	8008324 <__sflush_r+0x20>
 8008318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	dc02      	bgt.n	8008324 <__sflush_r+0x20>
 800831e:	2000      	movs	r0, #0
 8008320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008326:	2e00      	cmp	r6, #0
 8008328:	d0f9      	beq.n	800831e <__sflush_r+0x1a>
 800832a:	2300      	movs	r3, #0
 800832c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008330:	682f      	ldr	r7, [r5, #0]
 8008332:	6a21      	ldr	r1, [r4, #32]
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	d032      	beq.n	800839e <__sflush_r+0x9a>
 8008338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	075a      	lsls	r2, r3, #29
 800833e:	d505      	bpl.n	800834c <__sflush_r+0x48>
 8008340:	6863      	ldr	r3, [r4, #4]
 8008342:	1ac0      	subs	r0, r0, r3
 8008344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008346:	b10b      	cbz	r3, 800834c <__sflush_r+0x48>
 8008348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800834a:	1ac0      	subs	r0, r0, r3
 800834c:	2300      	movs	r3, #0
 800834e:	4602      	mov	r2, r0
 8008350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008352:	6a21      	ldr	r1, [r4, #32]
 8008354:	4628      	mov	r0, r5
 8008356:	47b0      	blx	r6
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	d106      	bne.n	800836c <__sflush_r+0x68>
 800835e:	6829      	ldr	r1, [r5, #0]
 8008360:	291d      	cmp	r1, #29
 8008362:	d848      	bhi.n	80083f6 <__sflush_r+0xf2>
 8008364:	4a29      	ldr	r2, [pc, #164]	; (800840c <__sflush_r+0x108>)
 8008366:	40ca      	lsrs	r2, r1
 8008368:	07d6      	lsls	r6, r2, #31
 800836a:	d544      	bpl.n	80083f6 <__sflush_r+0xf2>
 800836c:	2200      	movs	r2, #0
 800836e:	6062      	str	r2, [r4, #4]
 8008370:	04d9      	lsls	r1, r3, #19
 8008372:	6922      	ldr	r2, [r4, #16]
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	d504      	bpl.n	8008382 <__sflush_r+0x7e>
 8008378:	1c42      	adds	r2, r0, #1
 800837a:	d101      	bne.n	8008380 <__sflush_r+0x7c>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b903      	cbnz	r3, 8008382 <__sflush_r+0x7e>
 8008380:	6560      	str	r0, [r4, #84]	; 0x54
 8008382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008384:	602f      	str	r7, [r5, #0]
 8008386:	2900      	cmp	r1, #0
 8008388:	d0c9      	beq.n	800831e <__sflush_r+0x1a>
 800838a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800838e:	4299      	cmp	r1, r3
 8008390:	d002      	beq.n	8008398 <__sflush_r+0x94>
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f8de 	bl	8008554 <_free_r>
 8008398:	2000      	movs	r0, #0
 800839a:	6360      	str	r0, [r4, #52]	; 0x34
 800839c:	e7c0      	b.n	8008320 <__sflush_r+0x1c>
 800839e:	2301      	movs	r3, #1
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b0      	blx	r6
 80083a4:	1c41      	adds	r1, r0, #1
 80083a6:	d1c8      	bne.n	800833a <__sflush_r+0x36>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c5      	beq.n	800833a <__sflush_r+0x36>
 80083ae:	2b1d      	cmp	r3, #29
 80083b0:	d001      	beq.n	80083b6 <__sflush_r+0xb2>
 80083b2:	2b16      	cmp	r3, #22
 80083b4:	d101      	bne.n	80083ba <__sflush_r+0xb6>
 80083b6:	602f      	str	r7, [r5, #0]
 80083b8:	e7b1      	b.n	800831e <__sflush_r+0x1a>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	e7ad      	b.n	8008320 <__sflush_r+0x1c>
 80083c4:	690f      	ldr	r7, [r1, #16]
 80083c6:	2f00      	cmp	r7, #0
 80083c8:	d0a9      	beq.n	800831e <__sflush_r+0x1a>
 80083ca:	0793      	lsls	r3, r2, #30
 80083cc:	680e      	ldr	r6, [r1, #0]
 80083ce:	bf08      	it	eq
 80083d0:	694b      	ldreq	r3, [r1, #20]
 80083d2:	600f      	str	r7, [r1, #0]
 80083d4:	bf18      	it	ne
 80083d6:	2300      	movne	r3, #0
 80083d8:	eba6 0807 	sub.w	r8, r6, r7
 80083dc:	608b      	str	r3, [r1, #8]
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	dd9c      	ble.n	800831e <__sflush_r+0x1a>
 80083e4:	4643      	mov	r3, r8
 80083e6:	463a      	mov	r2, r7
 80083e8:	6a21      	ldr	r1, [r4, #32]
 80083ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b0      	blx	r6
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dc06      	bgt.n	8008402 <__sflush_r+0xfe>
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008400:	e78e      	b.n	8008320 <__sflush_r+0x1c>
 8008402:	4407      	add	r7, r0
 8008404:	eba8 0800 	sub.w	r8, r8, r0
 8008408:	e7e9      	b.n	80083de <__sflush_r+0xda>
 800840a:	bf00      	nop
 800840c:	20400001 	.word	0x20400001

08008410 <_fflush_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	690b      	ldr	r3, [r1, #16]
 8008414:	4605      	mov	r5, r0
 8008416:	460c      	mov	r4, r1
 8008418:	b1db      	cbz	r3, 8008452 <_fflush_r+0x42>
 800841a:	b118      	cbz	r0, 8008424 <_fflush_r+0x14>
 800841c:	6983      	ldr	r3, [r0, #24]
 800841e:	b90b      	cbnz	r3, 8008424 <_fflush_r+0x14>
 8008420:	f7ff fa6a 	bl	80078f8 <__sinit>
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <_fflush_r+0x48>)
 8008426:	429c      	cmp	r4, r3
 8008428:	d109      	bne.n	800843e <_fflush_r+0x2e>
 800842a:	686c      	ldr	r4, [r5, #4]
 800842c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008430:	b17b      	cbz	r3, 8008452 <_fflush_r+0x42>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843a:	f7ff bf63 	b.w	8008304 <__sflush_r>
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <_fflush_r+0x4c>)
 8008440:	429c      	cmp	r4, r3
 8008442:	d101      	bne.n	8008448 <_fflush_r+0x38>
 8008444:	68ac      	ldr	r4, [r5, #8]
 8008446:	e7f1      	b.n	800842c <_fflush_r+0x1c>
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <_fflush_r+0x50>)
 800844a:	429c      	cmp	r4, r3
 800844c:	bf08      	it	eq
 800844e:	68ec      	ldreq	r4, [r5, #12]
 8008450:	e7ec      	b.n	800842c <_fflush_r+0x1c>
 8008452:	2000      	movs	r0, #0
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	08008b4c 	.word	0x08008b4c
 800845c:	08008b6c 	.word	0x08008b6c
 8008460:	08008b2c 	.word	0x08008b2c

08008464 <_lseek_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4c07      	ldr	r4, [pc, #28]	; (8008484 <_lseek_r+0x20>)
 8008468:	4605      	mov	r5, r0
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f9 fde9 	bl	800204a <_lseek>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_lseek_r+0x1e>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	b103      	cbz	r3, 8008482 <_lseek_r+0x1e>
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20001380 	.word	0x20001380

08008488 <__swhatbuf_r>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	460e      	mov	r6, r1
 800848c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008490:	2900      	cmp	r1, #0
 8008492:	b096      	sub	sp, #88	; 0x58
 8008494:	4614      	mov	r4, r2
 8008496:	461d      	mov	r5, r3
 8008498:	da07      	bge.n	80084aa <__swhatbuf_r+0x22>
 800849a:	2300      	movs	r3, #0
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	89b3      	ldrh	r3, [r6, #12]
 80084a0:	061a      	lsls	r2, r3, #24
 80084a2:	d410      	bmi.n	80084c6 <__swhatbuf_r+0x3e>
 80084a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a8:	e00e      	b.n	80084c8 <__swhatbuf_r+0x40>
 80084aa:	466a      	mov	r2, sp
 80084ac:	f000 f8b2 	bl	8008614 <_fstat_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dbf2      	blt.n	800849a <__swhatbuf_r+0x12>
 80084b4:	9a01      	ldr	r2, [sp, #4]
 80084b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084be:	425a      	negs	r2, r3
 80084c0:	415a      	adcs	r2, r3
 80084c2:	602a      	str	r2, [r5, #0]
 80084c4:	e7ee      	b.n	80084a4 <__swhatbuf_r+0x1c>
 80084c6:	2340      	movs	r3, #64	; 0x40
 80084c8:	2000      	movs	r0, #0
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	b016      	add	sp, #88	; 0x58
 80084ce:	bd70      	pop	{r4, r5, r6, pc}

080084d0 <__smakebuf_r>:
 80084d0:	898b      	ldrh	r3, [r1, #12]
 80084d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d4:	079d      	lsls	r5, r3, #30
 80084d6:	4606      	mov	r6, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d507      	bpl.n	80084ec <__smakebuf_r+0x1c>
 80084dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	2301      	movs	r3, #1
 80084e6:	6163      	str	r3, [r4, #20]
 80084e8:	b002      	add	sp, #8
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	ab01      	add	r3, sp, #4
 80084ee:	466a      	mov	r2, sp
 80084f0:	f7ff ffca 	bl	8008488 <__swhatbuf_r>
 80084f4:	9900      	ldr	r1, [sp, #0]
 80084f6:	4605      	mov	r5, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fa9d 	bl	8007a38 <_malloc_r>
 80084fe:	b948      	cbnz	r0, 8008514 <__smakebuf_r+0x44>
 8008500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008504:	059a      	lsls	r2, r3, #22
 8008506:	d4ef      	bmi.n	80084e8 <__smakebuf_r+0x18>
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	e7e3      	b.n	80084dc <__smakebuf_r+0xc>
 8008514:	4b0d      	ldr	r3, [pc, #52]	; (800854c <__smakebuf_r+0x7c>)
 8008516:	62b3      	str	r3, [r6, #40]	; 0x28
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	6020      	str	r0, [r4, #0]
 800851c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	6163      	str	r3, [r4, #20]
 8008526:	9b01      	ldr	r3, [sp, #4]
 8008528:	6120      	str	r0, [r4, #16]
 800852a:	b15b      	cbz	r3, 8008544 <__smakebuf_r+0x74>
 800852c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008530:	4630      	mov	r0, r6
 8008532:	f000 f881 	bl	8008638 <_isatty_r>
 8008536:	b128      	cbz	r0, 8008544 <__smakebuf_r+0x74>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	431d      	orrs	r5, r3
 8008548:	81a5      	strh	r5, [r4, #12]
 800854a:	e7cd      	b.n	80084e8 <__smakebuf_r+0x18>
 800854c:	080078c1 	.word	0x080078c1

08008550 <__malloc_lock>:
 8008550:	4770      	bx	lr

08008552 <__malloc_unlock>:
 8008552:	4770      	bx	lr

08008554 <_free_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4605      	mov	r5, r0
 8008558:	2900      	cmp	r1, #0
 800855a:	d045      	beq.n	80085e8 <_free_r+0x94>
 800855c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008560:	1f0c      	subs	r4, r1, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfb8      	it	lt
 8008566:	18e4      	addlt	r4, r4, r3
 8008568:	f7ff fff2 	bl	8008550 <__malloc_lock>
 800856c:	4a1f      	ldr	r2, [pc, #124]	; (80085ec <_free_r+0x98>)
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	4610      	mov	r0, r2
 8008572:	b933      	cbnz	r3, 8008582 <_free_r+0x2e>
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	6014      	str	r4, [r2, #0]
 8008578:	4628      	mov	r0, r5
 800857a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857e:	f7ff bfe8 	b.w	8008552 <__malloc_unlock>
 8008582:	42a3      	cmp	r3, r4
 8008584:	d90c      	bls.n	80085a0 <_free_r+0x4c>
 8008586:	6821      	ldr	r1, [r4, #0]
 8008588:	1862      	adds	r2, r4, r1
 800858a:	4293      	cmp	r3, r2
 800858c:	bf04      	itt	eq
 800858e:	681a      	ldreq	r2, [r3, #0]
 8008590:	685b      	ldreq	r3, [r3, #4]
 8008592:	6063      	str	r3, [r4, #4]
 8008594:	bf04      	itt	eq
 8008596:	1852      	addeq	r2, r2, r1
 8008598:	6022      	streq	r2, [r4, #0]
 800859a:	6004      	str	r4, [r0, #0]
 800859c:	e7ec      	b.n	8008578 <_free_r+0x24>
 800859e:	4613      	mov	r3, r2
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	b10a      	cbz	r2, 80085a8 <_free_r+0x54>
 80085a4:	42a2      	cmp	r2, r4
 80085a6:	d9fa      	bls.n	800859e <_free_r+0x4a>
 80085a8:	6819      	ldr	r1, [r3, #0]
 80085aa:	1858      	adds	r0, r3, r1
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d10b      	bne.n	80085c8 <_free_r+0x74>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	4401      	add	r1, r0
 80085b4:	1858      	adds	r0, r3, r1
 80085b6:	4282      	cmp	r2, r0
 80085b8:	6019      	str	r1, [r3, #0]
 80085ba:	d1dd      	bne.n	8008578 <_free_r+0x24>
 80085bc:	6810      	ldr	r0, [r2, #0]
 80085be:	6852      	ldr	r2, [r2, #4]
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	4401      	add	r1, r0
 80085c4:	6019      	str	r1, [r3, #0]
 80085c6:	e7d7      	b.n	8008578 <_free_r+0x24>
 80085c8:	d902      	bls.n	80085d0 <_free_r+0x7c>
 80085ca:	230c      	movs	r3, #12
 80085cc:	602b      	str	r3, [r5, #0]
 80085ce:	e7d3      	b.n	8008578 <_free_r+0x24>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	1821      	adds	r1, r4, r0
 80085d4:	428a      	cmp	r2, r1
 80085d6:	bf04      	itt	eq
 80085d8:	6811      	ldreq	r1, [r2, #0]
 80085da:	6852      	ldreq	r2, [r2, #4]
 80085dc:	6062      	str	r2, [r4, #4]
 80085de:	bf04      	itt	eq
 80085e0:	1809      	addeq	r1, r1, r0
 80085e2:	6021      	streq	r1, [r4, #0]
 80085e4:	605c      	str	r4, [r3, #4]
 80085e6:	e7c7      	b.n	8008578 <_free_r+0x24>
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	20000db8 	.word	0x20000db8

080085f0 <_read_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4c07      	ldr	r4, [pc, #28]	; (8008610 <_read_r+0x20>)
 80085f4:	4605      	mov	r5, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f8 ffce 	bl	80015a0 <_read>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_read_r+0x1e>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	b103      	cbz	r3, 800860e <_read_r+0x1e>
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20001380 	.word	0x20001380

08008614 <_fstat_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4c07      	ldr	r4, [pc, #28]	; (8008634 <_fstat_r+0x20>)
 8008618:	2300      	movs	r3, #0
 800861a:	4605      	mov	r5, r0
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	f7f9 fcf7 	bl	8002014 <_fstat>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	d102      	bne.n	8008630 <_fstat_r+0x1c>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	b103      	cbz	r3, 8008630 <_fstat_r+0x1c>
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	bd38      	pop	{r3, r4, r5, pc}
 8008632:	bf00      	nop
 8008634:	20001380 	.word	0x20001380

08008638 <_isatty_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4c06      	ldr	r4, [pc, #24]	; (8008654 <_isatty_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4605      	mov	r5, r0
 8008640:	4608      	mov	r0, r1
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	f7f9 fcf6 	bl	8002034 <_isatty>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_isatty_r+0x1a>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	b103      	cbz	r3, 8008652 <_isatty_r+0x1a>
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20001380 	.word	0x20001380

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
