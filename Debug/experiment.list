
experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000771c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ec4  08007ec4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dec  200001dc  080080a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  080080a8  00020fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b26  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ed  00000000  00000000  00036d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  0003b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000207d2  00000000  00000000  0003bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001015d  00000000  00000000  0005c69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3d31  00000000  00000000  0006c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120528  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  001205a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080078a4 	.word	0x080078a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080078a4 	.word	0x080078a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ConsoleCommandMatch>:
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char *pChar); // this could be replaced with itoa (intVal, str, 16);

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char *name, const char *buffer) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]

	if (buffer[i] == name[i]) {
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	4413      	add	r3, r2
 8000298:	781a      	ldrb	r2, [r3, #0]
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	440b      	add	r3, r1
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d114      	bne.n	80002d0 <ConsoleCommandMatch+0x50>
		result = 1u;
 80002a6:	2301      	movs	r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
		i++;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3301      	adds	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
	}

	while ((1u == result) && (i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH)
 80002b0:	e00e      	b.n	80002d0 <ConsoleCommandMatch+0x50>
			&& (buffer[i] != PARAMETER_SEPARATER) && (buffer[i] != LF_CHAR)
			&& (buffer[i] != CR_CHAR) && (buffer[i] != (char) NULL_CHAR)) {
		if (buffer[i] != name[i]) {
 80002b2:	683a      	ldr	r2, [r7, #0]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	781a      	ldrb	r2, [r3, #0]
 80002ba:	6879      	ldr	r1, [r7, #4]
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	440b      	add	r3, r1
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d001      	beq.n	80002ca <ConsoleCommandMatch+0x4a>
			result = 0u;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
	while ((1u == result) && (i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH)
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d11a      	bne.n	800030c <ConsoleCommandMatch+0x8c>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2b09      	cmp	r3, #9
 80002da:	d817      	bhi.n	800030c <ConsoleCommandMatch+0x8c>
			&& (buffer[i] != PARAMETER_SEPARATER) && (buffer[i] != LF_CHAR)
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b20      	cmp	r3, #32
 80002e6:	d011      	beq.n	800030c <ConsoleCommandMatch+0x8c>
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4413      	add	r3, r2
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b0a      	cmp	r3, #10
 80002f2:	d00b      	beq.n	800030c <ConsoleCommandMatch+0x8c>
			&& (buffer[i] != CR_CHAR) && (buffer[i] != (char) NULL_CHAR)) {
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b0d      	cmp	r3, #13
 80002fe:	d005      	beq.n	800030c <ConsoleCommandMatch+0x8c>
 8000300:	683a      	ldr	r2, [r7, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d1d2      	bne.n	80002b2 <ConsoleCommandMatch+0x32>
	}

	return result;
 800030c:	68bb      	ldr	r3, [r7, #8]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[],
		const uint32_t filledLength, uint32_t usedSoFar) {
 800031a:	b480      	push	{r7}
 800031c:	b087      	sub	sp, #28
 800031e:	af00      	add	r7, sp, #0
 8000320:	60f8      	str	r0, [r7, #12]
 8000322:	60b9      	str	r1, [r7, #8]
 8000324:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength) {
 800032a:	e00d      	b.n	8000348 <ConsoleResetBuffer+0x2e>
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	441a      	add	r2, r3
 8000332:	68f9      	ldr	r1, [r7, #12]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	440b      	add	r3, r1
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	701a      	strb	r2, [r3, #0]
		i++;
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	3301      	adds	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength) {
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	429a      	cmp	r2, r3
 800034e:	d3ed      	bcc.n	800032c <ConsoleResetBuffer+0x12>
	}
	for ( /* nothing */; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 8000350:	e007      	b.n	8000362 <ConsoleResetBuffer+0x48>
		receiveBuffer[i] = NULL_CHAR;
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4413      	add	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	3301      	adds	r3, #1
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	2bff      	cmp	r3, #255	; 0xff
 8000366:	d9f4      	bls.n	8000352 <ConsoleResetBuffer+0x38>
	}
	return (filledLength - usedSoFar);
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1ad3      	subs	r3, r2, r3
}
 800036e:	4618      	mov	r0, r3
 8000370:	371c      	adds	r7, #28
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[],
		const uint32_t filledLength) {
 800037a:	b480      	push	{r7}
 800037c:	b085      	sub	sp, #20
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800038c:	60bb      	str	r3, [r7, #8]

	while (( CR_CHAR != receiveBuffer[i]) && (LF_CHAR != receiveBuffer[i])
 800038e:	e002      	b.n	8000396 <ConsoleCommandEndline+0x1c>
			&& (i < filledLength)) {
		i++;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	3301      	adds	r3, #1
 8000394:	60fb      	str	r3, [r7, #12]
	while (( CR_CHAR != receiveBuffer[i]) && (LF_CHAR != receiveBuffer[i])
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	4413      	add	r3, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b0d      	cmp	r3, #13
 80003a0:	d009      	beq.n	80003b6 <ConsoleCommandEndline+0x3c>
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	4413      	add	r3, r2
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b0a      	cmp	r3, #10
 80003ac:	d003      	beq.n	80003b6 <ConsoleCommandEndline+0x3c>
			&& (i < filledLength)) {
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3ec      	bcc.n	8000390 <ConsoleCommandEndline+0x16>
	}
	if (i < filledLength) {
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d201      	bcs.n	80003c2 <ConsoleCommandEndline+0x48>
		result = i;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80003c2:	68bb      	ldr	r3, [r7, #8]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *uart) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(uart);
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f000 fb3f 	bl	8000a5c <ConsoleIoInit>
	ConsoleIoSendString(
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <ConsoleInit+0x4c>)
 80003e0:	f000 fb7c 	bl	8000adc <ConsoleIoSendString>
			"MIDI Thingy");
	ConsoleIoSendString(STR_ENDLINE);
 80003e4:	480e      	ldr	r0, [pc, #56]	; (8000420 <ConsoleInit+0x50>)
 80003e6:	f000 fb79 	bl	8000adc <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80003ea:	480e      	ldr	r0, [pc, #56]	; (8000424 <ConsoleInit+0x54>)
 80003ec:	f000 fb76 	bl	8000adc <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <ConsoleInit+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e007      	b.n	800040c <ConsoleInit+0x3c>
		mReceiveBuffer[i] = NULL_CHAR;
 80003fc:	4a0b      	ldr	r2, [pc, #44]	; (800042c <ConsoleInit+0x5c>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < CONSOLE_COMMAND_MAX_LENGTH; i++) {
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2bff      	cmp	r3, #255	; 0xff
 8000410:	d9f4      	bls.n	80003fc <ConsoleInit+0x2c>
	}

}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	080078bc 	.word	0x080078bc
 8000420:	080078c8 	.word	0x080078c8
 8000424:	080078cc 	.word	0x080078cc
 8000428:	20000a4c 	.word	0x20000a4c
 800042c:	20000a50 	.word	0x20000a50

08000430 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
	const sConsoleCommandTable_T *commandTable;
	uint32_t received = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
	uint32_t cmdIndex;
	int32_t cmdEndline;
	int32_t found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*) &(mReceiveBuffer[mReceivedSoFar]),
 800043a:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <ConsoleProcess+0x140>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a4d      	ldr	r2, [pc, #308]	; (8000574 <ConsoleProcess+0x144>)
 8000440:	1898      	adds	r0, r3, r2
 8000442:	4b4b      	ldr	r3, [pc, #300]	; (8000570 <ConsoleProcess+0x140>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800044a:	463a      	mov	r2, r7
 800044c:	4619      	mov	r1, r3
 800044e:	f000 fb15 	bl	8000a7c <ConsoleIoReceive>
			( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar), &received);
	if (received > 0u) {
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	f000 8087 	beq.w	8000568 <ConsoleProcess+0x138>
		mReceivedSoFar += received;
 800045a:	4b45      	ldr	r3, [pc, #276]	; (8000570 <ConsoleProcess+0x140>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	4413      	add	r3, r2
 8000462:	4a43      	ldr	r2, [pc, #268]	; (8000570 <ConsoleProcess+0x140>)
 8000464:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000466:	4b42      	ldr	r3, [pc, #264]	; (8000570 <ConsoleProcess+0x140>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	4841      	ldr	r0, [pc, #260]	; (8000574 <ConsoleProcess+0x144>)
 800046e:	f7ff ff84 	bl	800037a <ConsoleCommandEndline>
 8000472:	60f8      	str	r0, [r7, #12]
		if (cmdEndline >= 0) {  // have complete string, find command
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db76      	blt.n	8000568 <ConsoleProcess+0x138>

			// Print a line feed.
			printf("\n\r");
 800047a:	483f      	ldr	r0, [pc, #252]	; (8000578 <ConsoleProcess+0x148>)
 800047c:	f006 fa78 	bl	8006970 <iprintf>

			commandTable = ConsoleCommandsGetTable();
 8000480:	f000 fac4 	bl	8000a0c <ConsoleCommandsGetTable>
 8000484:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800048e:	613b      	str	r3, [r7, #16]
			while (( NULL != commandTable[cmdIndex].name)
 8000490:	e03d      	b.n	800050e <ConsoleProcess+0xde>
					&& ( NOT_FOUND == found)) {
				if (ConsoleCommandMatch(commandTable[cmdIndex].name,
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	4613      	mov	r3, r2
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	4413      	add	r3, r2
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	461a      	mov	r2, r3
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	4413      	add	r3, r2
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4933      	ldr	r1, [pc, #204]	; (8000574 <ConsoleProcess+0x144>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff feea 	bl	8000280 <ConsoleCommandMatch>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d02a      	beq.n	8000508 <ConsoleProcess+0xd8>
						mReceiveBuffer)) {
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	4613      	mov	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	4413      	add	r3, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	461a      	mov	r2, r3
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	482b      	ldr	r0, [pc, #172]	; (8000574 <ConsoleProcess+0x144>)
 80004c6:	4798      	blx	r3
 80004c8:	4603      	mov	r3, r0
 80004ca:	71fb      	strb	r3, [r7, #7]
					if (COMMAND_SUCCESS != result) {
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d017      	beq.n	8000502 <ConsoleProcess+0xd2>
						ConsoleIoSendString("Error: ");
 80004d2:	482a      	ldr	r0, [pc, #168]	; (800057c <ConsoleProcess+0x14c>)
 80004d4:	f000 fb02 	bl	8000adc <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80004d8:	4826      	ldr	r0, [pc, #152]	; (8000574 <ConsoleProcess+0x144>)
 80004da:	f000 faff 	bl	8000adc <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80004de:	4828      	ldr	r0, [pc, #160]	; (8000580 <ConsoleProcess+0x150>)
 80004e0:	f000 fafc 	bl	8000adc <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	4613      	mov	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	461a      	mov	r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	4413      	add	r3, r2
 80004f4:	3308      	adds	r3, #8
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 faf0 	bl	8000adc <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80004fc:	4821      	ldr	r0, [pc, #132]	; (8000584 <ConsoleProcess+0x154>)
 80004fe:	f000 faed 	bl	8000adc <ConsoleIoSendString>

					}
					found = cmdIndex;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	613b      	str	r3, [r7, #16]
 8000506:	e002      	b.n	800050e <ConsoleProcess+0xde>
				} else {
					cmdIndex++;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
			while (( NULL != commandTable[cmdIndex].name)
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	4613      	mov	r3, r2
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4413      	add	r3, r2
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	461a      	mov	r2, r3
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d003      	beq.n	800052c <ConsoleProcess+0xfc>
					&& ( NOT_FOUND == found)) {
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800052a:	d0b2      	beq.n	8000492 <ConsoleProcess+0x62>

				}
			}
			if ((cmdEndline != 0) && ( NOT_FOUND == found)) {
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00d      	beq.n	800054e <ConsoleProcess+0x11e>
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000538:	d109      	bne.n	800054e <ConsoleProcess+0x11e>
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <ConsoleProcess+0x140>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d905      	bls.n	800054e <ConsoleProcess+0x11e>
						{
					ConsoleIoSendString("Command not found.");
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <ConsoleProcess+0x158>)
 8000544:	f000 faca 	bl	8000adc <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <ConsoleProcess+0x154>)
 800054a:	f000 fac7 	bl	8000adc <ConsoleIoSendString>
				}
			}
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar,
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <ConsoleProcess+0x140>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	4619      	mov	r1, r3
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <ConsoleProcess+0x144>)
 8000558:	f7ff fedf 	bl	800031a <ConsoleResetBuffer>
 800055c:	4602      	mov	r2, r0
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <ConsoleProcess+0x140>)
 8000560:	601a      	str	r2, [r3, #0]
					cmdEndline);
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <ConsoleProcess+0x15c>)
 8000564:	f000 faba 	bl	8000adc <ConsoleIoSendString>
		}
	}
}
 8000568:	bf00      	nop
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000a4c 	.word	0x20000a4c
 8000574:	20000a50 	.word	0x20000a50
 8000578:	080078d0 	.word	0x080078d0
 800057c:	080078d4 	.word	0x080078d4
 8000580:	080078dc 	.word	0x080078dc
 8000584:	080078c8 	.word	0x080078c8
 8000588:	080078e4 	.word	0x080078e4
 800058c:	080078cc 	.word	0x080078cc

08000590 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char *buffer,
		const uint8_t parameterNumber, uint32_t *startLocation) {
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	460b      	mov	r3, r1
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80005a6:	2300      	movs	r3, #0
 80005a8:	75fb      	strb	r3, [r7, #23]

	while ((parameterNumber != parameterIndex)
 80005aa:	e00b      	b.n	80005c4 <ConsoleParamFindN+0x34>
			&& (bufferIndex < CONSOLE_COMMAND_MAX_LENGTH)) {
		if ( PARAMETER_SEPARATER == buffer[bufferIndex]) {
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <ConsoleParamFindN+0x2e>
			parameterIndex++;
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	3301      	adds	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3301      	adds	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
	while ((parameterNumber != parameterIndex)
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	69ba      	ldr	r2, [r7, #24]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d002      	beq.n	80005d2 <ConsoleParamFindN+0x42>
			&& (bufferIndex < CONSOLE_COMMAND_MAX_LENGTH)) {
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d9ec      	bls.n	80005ac <ConsoleParamFindN+0x1c>
	}
	if ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex) {
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005d8:	d102      	bne.n	80005e0 <ConsoleParamFindN+0x50>
		result = COMMAND_PARAMETER_ERROR;
 80005da:	2310      	movs	r3, #16
 80005dc:	75fb      	strb	r3, [r7, #23]
 80005de:	e002      	b.n	80005e6 <ConsoleParamFindN+0x56>
	} else {
		*startLocation = bufferIndex;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	601a      	str	r2, [r3, #0]
	}
	return result;
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3724      	adds	r7, #36	; 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char *buffer,
		const uint8_t parameterNumber, int16_t *parameterInt) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	460b      	mov	r3, r1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000606:	f107 021c 	add.w	r2, r7, #28
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	4619      	mov	r1, r3
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff ffbe 	bl	8000590 <ConsoleParamFindN>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	4413      	add	r3, r2
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while (( LF_CHAR != charVal) && ( CR_CHAR != charVal)
 800062e:	e011      	b.n	8000654 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal) && (i < INT16_MAX_STR_LENGTH)) {
		str[i] = charVal;					// copy the relevant part
 8000630:	f107 0214 	add.w	r2, r7, #20
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	4413      	add	r3, r2
 8000638:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800063c:	701a      	strb	r2, [r3, #0]
		i++;
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	3301      	adds	r3, #1
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000644:	69fa      	ldr	r2, [r7, #28]
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	4413      	add	r3, r2
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while (( LF_CHAR != charVal) && ( CR_CHAR != charVal)
 8000654:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d00a      	beq.n	8000672 <ConsoleReceiveParamInt16+0x7e>
 800065c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000660:	2b0d      	cmp	r3, #13
 8000662:	d006      	beq.n	8000672 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal) && (i < INT16_MAX_STR_LENGTH)) {
 8000664:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000668:	2b20      	cmp	r3, #32
 800066a:	d002      	beq.n	8000672 <ConsoleReceiveParamInt16+0x7e>
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	2b07      	cmp	r3, #7
 8000670:	d9de      	bls.n	8000630 <ConsoleReceiveParamInt16+0x3c>
	}
	if (i == INT16_MAX_STR_LENGTH) {
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	2b08      	cmp	r3, #8
 8000676:	d102      	bne.n	800067e <ConsoleReceiveParamInt16+0x8a>
		result = COMMAND_PARAMETER_ERROR;
 8000678:	2310      	movs	r3, #16
 800067a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if (COMMAND_SUCCESS == result) {
 800067e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10e      	bne.n	80006a4 <ConsoleReceiveParamInt16+0xb0>
		str[i] = NULL_CHAR;
 8000686:	f107 0214 	add.w	r2, r7, #20
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f006 f927 	bl	80068ea <atoi>
 800069c:	4603      	mov	r3, r0
 800069e:	b21a      	sxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80006a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char *buffer,
		const uint8_t parameterNumber, uint16_t *parameterUint16) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	460b      	mov	r3, r1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80006c6:	f107 0218 	add.w	r2, r7, #24
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff ff5e 	bl	8000590 <ConsoleParamFindN>
 80006d4:	4603      	mov	r3, r0
 80006d6:	77fb      	strb	r3, [r7, #31]
	if (COMMAND_SUCCESS == result) {
 80006d8:	7ffb      	ldrb	r3, [r7, #31]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d12c      	bne.n	8000738 <ConsoleReceiveParamHexUint16+0x88>
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for (i = 0u; i < 4u; i++)  // U16 must be less than 4 hex digits: 0xFFFF
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	e01e      	b.n	8000722 <ConsoleReceiveParamHexUint16+0x72>
				{
			if (COMMAND_SUCCESS == result) {
 80006e4:	7ffb      	ldrb	r3, [r7, #31]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10d      	bne.n	8000706 <ConsoleReceiveParamHexUint16+0x56>
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i],
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	4413      	add	r3, r2
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f107 0217 	add.w	r2, r7, #23
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f820 	bl	8000742 <ConsoleUtilHexCharToInt>
 8000702:	4603      	mov	r3, r0
 8000704:	77fb      	strb	r3, [r7, #31]
						&tmpUint8);
			}
			if (COMMAND_SUCCESS == result) {
 8000706:	7ffb      	ldrb	r3, [r7, #31]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d107      	bne.n	800071c <ConsoleReceiveParamHexUint16+0x6c>
				value = (value << 4u);
 800070c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	b29a      	uxth	r2, r3
 8000716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000718:	4413      	add	r3, r2
 800071a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (i = 0u; i < 4u; i++)  // U16 must be less than 4 hex digits: 0xFFFF
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	3301      	adds	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9dd      	bls.n	80006e4 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if (COMMAND_PARAMETER_END == result) {
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	2b11      	cmp	r3, #17
 800072c:	d101      	bne.n	8000732 <ConsoleReceiveParamHexUint16+0x82>
			result = COMMAND_SUCCESS;
 800072e:	2300      	movs	r3, #0
 8000730:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000736:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000738:	7ffb      	ldrb	r3, [r7, #31]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <ConsoleUtilHexCharToInt>:

	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t *pInt) {
 8000742:	b480      	push	{r7}
 8000744:	b085      	sub	sp, #20
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	6039      	str	r1, [r7, #0]
 800074c:	71fb      	strb	r3, [r7, #7]
	eCommandResult_T result = COMMAND_SUCCESS;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]

	if (('0' <= charVal) && (charVal <= '9')) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b2f      	cmp	r3, #47	; 0x2f
 8000756:	d908      	bls.n	800076a <ConsoleUtilHexCharToInt+0x28>
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b39      	cmp	r3, #57	; 0x39
 800075c:	d805      	bhi.n	800076a <ConsoleUtilHexCharToInt+0x28>
		*pInt = charVal - '0';
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3b30      	subs	r3, #48	; 0x30
 8000762:	b2da      	uxtb	r2, r3
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e025      	b.n	80007b6 <ConsoleUtilHexCharToInt+0x74>
	} else if (('A' <= charVal) && (charVal <= 'F')) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b40      	cmp	r3, #64	; 0x40
 800076e:	d908      	bls.n	8000782 <ConsoleUtilHexCharToInt+0x40>
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b46      	cmp	r3, #70	; 0x46
 8000774:	d805      	bhi.n	8000782 <ConsoleUtilHexCharToInt+0x40>
		*pInt = 10u + charVal - 'A';
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3b37      	subs	r3, #55	; 0x37
 800077a:	b2da      	uxtb	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e019      	b.n	80007b6 <ConsoleUtilHexCharToInt+0x74>
	} else if (('a' <= charVal) && (charVal <= 'f')) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b60      	cmp	r3, #96	; 0x60
 8000786:	d908      	bls.n	800079a <ConsoleUtilHexCharToInt+0x58>
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b66      	cmp	r3, #102	; 0x66
 800078c:	d805      	bhi.n	800079a <ConsoleUtilHexCharToInt+0x58>
		*pInt = 10u + charVal - 'a';
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	3b57      	subs	r3, #87	; 0x57
 8000792:	b2da      	uxtb	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e00d      	b.n	80007b6 <ConsoleUtilHexCharToInt+0x74>
	} else if (( LF_CHAR != charVal) || ( CR_CHAR != charVal)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b0a      	cmp	r3, #10
 800079e:	d105      	bne.n	80007ac <ConsoleUtilHexCharToInt+0x6a>
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b0d      	cmp	r3, #13
 80007a4:	d102      	bne.n	80007ac <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal)) {
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	d102      	bne.n	80007b2 <ConsoleUtilHexCharToInt+0x70>
		result = COMMAND_PARAMETER_END;
 80007ac:	2311      	movs	r3, #17
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	e001      	b.n	80007b6 <ConsoleUtilHexCharToInt+0x74>

	} else {
		result = COMMAND_PARAMETER_ERROR;
 80007b2:	2310      	movs	r3, #16
 80007b4:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <ConsoleCommandComment>:
		{ "midistats", &ConsoleCommandMidiStats, HELP("Get MIDI tx/rx stats") },
		{ "displayid", &ConsoleCommandDisplayID, HELP("Get chip ID from display controller") },
		CONSOLE_COMMAND_TABLE_END // must be LAST
		};

static eCommandResult_T ConsoleCommandComment(const char buffer[]) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 80007e4:	2300      	movs	r3, #0
 80007e6:	74fb      	strb	r3, [r7, #19]

	IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable)
 80007e8:	2309      	movs	r3, #9
 80007ea:	60fb      	str	r3, [r7, #12]
			/ sizeof(mConsoleCommandTable[0]);
	for (i = 0u; i < tableLength - 1u; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e01e      	b.n	8000830 <ConsoleCommandHelp+0x54>
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 80007f2:	4914      	ldr	r1, [pc, #80]	; (8000844 <ConsoleCommandHelp+0x68>)
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	4613      	mov	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f96a 	bl	8000adc <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <ConsoleCommandHelp+0x6c>)
 800080a:	f000 f967 	bl	8000adc <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	4613      	mov	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	3308      	adds	r3, #8
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <ConsoleCommandHelp+0x68>)
 800081c:	4413      	add	r3, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f95c 	bl	8000adc <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <ConsoleCommandHelp+0x70>)
 8000826:	f000 f959 	bl	8000adc <ConsoleIoSendString>
	for (i = 0u; i < tableLength - 1u; i++) {
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3b01      	subs	r3, #1
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3db      	bcc.n	80007f2 <ConsoleCommandHelp+0x16>
	}
	return result;
 800083a:	7cfb      	ldrb	r3, [r7, #19]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	080079e8 	.word	0x080079e8
 8000848:	08007948 	.word	0x08007948
 800084c:	0800794c 	.word	0x0800794c

08000850 <ConsoleCommandDisplayID>:

static eCommandResult_T ConsoleCommandDisplayID(const char buffer[]) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	test1();
 8000858:	f000 faae 	bl	8000db8 <test1>
}
 800085c:	bf00      	nop
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <ConsoleCommandMidiStats>:


static eCommandResult_T ConsoleCommandMidiStats(const char buffer[]) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	MIDI_Print_Stats();
 800086e:	f000 fd21 	bl	80012b4 <MIDI_Print_Stats>
}
 8000872:	bf00      	nop
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ConsoleCommandMidiNoteOn>:

static eCommandResult_T ConsoleCommandMidiNoteOn(const char buffer[]) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint16_t noteVal;
	eCommandResult_T result;

	result = ConsoleReceiveParamHexUint16(buffer, 1, &noteVal);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	461a      	mov	r2, r3
 800088a:	2101      	movs	r1, #1
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff0f 	bl	80006b0 <ConsoleReceiveParamHexUint16>
 8000892:	4603      	mov	r3, r0
 8000894:	73fb      	strb	r3, [r7, #15]
	if (COMMAND_SUCCESS == result) {
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d106      	bne.n	80008aa <ConsoleCommandMidiNoteOn+0x2e>
		MIDI_Send_NoteOnMsg(1, noteVal, 127);
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	227f      	movs	r2, #127	; 0x7f
 80008a2:	4619      	mov	r1, r3
 80008a4:	2001      	movs	r0, #1
 80008a6:	f000 fb65 	bl	8000f74 <MIDI_Send_NoteOnMsg>
	}
	return result;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ConsoleCommandMidiAllNotesOff>:

static eCommandResult_T ConsoleCommandMidiAllNotesOff(const char buffer[]) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	uint16_t noteVal;
	eCommandResult_T result;

	MIDI_Send_AllNotesOffMsg(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fba3 	bl	8001008 <MIDI_Send_AllNotesOffMsg>
	return COMMAND_SUCCESS;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ConsoleCommandMidiTestSequence>:

static eCommandResult_T ConsoleCommandMidiTestSequence(const char buffer[]) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	uint16_t noteVals[6];
	uint16_t runCount = 10;
 80008d4:	230a      	movs	r3, #10
 80008d6:	82fb      	strh	r3, [r7, #22]
	eCommandResult_T result;

	result = ConsoleReceiveParamInt16(buffer, 1, &noteVals[0]);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	461a      	mov	r2, r3
 80008de:	2101      	movs	r1, #1
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fe87 	bl	80005f4 <ConsoleReceiveParamInt16>
 80008e6:	4603      	mov	r3, r0
 80008e8:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 2, &noteVals[1]);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	3302      	adds	r3, #2
 80008f0:	461a      	mov	r2, r3
 80008f2:	2102      	movs	r1, #2
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe7d 	bl	80005f4 <ConsoleReceiveParamInt16>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	7d3b      	ldrb	r3, [r7, #20]
 8000900:	4313      	orrs	r3, r2
 8000902:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 3, &noteVals[2]);
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	3304      	adds	r3, #4
 800090a:	461a      	mov	r2, r3
 800090c:	2103      	movs	r1, #3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fe70 	bl	80005f4 <ConsoleReceiveParamInt16>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	7d3b      	ldrb	r3, [r7, #20]
 800091a:	4313      	orrs	r3, r2
 800091c:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 4, &noteVals[3]);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	3306      	adds	r3, #6
 8000924:	461a      	mov	r2, r3
 8000926:	2104      	movs	r1, #4
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fe63 	bl	80005f4 <ConsoleReceiveParamInt16>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	7d3b      	ldrb	r3, [r7, #20]
 8000934:	4313      	orrs	r3, r2
 8000936:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 5, &noteVals[4]);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	3308      	adds	r3, #8
 800093e:	461a      	mov	r2, r3
 8000940:	2105      	movs	r1, #5
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe56 	bl	80005f4 <ConsoleReceiveParamInt16>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	7d3b      	ldrb	r3, [r7, #20]
 800094e:	4313      	orrs	r3, r2
 8000950:	753b      	strb	r3, [r7, #20]
	result |= ConsoleReceiveParamInt16(buffer, 6, &noteVals[5]);
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	330a      	adds	r3, #10
 8000958:	461a      	mov	r2, r3
 800095a:	2106      	movs	r1, #6
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe49 	bl	80005f4 <ConsoleReceiveParamInt16>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	7d3b      	ldrb	r3, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	753b      	strb	r3, [r7, #20]

	if (COMMAND_SUCCESS == result) {
 800096c:	7d3b      	ldrb	r3, [r7, #20]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d130      	bne.n	80009d4 <ConsoleCommandMidiTestSequence+0x108>
		uint8_t note_idx = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	757b      	strb	r3, [r7, #21]
		while (runCount--) {
 8000976:	e025      	b.n	80009c4 <ConsoleCommandMidiTestSequence+0xf8>
			note_idx = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	757b      	strb	r3, [r7, #21]
			while (note_idx < 6) {
 800097c:	e01f      	b.n	80009be <ConsoleCommandMidiTestSequence+0xf2>
				MIDI_Send_NoteOnMsg(1, noteVals[note_idx], 127);
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	f107 0218 	add.w	r2, r7, #24
 8000986:	4413      	add	r3, r2
 8000988:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	227f      	movs	r2, #127	; 0x7f
 8000990:	4619      	mov	r1, r3
 8000992:	2001      	movs	r0, #1
 8000994:	f000 faee 	bl	8000f74 <MIDI_Send_NoteOnMsg>
				HAL_Delay(300);
 8000998:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099c:	f001 fb44 	bl	8002028 <HAL_Delay>
				MIDI_Send_NoteOffMsg(1, noteVals[note_idx]);
 80009a0:	7d7b      	ldrb	r3, [r7, #21]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	f107 0218 	add.w	r2, r7, #24
 80009a8:	4413      	add	r3, r2
 80009aa:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 faf7 	bl	8000fa6 <MIDI_Send_NoteOffMsg>

				note_idx++;
 80009b8:	7d7b      	ldrb	r3, [r7, #21]
 80009ba:	3301      	adds	r3, #1
 80009bc:	757b      	strb	r3, [r7, #21]
			while (note_idx < 6) {
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d9dc      	bls.n	800097e <ConsoleCommandMidiTestSequence+0xb2>
		while (runCount--) {
 80009c4:	8afb      	ldrh	r3, [r7, #22]
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	82fa      	strh	r2, [r7, #22]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1d4      	bne.n	8000978 <ConsoleCommandMidiTestSequence+0xac>
			}
		}
		MIDI_Send_AllNotesOffMsg(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fb1a 	bl	8001008 <MIDI_Send_AllNotesOffMsg>
	}
	return result;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <ConsoleCommandVer>:


static eCommandResult_T ConsoleCommandVer(const char buffer[]) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

	IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <ConsoleCommandVer+0x24>)
 80009ee:	f000 f875 	bl	8000adc <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <ConsoleCommandVer+0x28>)
 80009f4:	f000 f872 	bl	8000adc <ConsoleIoSendString>
	return result;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08007950 	.word	0x08007950
 8000a08:	0800794c 	.word	0x0800794c

08000a0c <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <ConsoleCommandsGetTable+0x10>)
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	080079e8 	.word	0x080079e8

08000a20 <getch_noblock>:
typedef int getch_status_t;

#define GOT_CHAR 1
#define NO_CHAR_AVAILABLE 0

static getch_status_t getch_noblock(char *c) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(con_uart, (uint8_t*) c, 1, 1) == HAL_OK) {
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <getch_noblock+0x38>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	f004 fb7a 	bl	800512a <HAL_UART_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d108      	bne.n	8000a4e <getch_noblock+0x2e>

		// Echo
		HAL_UART_Transmit(con_uart, (uint8_t*) c, 1, 1);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <getch_noblock+0x38>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	2301      	movs	r3, #1
 8000a42:	2201      	movs	r2, #1
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	f004 fadd 	bl	8005004 <HAL_UART_Transmit>
		return GOT_CHAR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <getch_noblock+0x30>
	}
	return NO_CHAR_AVAILABLE;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001f8 	.word	0x200001f8

08000a5c <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *uart) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	// ASSERT(uart != NULL);
	con_uart = uart;
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <ConsoleIoInit+0x1c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
	return CONSOLE_SUCCESS;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	200001f8 	.word	0x200001f8

08000a7c <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength,
		uint32_t *readLength) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	77fb      	strb	r3, [r7, #31]
	char ch;
	getch_status_t status = GOT_CHAR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]

	if (getch_noblock(&ch) == GOT_CHAR) {
 8000a90:	f107 0317 	add.w	r3, r7, #23
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffc3 	bl	8000a20 <getch_noblock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d118      	bne.n	8000ad2 <ConsoleIoReceive+0x56>
		while ((status == GOT_CHAR) && (i < bufferLength)) {
 8000aa0:	e00d      	b.n	8000abe <ConsoleIoReceive+0x42>
			buffer[i] = (uint8_t) ch;
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7dfa      	ldrb	r2, [r7, #23]
 8000aaa:	701a      	strb	r2, [r3, #0]
			i++;
 8000aac:	7ffb      	ldrb	r3, [r7, #31]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	77fb      	strb	r3, [r7, #31]
			status = getch_noblock(&ch);
 8000ab2:	f107 0317 	add.w	r3, r7, #23
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffb2 	bl	8000a20 <getch_noblock>
 8000abc:	61b8      	str	r0, [r7, #24]
		while ((status == GOT_CHAR) && (i < bufferLength)) {
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d103      	bne.n	8000acc <ConsoleIoReceive+0x50>
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8ea      	bhi.n	8000aa2 <ConsoleIoReceive+0x26>
		}
		*readLength = i;
 8000acc:	7ffa      	ldrb	r2, [r7, #31]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	}
	return CONSOLE_SUCCESS;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ConsoleIoSendString>:
	printf("%s", (char*) buffer);
	*sentLength = bufferLength;
	return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <ConsoleIoSendString+0x1c>)
 8000ae8:	f005 ff42 	bl	8006970 <iprintf>
	return CONSOLE_SUCCESS;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08007968 	.word	0x08007968

08000afc <ST7735_Select>:
		ST77XX_DISPON, ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
		100 };                        //     100 ms delay


void ST7735_Select(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	4802      	ldr	r0, [pc, #8]	; (8000b10 <ST7735_Select+0x14>)
 8000b08:	f001 fd8a 	bl	8002620 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	48000400 	.word	0x48000400

08000b14 <ST7735_Deselect>:

void ST7735_Deselect(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	4802      	ldr	r0, [pc, #8]	; (8000b28 <ST7735_Deselect+0x14>)
 8000b20:	f001 fd7e 	bl	8002620 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48000400 	.word	0x48000400

08000b2c <ST7735_Cmd_Write>:


void ST7735_Cmd_Write(const uint8_t cmd, const uint8_t *args, uint8_t num_args)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]


	// Set command mode
	HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <ST7735_Cmd_Write+0x58>)
 8000b44:	f001 fd6c 	bl	8002620 <HAL_GPIO_WritePin>

	// Send command
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 25);
 8000b48:	1df9      	adds	r1, r7, #7
 8000b4a:	2319      	movs	r3, #25
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <ST7735_Cmd_Write+0x5c>)
 8000b50:	f003 ff87 	bl	8004a62 <HAL_SPI_Transmit>

	// Set data mode
	if ((args != NULL) && (num_args > 0)) {
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00f      	beq.n	8000b7a <ST7735_Cmd_Write+0x4e>
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00c      	beq.n	8000b7a <ST7735_Cmd_Write+0x4e>
		HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <ST7735_Cmd_Write+0x58>)
 8000b68:	f001 fd5a 	bl	8002620 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, args, num_args, 25);
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	2319      	movs	r3, #25
 8000b72:	6839      	ldr	r1, [r7, #0]
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <ST7735_Cmd_Write+0x5c>)
 8000b76:	f003 ff74 	bl	8004a62 <HAL_SPI_Transmit>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	48000400 	.word	0x48000400
 8000b88:	20000c70 	.word	0x20000c70

08000b8c <ST7735_Cmd_List_Send>:

void ST7735_Cmd_List_Send(const uint8_t *cmd_list) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	uint8_t num_commands, cmd, num_args, cmd_index = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]

	num_commands = cmd_list[cmd_index];
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	73fb      	strb	r3, [r7, #15]
	cmd_index++;
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73bb      	strb	r3, [r7, #14]

	while (num_commands--) {
 8000ba8:	e03c      	b.n	8000c24 <ST7735_Cmd_List_Send+0x98>
		uint16_t delay_ms;
		cmd = cmd_list[cmd_index];
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	72fb      	strb	r3, [r7, #11]
		cmd_index++;
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	73bb      	strb	r3, [r7, #14]

		num_args = cmd_list[cmd_index];
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	72bb      	strb	r3, [r7, #10]
		cmd_index++;
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73bb      	strb	r3, [r7, #14]

		delay_ms = num_args & ST_CMD_DELAY;
 8000bca:	7abb      	ldrb	r3, [r7, #10]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	81bb      	strh	r3, [r7, #12]
		num_args &= ~ST_CMD_DELAY;
 8000bd4:	7abb      	ldrb	r3, [r7, #10]
 8000bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bda:	72bb      	strb	r3, [r7, #10]
		ST7735_Cmd_Write(cmd, &cmd_list[cmd_index], num_args);
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	18d1      	adds	r1, r2, r3
 8000be2:	7aba      	ldrb	r2, [r7, #10]
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffa0 	bl	8000b2c <ST7735_Cmd_Write>

		if (num_args) {
 8000bec:	7abb      	ldrb	r3, [r7, #10]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <ST7735_Cmd_List_Send+0x6e>
			cmd_index += num_args;
 8000bf2:	7bba      	ldrb	r2, [r7, #14]
 8000bf4:	7abb      	ldrb	r3, [r7, #10]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	73bb      	strb	r3, [r7, #14]
		}

		if (delay_ms) {
 8000bfa:	89bb      	ldrh	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d011      	beq.n	8000c24 <ST7735_Cmd_List_Send+0x98>
			delay_ms = cmd_list[cmd_index];
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	81bb      	strh	r3, [r7, #12]
			cmd_index++;
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	73bb      	strb	r3, [r7, #14]
			if (delay_ms == 255) {
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	2bff      	cmp	r3, #255	; 0xff
 8000c14:	d102      	bne.n	8000c1c <ST7735_Cmd_List_Send+0x90>
				delay_ms = 500;
 8000c16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c1a:	81bb      	strh	r3, [r7, #12]
			}
			HAL_Delay(delay_ms);
 8000c1c:	89bb      	ldrh	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fa02 	bl	8002028 <HAL_Delay>
	while (num_commands--) {
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	73fa      	strb	r2, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1bd      	bne.n	8000baa <ST7735_Cmd_List_Send+0x1e>
		}
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000c36:	b590      	push	{r4, r7, lr}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	461a      	mov	r2, r3
 8000c44:	4623      	mov	r3, r4
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71bb      	strb	r3, [r7, #6]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	717b      	strb	r3, [r7, #5]
 8000c50:	4613      	mov	r3, r2
 8000c52:	713b      	strb	r3, [r7, #4]
    // column address set
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	737b      	strb	r3, [r7, #13]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73bb      	strb	r3, [r7, #14]
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	73fb      	strb	r3, [r7, #15]
    ST7735_Cmd_Write(ST77XX_CASET, data, 4);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2204      	movs	r2, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	202a      	movs	r0, #42	; 0x2a
 8000c6e:	f7ff ff5d 	bl	8000b2c <ST7735_Cmd_Write>

    // row address set
    data[1] = y0 + ST7735_YSTART;
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000c76:	793b      	ldrb	r3, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
    ST7735_Cmd_Write(ST77XX_RASET, data, 4);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	202b      	movs	r0, #43	; 0x2b
 8000c84:	f7ff ff52 	bl	8000b2c <ST7735_Cmd_Write>

    // write to RAM
    ST7735_Cmd_Write(ST77XX_RAMWR, NULL, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	202c      	movs	r0, #44	; 0x2c
 8000c8e:	f7ff ff4d 	bl	8000b2c <ST7735_Cmd_Write>
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
	...

08000c9c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4623      	mov	r3, r4
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	807b      	strh	r3, [r7, #2]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_TFTWIDTH_128) || (y >= ST7735_TFTHEIGHT_160)) return;
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cbe:	d860      	bhi.n	8000d82 <ST7735_FillRectangle+0xe6>
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	2b9f      	cmp	r3, #159	; 0x9f
 8000cc4:	d85d      	bhi.n	8000d82 <ST7735_FillRectangle+0xe6>
    if((x + w - 1) >= ST7735_TFTWIDTH_128) w = ST7735_TFTWIDTH_128 - x;
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	4413      	add	r3, r2
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd0:	dd03      	ble.n	8000cda <ST7735_FillRectangle+0x3e>
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000cd8:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_TFTHEIGHT_160) h = ST7735_TFTHEIGHT_160 - y;
 8000cda:	88ba      	ldrh	r2, [r7, #4]
 8000cdc:	883b      	ldrh	r3, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	2b9f      	cmp	r3, #159	; 0x9f
 8000ce4:	dd03      	ble.n	8000cee <ST7735_FillRectangle+0x52>
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000cec:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cee:	f7ff ff05 	bl	8000afc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	b2d9      	uxtb	r1, r3
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b2dc      	uxtb	r4, r3
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	883b      	ldrh	r3, [r7, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	3b01      	subs	r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f7ff ff8b 	bl	8000c36 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d20:	8c3b      	ldrh	r3, [r7, #32]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	733b      	strb	r3, [r7, #12]
 8000d2a:	8c3b      	ldrh	r3, [r7, #32]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, CMD_DATA_PIN, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <ST7735_FillRectangle+0xf0>)
 8000d38:	f001 fc72 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CS_PIN, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <ST7735_FillRectangle+0xf0>)
 8000d44:	f001 fc6c 	bl	8002620 <HAL_GPIO_WritePin>

    for(y = h; y > 0; y--) {
 8000d48:	883b      	ldrh	r3, [r7, #0]
 8000d4a:	80bb      	strh	r3, [r7, #4]
 8000d4c:	e013      	b.n	8000d76 <ST7735_FillRectangle+0xda>
        for(x = w; x > 0; x--) {
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	e00a      	b.n	8000d6a <ST7735_FillRectangle+0xce>
            HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8000d54:	f107 010c 	add.w	r1, r7, #12
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <ST7735_FillRectangle+0xf4>)
 8000d60:	f003 fe7f 	bl	8004a62 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f1      	bne.n	8000d54 <ST7735_FillRectangle+0xb8>
    for(y = h; y > 0; y--) {
 8000d70:	88bb      	ldrh	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1e8      	bne.n	8000d4e <ST7735_FillRectangle+0xb2>
        }
    }
    ST7735_Deselect();
 8000d7c:	f7ff feca 	bl	8000b14 <ST7735_Deselect>
 8000d80:	e000      	b.n	8000d84 <ST7735_FillRectangle+0xe8>
    if((x >= ST7735_TFTWIDTH_128) || (y >= ST7735_TFTHEIGHT_160)) return;
 8000d82:	bf00      	nop
}
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	20000c70 	.word	0x20000c70

08000d94 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, color);
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff77 	bl	8000c9c <ST7735_FillRectangle>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <test1>:

void test1(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

	// Select
	ST7735_Select();
 8000dbc:	f7ff fe9e 	bl	8000afc <ST7735_Select>

	// Reset
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <test1+0x64>)
 8000dc8:	f001 fc2a 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	f001 f92b 	bl	8002028 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <test1+0x64>)
 8000dda:	f001 fc21 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f001 f922 	bl	8002028 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, RST_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <test1+0x64>)
 8000dec:	f001 fc18 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000df0:	20c8      	movs	r0, #200	; 0xc8
 8000df2:	f001 f919 	bl	8002028 <HAL_Delay>

	HAL_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f001 f916 	bl	8002028 <HAL_Delay>

	ST7735_Cmd_List_Send(ST7735R_Init1);
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <test1+0x68>)
 8000dfe:	f7ff fec5 	bl	8000b8c <ST7735_Cmd_List_Send>
	ST7735_Cmd_List_Send(ST7735R_Init2);
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <test1+0x6c>)
 8000e04:	f7ff fec2 	bl	8000b8c <ST7735_Cmd_List_Send>
	ST7735_Cmd_List_Send(ST7735R_Init3);
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <test1+0x70>)
 8000e0a:	f7ff febf 	bl	8000b8c <ST7735_Cmd_List_Send>

    ST7735_FillScreen(ST7735_BLACK);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ffc0 	bl	8000d94 <ST7735_FillScreen>
    ST7735_Deselect();
 8000e14:	f7ff fe7e 	bl	8000b14 <ST7735_Deselect>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	48001400 	.word	0x48001400
 8000e20:	08007c70 	.word	0x08007c70
 8000e24:	08007cac 	.word	0x08007cac
 8000e28:	08007cbc 	.word	0x08007cbc

08000e2c <midi_compose_first_byte>:

typedef enum {
	AllNotesOff = 0x7B,
} midi_cc_e;

static inline uint8_t midi_compose_first_byte(uint8_t channel, uint8_t command) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	return((command & 0xf0) | ((channel - 1) & 0x0f));
 8000e3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <MIDI_Init>:
    uint16_t hal_errors;
    HAL_StatusTypeDef last_hal_error;
} stats = { 0, 0, 0, 0, 0, 0};

MIDI_error_t MIDI_Init(UART_HandleTypeDef *in_uart, UART_HandleTypeDef *out_uart)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	config.UART_in = in_uart;
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
	config.UART_out = out_uart;
 8000e78:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6053      	str	r3, [r2, #4]

	// Create ring buffers
	config.midi_rx_ring.data = midi_rx_data_buf;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e80:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MIDI_Init+0x70>)
 8000e82:	609a      	str	r2, [r3, #8]
	config.midi_rx_ring.read_pos = 0;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	81da      	strh	r2, [r3, #14]
	config.midi_rx_ring.write_pos = 0;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	821a      	strh	r2, [r3, #16]
	config.midi_rx_ring.size = MIDI_BUFFER_SIZE;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	819a      	strh	r2, [r3, #12]

	config.midi_tx_ring.data = midi_tx_data_buf;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MIDI_Init+0x6c>)
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <MIDI_Init+0x74>)
 8000e9c:	615a      	str	r2, [r3, #20]
	config.midi_tx_ring.read_pos = 0;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MIDI_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	835a      	strh	r2, [r3, #26]
	config.midi_tx_ring.write_pos = 0;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MIDI_Init+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	839a      	strh	r2, [r3, #28]
	config.midi_tx_ring.size = MIDI_BUFFER_SIZE;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MIDI_Init+0x6c>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb0:	831a      	strh	r2, [r3, #24]

	state.last_status = 0;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MIDI_Init+0x78>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	70da      	strb	r2, [r3, #3]
	state.inited = true;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MIDI_Init+0x78>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
	state.last_tx_complete = true;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MIDI_Init+0x78>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	705a      	strb	r2, [r3, #1]
	return MIDI_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001fc 	.word	0x200001fc
 8000ed8:	2000022c 	.word	0x2000022c
 8000edc:	2000062c 	.word	0x2000062c
 8000ee0:	20000a2c 	.word	0x20000a2c

08000ee4 <MIDI_Send_RawChannelMsg>:

MIDI_error_t MIDI_Send_RawChannelMsg(uint8_t command,
                          uint8_t channel,
                          uint8_t num_data_bytes,
                          uint8_t *data)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
    uint8_t first;
    HAL_StatusTypeDef tx_status;

    first = midi_compose_first_byte(channel, command);
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff94 	bl	8000e2c <midi_compose_first_byte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73bb      	strb	r3, [r7, #14]

    if (first != state.last_status)
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MIDI_Send_RawChannelMsg+0x88>)
 8000f0a:	78da      	ldrb	r2, [r3, #3]
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d011      	beq.n	8000f36 <MIDI_Send_RawChannelMsg+0x52>
    {
    	tx_status = HAL_UART_Transmit_IT(config.UART_out, &first, 1);
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MIDI_Send_RawChannelMsg+0x8c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f107 010e 	add.w	r1, r7, #14
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 f9d1 	bl	80052c4 <HAL_UART_Transmit_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
    	if (tx_status != HAL_OK) {
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MIDI_Send_RawChannelMsg+0x4c>
    		return MIDI_TIMEOUT;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e018      	b.n	8000f62 <MIDI_Send_RawChannelMsg+0x7e>
    	}
    	state.last_status = first;
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MIDI_Send_RawChannelMsg+0x88>)
 8000f34:	70da      	strb	r2, [r3, #3]
    }

    if (num_data_bytes > 0 && (data != NULL)) {
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d011      	beq.n	8000f60 <MIDI_Send_RawChannelMsg+0x7c>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00e      	beq.n	8000f60 <MIDI_Send_RawChannelMsg+0x7c>
    	tx_status = HAL_UART_Transmit_IT(config.UART_out, data, num_data_bytes);
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MIDI_Send_RawChannelMsg+0x8c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	797a      	ldrb	r2, [r7, #5]
 8000f48:	b292      	uxth	r2, r2
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 f9b9 	bl	80052c4 <HAL_UART_Transmit_IT>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
    	if (tx_status != HAL_OK) {
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MIDI_Send_RawChannelMsg+0x7c>
    		return MIDI_TIMEOUT;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e000      	b.n	8000f62 <MIDI_Send_RawChannelMsg+0x7e>
    	}
    }
    return MIDI_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000a2c 	.word	0x20000a2c
 8000f70:	200001fc 	.word	0x200001fc

08000f74 <MIDI_Send_NoteOnMsg>:

MIDI_error_t MIDI_Send_NoteOnMsg(uint8_t channel, uint8_t note, uint8_t vel)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	717b      	strb	r3, [r7, #5]
	uint8_t msg[2];

	msg[0] = note;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	733b      	strb	r3, [r7, #12]
	msg[1] = vel;
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	737b      	strb	r3, [r7, #13]

	return(MIDI_Send_RawChannelMsg(NoteOn, channel, 2, msg));
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	79f9      	ldrb	r1, [r7, #7]
 8000f94:	2202      	movs	r2, #2
 8000f96:	2090      	movs	r0, #144	; 0x90
 8000f98:	f7ff ffa4 	bl	8000ee4 <MIDI_Send_RawChannelMsg>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <MIDI_Send_NoteOffMsg>:

MIDI_error_t MIDI_Send_NoteOffMsg(uint8_t channel, uint8_t note)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	71bb      	strb	r3, [r7, #6]
	uint8_t msg[1];

	msg[0] = note;
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	733b      	strb	r3, [r7, #12]
	msg[1] = 127;
 8000fba:	237f      	movs	r3, #127	; 0x7f
 8000fbc:	737b      	strb	r3, [r7, #13]
	return(MIDI_Send_RawChannelMsg(NoteOff, channel, 2, msg));
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	79f9      	ldrb	r1, [r7, #7]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	2080      	movs	r0, #128	; 0x80
 8000fc8:	f7ff ff8c 	bl	8000ee4 <MIDI_Send_RawChannelMsg>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <MIDI_Send_CCMsg>:

MIDI_error_t MIDI_Send_CCMsg(uint8_t channel, uint8_t control, uint8_t val)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	71bb      	strb	r3, [r7, #6]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	717b      	strb	r3, [r7, #5]
	uint8_t msg[2];

	msg[0] = control;
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	733b      	strb	r3, [r7, #12]
	msg[1] = val;
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	737b      	strb	r3, [r7, #13]
	return(MIDI_Send_RawChannelMsg(CC, channel, 2, msg));
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	79f9      	ldrb	r1, [r7, #7]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	20b0      	movs	r0, #176	; 0xb0
 8000ffa:	f7ff ff73 	bl	8000ee4 <MIDI_Send_RawChannelMsg>
 8000ffe:	4603      	mov	r3, r0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <MIDI_Send_AllNotesOffMsg>:

MIDI_error_t MIDI_Send_AllNotesOffMsg(uint8_t channel)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	return(MIDI_Send_CCMsg(channel, AllNotesOff, 0));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2200      	movs	r2, #0
 8001016:	217b      	movs	r1, #123	; 0x7b
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffdc 	bl	8000fd6 <MIDI_Send_CCMsg>
 800101e:	4603      	mov	r3, r0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <MIDI_Interrupt_Is_Armed>:

/*
 * MIDI Reception APIs
 */
bool MIDI_Interrupt_Is_Armed(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	return !state.last_rx_arm_failed;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MIDI_Interrupt_Is_Armed+0x28>)
 800102e:	789b      	ldrb	r3, [r3, #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000a2c 	.word	0x20000a2c

08001054 <MIDI_Interrupt_Receive_Begin>:


MIDI_error_t MIDI_Interrupt_Receive_Begin(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_UART_Receive_IT(config.UART_in, midi_interrupt_rx_buf, 1);
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MIDI_Interrupt_Receive_Begin+0x4c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	4910      	ldr	r1, [pc, #64]	; (80010a4 <MIDI_Interrupt_Receive_Begin+0x50>)
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f98a 	bl	800537c <HAL_UART_Receive_IT>
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
	if (halStatus != HAL_OK) {
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <MIDI_Interrupt_Receive_Begin+0x3a>
		stats.hal_errors++;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MIDI_Interrupt_Receive_Begin+0x54>)
 8001074:	895b      	ldrh	r3, [r3, #10]
 8001076:	3301      	adds	r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MIDI_Interrupt_Receive_Begin+0x54>)
 800107c:	815a      	strh	r2, [r3, #10]
		stats.last_hal_error = halStatus;
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <MIDI_Interrupt_Receive_Begin+0x54>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	7313      	strb	r3, [r2, #12]
		state.last_rx_arm_failed = true;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MIDI_Interrupt_Receive_Begin+0x58>)
 8001086:	2201      	movs	r2, #1
 8001088:	709a      	strb	r2, [r3, #2]
		return MIDI_RX_ERROR;
 800108a:	2304      	movs	r3, #4
 800108c:	e003      	b.n	8001096 <MIDI_Interrupt_Receive_Begin+0x42>
	}
	state.last_rx_arm_failed = false;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MIDI_Interrupt_Receive_Begin+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	709a      	strb	r2, [r3, #2]
	return MIDI_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001fc 	.word	0x200001fc
 80010a4:	2000021c 	.word	0x2000021c
 80010a8:	20000a30 	.word	0x20000a30
 80010ac:	20000a2c 	.word	0x20000a2c

080010b0 <MIDI_Interrupt_Receive>:

MIDI_error_t MIDI_Interrupt_Receive(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	eCircularBufferError status;

	stats.rx_count++;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MIDI_Interrupt_Receive+0x48>)
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MIDI_Interrupt_Receive+0x48>)
 80010c0:	809a      	strh	r2, [r3, #4]

	if (state.inited == false) {
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MIDI_Interrupt_Receive+0x4c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MIDI_Interrupt_Receive+0x24>
		return MIDI_NOT_READY;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e00c      	b.n	80010ee <MIDI_Interrupt_Receive+0x3e>
	}
	status = circularBuffer_write_bytes(&config.midi_rx_ring, midi_interrupt_rx_buf, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	490a      	ldr	r1, [pc, #40]	; (8001100 <MIDI_Interrupt_Receive+0x50>)
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <MIDI_Interrupt_Receive+0x54>)
 80010da:	f000 f96a 	bl	80013b2 <circularBuffer_write_bytes>
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if (status != eCircularBufferOk) {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MIDI_Interrupt_Receive+0x3c>
		return MIDI_RX_OVERFLOW;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e000      	b.n	80010ee <MIDI_Interrupt_Receive+0x3e>
	} else {
		return MIDI_OK;
 80010ec:	2300      	movs	r3, #0
	}
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000a30 	.word	0x20000a30
 80010fc:	20000a2c 	.word	0x20000a2c
 8001100:	2000021c 	.word	0x2000021c
 8001104:	20000204 	.word	0x20000204

08001108 <MIDI_Dequeue_Receive>:

MIDI_error_t MIDI_Dequeue_Receive(uint8_t *bytes, uint16_t *len) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	eCircularBufferError status;
	if (state.inited == false) {
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MIDI_Dequeue_Receive+0x4c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MIDI_Dequeue_Receive+0x1c>
			return MIDI_NOT_READY;
 8001120:	2301      	movs	r3, #1
 8001122:	e012      	b.n	800114a <MIDI_Dequeue_Receive+0x42>
	}
	status = circularBuffer_read_bytes(&config.midi_rx_ring, bytes, len);
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <MIDI_Dequeue_Receive+0x50>)
 800112a:	f000 f983 	bl	8001434 <circularBuffer_read_bytes>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
	if (status != eCircularBufferOk) {
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MIDI_Dequeue_Receive+0x34>
		return MIDI_RX_ERROR; // Possibly just nothing left to read.
 8001138:	2304      	movs	r3, #4
 800113a:	e006      	b.n	800114a <MIDI_Dequeue_Receive+0x42>
	}
	stats.dequeues++;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MIDI_Dequeue_Receive+0x54>)
 800113e:	88db      	ldrh	r3, [r3, #6]
 8001140:	3301      	adds	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <MIDI_Dequeue_Receive+0x54>)
 8001146:	80da      	strh	r2, [r3, #6]

	return MIDI_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000a2c 	.word	0x20000a2c
 8001158:	20000204 	.word	0x20000204
 800115c:	20000a30 	.word	0x20000a30

08001160 <MIDI_Interrupt_Transmit_Begin>:

MIDI_error_t MIDI_Interrupt_Transmit_Begin(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	eCircularBufferError status;
	HAL_StatusTypeDef halStatus;
	uint16_t read_len = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	80bb      	strh	r3, [r7, #4]
	uint8_t byte = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	70fb      	strb	r3, [r7, #3]

	if (state.inited == false) {
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MIDI_Interrupt_Transmit_Begin+0x74>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MIDI_Interrupt_Transmit_Begin+0x20>
			return MIDI_NOT_READY;
 800117c:	2301      	movs	r3, #1
 800117e:	e025      	b.n	80011cc <MIDI_Interrupt_Transmit_Begin+0x6c>
	}
	status = circularBuffer_read_bytes(&config.midi_tx_ring, &byte, &read_len);
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	1cfb      	adds	r3, r7, #3
 8001184:	4619      	mov	r1, r3
 8001186:	4814      	ldr	r0, [pc, #80]	; (80011d8 <MIDI_Interrupt_Transmit_Begin+0x78>)
 8001188:	f000 f954 	bl	8001434 <circularBuffer_read_bytes>
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
	if (status != eCircularBufferOk) {
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <MIDI_Interrupt_Transmit_Begin+0x40>
		state.last_tx_complete = true;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MIDI_Interrupt_Transmit_Begin+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	705a      	strb	r2, [r3, #1]
		return MIDI_TX_ERROR;
 800119c:	2305      	movs	r3, #5
 800119e:	e015      	b.n	80011cc <MIDI_Interrupt_Transmit_Begin+0x6c>
	}
	state.last_tx_complete = false;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MIDI_Interrupt_Transmit_Begin+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	705a      	strb	r2, [r3, #1]
	halStatus = HAL_UART_Transmit_IT(config.UART_in, &byte, 1);
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MIDI_Interrupt_Transmit_Begin+0x7c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1cf9      	adds	r1, r7, #3
 80011ac:	2201      	movs	r2, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 f888 	bl	80052c4 <HAL_UART_Transmit_IT>
 80011b4:	4603      	mov	r3, r0
 80011b6:	71bb      	strb	r3, [r7, #6]
	if (halStatus != HAL_OK) {
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <MIDI_Interrupt_Transmit_Begin+0x6a>
		stats.hal_errors++;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MIDI_Interrupt_Transmit_Begin+0x80>)
 80011c0:	895b      	ldrh	r3, [r3, #10]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MIDI_Interrupt_Transmit_Begin+0x80>)
 80011c8:	815a      	strh	r2, [r3, #10]
	}
	return MIDI_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000a2c 	.word	0x20000a2c
 80011d8:	20000210 	.word	0x20000210
 80011dc:	200001fc 	.word	0x200001fc
 80011e0:	20000a30 	.word	0x20000a30

080011e4 <MIDI_Interrupt_Transmit_End>:

MIDI_error_t MIDI_Interrupt_Transmit_End(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if (state.inited == false) {
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MIDI_Interrupt_Transmit_End+0x2c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MIDI_Interrupt_Transmit_End+0x16>
		return MIDI_NOT_READY;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e008      	b.n	800120c <MIDI_Interrupt_Transmit_End+0x28>
	}
	stats.tx_done++;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MIDI_Interrupt_Transmit_End+0x30>)
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	3301      	adds	r3, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <MIDI_Interrupt_Transmit_End+0x30>)
 8001204:	805a      	strh	r2, [r3, #2]
	MIDI_Interrupt_Transmit_Begin(); // Start handling any additional bytes that were added during tx
 8001206:	f7ff ffab 	bl	8001160 <MIDI_Interrupt_Transmit_Begin>
	return MIDI_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000a2c 	.word	0x20000a2c
 8001214:	20000a30 	.word	0x20000a30

08001218 <MIDI_Enqueue_Send>:

MIDI_error_t MIDI_Enqueue_Send(uint8_t *bytes, uint16_t *len) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	eCircularBufferError status;
	if (state.inited == false) {
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MIDI_Enqueue_Send+0x70>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f083 0301 	eor.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MIDI_Enqueue_Send+0x1c>
		return MIDI_NOT_READY;
 8001230:	2301      	movs	r3, #1
 8001232:	e024      	b.n	800127e <MIDI_Enqueue_Send+0x66>
	}

	status = circularBuffer_write_bytes(&config.midi_tx_ring, bytes, *len);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <MIDI_Enqueue_Send+0x74>)
 800123e:	f000 f8b8 	bl	80013b2 <circularBuffer_write_bytes>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
	if (status != eCircularBufferOk) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MIDI_Enqueue_Send+0x38>
		return MIDI_RX_ERROR;
 800124c:	2304      	movs	r3, #4
 800124e:	e016      	b.n	800127e <MIDI_Enqueue_Send+0x66>
	}

	stats.enqueues++;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MIDI_Enqueue_Send+0x78>)
 8001252:	891b      	ldrh	r3, [r3, #8]
 8001254:	3301      	adds	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MIDI_Enqueue_Send+0x78>)
 800125a:	811a      	strh	r2, [r3, #8]

	if (state.last_tx_complete) {
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MIDI_Enqueue_Send+0x70>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <MIDI_Enqueue_Send+0x58>
		state.last_tx_complete = false;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MIDI_Enqueue_Send+0x70>)
 8001266:	2200      	movs	r2, #0
 8001268:	705a      	strb	r2, [r3, #1]
		MIDI_Interrupt_Transmit_Begin();
 800126a:	f7ff ff79 	bl	8001160 <MIDI_Interrupt_Transmit_Begin>
 800126e:	e005      	b.n	800127c <MIDI_Enqueue_Send+0x64>
	} else {
		stats.tx_waits++;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MIDI_Enqueue_Send+0x78>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MIDI_Enqueue_Send+0x78>)
 800127a:	801a      	strh	r2, [r3, #0]
	}
	return MIDI_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000a2c 	.word	0x20000a2c
 800128c:	20000210 	.word	0x20000210
 8001290:	20000a30 	.word	0x20000a30

08001294 <MIDI_Log_Error>:

void MIDI_Log_Error(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	stats.hal_errors++;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <MIDI_Log_Error+0x1c>)
 800129a:	895b      	ldrh	r3, [r3, #10]
 800129c:	3301      	adds	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <MIDI_Log_Error+0x1c>)
 80012a2:	815a      	strh	r2, [r3, #10]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000a30 	.word	0x20000a30

080012b4 <MIDI_Print_Stats>:

void MIDI_Print_Stats(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	printf("rx_count: %d\r\n", stats.rx_count);
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012ba:	889b      	ldrh	r3, [r3, #4]
 80012bc:	4619      	mov	r1, r3
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <MIDI_Print_Stats+0x60>)
 80012c0:	f005 fb56 	bl	8006970 <iprintf>
	printf("tx_done: %d\r\n", stats.tx_done);
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012c6:	885b      	ldrh	r3, [r3, #2]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4813      	ldr	r0, [pc, #76]	; (8001318 <MIDI_Print_Stats+0x64>)
 80012cc:	f005 fb50 	bl	8006970 <iprintf>
	printf("tx_waits: %d\r\n", stats.tx_waits);
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MIDI_Print_Stats+0x68>)
 80012d8:	f005 fb4a 	bl	8006970 <iprintf>
	printf("dequeues: %d\r\n", stats.dequeues);
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012de:	88db      	ldrh	r3, [r3, #6]
 80012e0:	4619      	mov	r1, r3
 80012e2:	480f      	ldr	r0, [pc, #60]	; (8001320 <MIDI_Print_Stats+0x6c>)
 80012e4:	f005 fb44 	bl	8006970 <iprintf>
	printf("enqueues: %d\r\n", stats.enqueues);
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MIDI_Print_Stats+0x70>)
 80012f0:	f005 fb3e 	bl	8006970 <iprintf>
	printf("HAL errors: %d\r\n", stats.hal_errors);
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MIDI_Print_Stats+0x5c>)
 80012f6:	895b      	ldrh	r3, [r3, #10]
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <MIDI_Print_Stats+0x74>)
 80012fc:	f005 fb38 	bl	8006970 <iprintf>
	printf("Last HAL error: %d\r\n", stats.last_hal_error);
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <MIDI_Print_Stats+0x5c>)
 8001302:	7b1b      	ldrb	r3, [r3, #12]
 8001304:	4619      	mov	r1, r3
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <MIDI_Print_Stats+0x78>)
 8001308:	f005 fb32 	bl	8006970 <iprintf>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000a30 	.word	0x20000a30
 8001314:	0800796c 	.word	0x0800796c
 8001318:	0800797c 	.word	0x0800797c
 800131c:	0800798c 	.word	0x0800798c
 8001320:	0800799c 	.word	0x0800799c
 8001324:	080079ac 	.word	0x080079ac
 8001328:	080079bc 	.word	0x080079bc
 800132c:	080079d0 	.word	0x080079d0

08001330 <buffer_is_valid>:
 */

#include <stddef.h>
#include "circular_buffer.h"

static inline eCircularBufferError buffer_is_valid(circular_buffer_t *cb) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	// Check proper initialization
	if ((cb->data == NULL) || (cb->size == 0) || (cb->size & 0x01)) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <buffer_is_valid+0x24>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	889b      	ldrh	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <buffer_is_valid+0x24>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	889b      	ldrh	r3, [r3, #4]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <buffer_is_valid+0x28>
		return eCircularBufferNotValid;
 8001354:	2303      	movs	r3, #3
 8001356:	e000      	b.n	800135a <buffer_is_valid+0x2a>
	}
	return eCircularBufferOk;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <circularBuffer_get_length>:

eCircularBufferError circularBuffer_get_length(circular_buffer_t *cb, uint16_t *length) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]

	if ((buffer_is_valid(cb) == eCircularBufferOk) && (length != NULL)) {
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffdd 	bl	8001330 <buffer_is_valid>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d115      	bne.n	80013a8 <circularBuffer_get_length+0x42>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d012      	beq.n	80013a8 <circularBuffer_get_length+0x42>
		*length = (cb->write_pos - cb->read_pos) & (cb->size - 1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	891a      	ldrh	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	88db      	ldrh	r3, [r3, #6]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21a      	sxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	3b01      	subs	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	b21b      	sxth	r3, r3
 800139a:	4013      	ands	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	801a      	strh	r2, [r3, #0]
		return eCircularBufferOk;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <circularBuffer_get_length+0x44>
	}
	return eCircularBufferNotValid;
 80013a8:	2303      	movs	r3, #3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <circularBuffer_write_bytes>:

eCircularBufferError circularBuffer_write_bytes(circular_buffer_t *cb, uint8_t *data, uint16_t len) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	4613      	mov	r3, r2
 80013be:	80fb      	strh	r3, [r7, #6]
	uint16_t curr_length = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	82bb      	strh	r3, [r7, #20]
	eCircularBufferError status;

	status = circularBuffer_get_length(cb, &curr_length);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ffcb 	bl	8001366 <circularBuffer_get_length>
 80013d0:	4603      	mov	r3, r0
 80013d2:	75fb      	strb	r3, [r7, #23]
	if (status == eCircularBufferOk) {
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d127      	bne.n	800142a <circularBuffer_write_bytes+0x78>
		if (curr_length == (cb->size - len)) {
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	461a      	mov	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	889b      	ldrh	r3, [r3, #4]
 80013e2:	4619      	mov	r1, r3
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	1acb      	subs	r3, r1, r3
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d101      	bne.n	80013f0 <circularBuffer_write_bytes+0x3e>
			return eCircularBufferFull; // Can't fit!
 80013ec:	2301      	movs	r3, #1
 80013ee:	e01d      	b.n	800142c <circularBuffer_write_bytes+0x7a>
		}

		memcpy(&cb->data[cb->write_pos], data, len);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	8912      	ldrh	r2, [r2, #8]
 80013f8:	4413      	add	r3, r2
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 faa2 	bl	8006948 <memcpy>
		cb->write_pos = (cb->write_pos + len) & (cb->size - len); // Atomic?
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	891a      	ldrh	r2, [r3, #8]
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	b21a      	sxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8899      	ldrh	r1, [r3, #4]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21b      	sxth	r3, r3
 800141c:	4013      	ands	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	811a      	strh	r2, [r3, #8]
		return eCircularBufferOk;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <circularBuffer_write_bytes+0x7a>
	} else {
		return status;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <circularBuffer_read_bytes>:

eCircularBufferError circularBuffer_read_bytes(circular_buffer_t *cb, uint8_t *data, uint16_t *read_len) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	uint16_t curr_length = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	82bb      	strh	r3, [r7, #20]
	eCircularBufferError status;

	status = circularBuffer_get_length(cb, &curr_length);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff ff8b 	bl	8001366 <circularBuffer_get_length>
 8001450:	4603      	mov	r3, r0
 8001452:	75fb      	strb	r3, [r7, #23]
	if (status == eCircularBufferOk) {
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d12c      	bne.n	80014b4 <circularBuffer_read_bytes+0x80>
		if (curr_length == 0) {
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <circularBuffer_read_bytes+0x30>
			return eCircularBufferEmpty;
 8001460:	2302      	movs	r3, #2
 8001462:	e028      	b.n	80014b6 <circularBuffer_read_bytes+0x82>
		}

		if (curr_length < *read_len) { // Underflow, read as many bytes as we can
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	881a      	ldrh	r2, [r3, #0]
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d902      	bls.n	8001474 <circularBuffer_read_bytes+0x40>
			*read_len = curr_length;
 800146e:	8aba      	ldrh	r2, [r7, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	801a      	strh	r2, [r3, #0]
		}
		memcpy(data, &cb->data[cb->read_pos], *read_len);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	88d2      	ldrh	r2, [r2, #6]
 800147c:	1899      	adds	r1, r3, r2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f005 fa5f 	bl	8006948 <memcpy>
		cb->read_pos = (cb->read_pos + *read_len) & (cb->size - *read_len);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	88da      	ldrh	r2, [r3, #6]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8899      	ldrh	r1, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	1acb      	subs	r3, r1, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4013      	ands	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	80da      	strh	r2, [r3, #6]
		return eCircularBufferOk;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e000      	b.n	80014b6 <circularBuffer_read_bytes+0x82>
	} else {
		return status;
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
	}
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *outgoing, int len) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart3, outgoing, len, 100);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <_write+0x24>)
 80014d6:	f003 fd95 	bl	8005004 <HAL_UART_Transmit>
   return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000b50 	.word	0x20000b50

080014e8 <_read>:

int _read(int file, char *result, size_t len) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    int retcode = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

    if (len != 0) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <_read+0x3c>
        status = HAL_UART_Receive( &huart3, (uint8_t *) result, len, HAL_MAX_DELAY);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29a      	uxth	r2, r3
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	4809      	ldr	r0, [pc, #36]	; (8001530 <_read+0x48>)
 800150a:	f003 fe0e 	bl	800512a <HAL_UART_Receive>
 800150e:	4603      	mov	r3, r0
 8001510:	74fb      	strb	r3, [r7, #19]

        if (status == HAL_OK) {
 8001512:	7cfb      	ldrb	r3, [r7, #19]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_read+0x36>
            retcode = len;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e002      	b.n	8001524 <_read+0x3c>
        } else {
            retcode = -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	617b      	str	r3, [r7, #20]
        }
    }
    return( retcode);
 8001524:	697b      	ldr	r3, [r7, #20]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000b50 	.word	0x20000b50

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001538:	f000 fd10 	bl	8001f5c <HAL_Init>

  /* USER CODE BEGIN Init */
  MIDI_Init(&huart1, &huart1);
 800153c:	490f      	ldr	r1, [pc, #60]	; (800157c <main+0x48>)
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <main+0x48>)
 8001540:	f7ff fc92 	bl	8000e68 <MIDI_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001544:	f000 f81e 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001548:	f000 f9a2 	bl	8001890 <MX_GPIO_Init>
  MX_RTC_Init();
 800154c:	f000 f886 	bl	800165c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001550:	f000 f948 	bl	80017e4 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8001554:	f000 f976 	bl	8001844 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8001558:	f000 f8e4 	bl	8001724 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800155c:	f000 f912 	bl	8001784 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001560:	f000 f8a2 	bl	80016a8 <MX_SPI1_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  test1();
 8001564:	f7ff fc28 	bl	8000db8 <test1>
  ConsoleInit(&huart3);
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <main+0x4c>)
 800156a:	f7fe ff31 	bl	80003d0 <ConsoleInit>
  MIDI_Interrupt_Receive_Begin();
 800156e:	f7ff fd71 	bl	8001054 <MIDI_Interrupt_Receive_Begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MIDI_Application_Process();
 8001572:	f000 fa84 	bl	8001a7e <MIDI_Application_Process>
	ConsoleProcess();
 8001576:	f7fe ff5b 	bl	8000430 <ConsoleProcess>
  {
 800157a:	e7fa      	b.n	8001572 <main+0x3e>
 800157c:	20000bd0 	.word	0x20000bd0
 8001580:	20000b50 	.word	0x20000b50

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0a6      	sub	sp, #152	; 0x98
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f9e3 	bl	800695e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2258      	movs	r2, #88	; 0x58
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 f9d5 	bl	800695e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015b4:	2309      	movs	r3, #9
 80015b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fd59 	bl	80030a0 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015f4:	f000 fa3c 	bl	8001a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fc59 	bl	8003ecc <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001620:	f000 fa26 	bl	8001a70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <SystemClock_Config+0xd4>)
 8001626:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800163a:	2300      	movs	r3, #0
 800163c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fe79 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800164c:	f000 fa10 	bl	8001a70 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3798      	adds	r7, #152	; 0x98
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	00030007 	.word	0x00030007

0800165c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_RTC_Init+0x44>)
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <MX_RTC_Init+0x48>)
 8001664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_RTC_Init+0x44>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_RTC_Init+0x44>)
 800166e:	227f      	movs	r2, #127	; 0x7f
 8001670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_RTC_Init+0x44>)
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_RTC_Init+0x44>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_RTC_Init+0x44>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_RTC_Init+0x44>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_RTC_Init+0x44>)
 800168c:	f003 f872 	bl	8004774 <HAL_RTC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001696:	f000 f9eb 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000c50 	.word	0x20000c50
 80016a4:	40002800 	.word	0x40002800

080016a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_SPI1_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <MX_SPI1_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_SPI1_Init+0x74>)
 80016b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_SPI1_Init+0x74>)
 80016bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_SPI1_Init+0x74>)
 80016c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_SPI1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_SPI1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_SPI1_Init+0x74>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_SPI1_Init+0x74>)
 80016e0:	2220      	movs	r2, #32
 80016e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <MX_SPI1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <MX_SPI1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_SPI1_Init+0x74>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <MX_SPI1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_SPI1_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_SPI1_Init+0x74>)
 800170a:	f003 f918 	bl	800493e <HAL_SPI_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001714:	f000 f9ac 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000c70 	.word	0x20000c70
 8001720:	40013000 	.word	0x40013000

08001724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_USART1_UART_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <MX_USART1_UART_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001730:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_USART1_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_USART1_UART_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USART1_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_USART1_UART_Init+0x58>)
 8001768:	f003 fbfe 	bl	8004f68 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f97d 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000bd0 	.word	0x20000bd0
 8001780:	40013800 	.word	0x40013800

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <MX_USART2_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001790:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x58>)
 80017c8:	f003 fbce 	bl	8004f68 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f000 f94d 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000cd4 	.word	0x20000cd4
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_USART3_UART_Init+0x5c>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80017f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART3_UART_Init+0x58>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001828:	f003 fb9e 	bl	8004f68 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 f91d 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000b50 	.word	0x20000b50
 8001840:	40004800 	.word	0x40004800

08001844 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_USB_PCD_Init+0x44>)
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <MX_USB_PCD_Init+0x48>)
 800184c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USB_PCD_Init+0x44>)
 8001850:	2208      	movs	r2, #8
 8001852:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USB_PCD_Init+0x44>)
 8001856:	2202      	movs	r2, #2
 8001858:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USB_PCD_Init+0x44>)
 800185c:	2202      	movs	r2, #2
 800185e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USB_PCD_Init+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USB_PCD_Init+0x44>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USB_PCD_Init+0x44>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USB_PCD_Init+0x44>)
 8001874:	f000 feec 	bl	8002650 <HAL_PCD_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800187e:	f000 f8f7 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000d54 	.word	0x20000d54
 800188c:	40005c00 	.word	0x40005c00

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b5b      	ldr	r3, [pc, #364]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a5a      	ldr	r2, [pc, #360]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <MX_GPIO_Init+0x184>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <MX_GPIO_Init+0x184>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <MX_GPIO_Init+0x184>)
 800190c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_GPIO_Init+0x184>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <MX_GPIO_Init+0x184>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <MX_GPIO_Init+0x184>)
 8001924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <MX_GPIO_Init+0x184>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8 
 8001936:	2200      	movs	r2, #0
 8001938:	f244 3181 	movw	r1, #17281	; 0x4381
 800193c:	4836      	ldr	r0, [pc, #216]	; (8001a18 <MX_GPIO_Init+0x188>)
 800193e:	f000 fe6f 	bl	8002620 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	4834      	ldr	r0, [pc, #208]	; (8001a1c <MX_GPIO_Init+0x18c>)
 800194a:	f000 fe69 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001954:	4832      	ldr	r0, [pc, #200]	; (8001a20 <MX_GPIO_Init+0x190>)
 8001956:	f000 fe63 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2140      	movs	r1, #64	; 0x40
 800195e:	4831      	ldr	r0, [pc, #196]	; (8001a24 <MX_GPIO_Init+0x194>)
 8001960:	f000 fe5e 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <MX_GPIO_Init+0x198>)
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	482c      	ldr	r0, [pc, #176]	; (8001a2c <MX_GPIO_Init+0x19c>)
 800197a:	f000 fcc7 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_8 
 800197e:	f244 3381 	movw	r3, #17281	; 0x4381
 8001982:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	4820      	ldr	r0, [pc, #128]	; (8001a18 <MX_GPIO_Init+0x188>)
 8001998:	f000 fcb8 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <MX_GPIO_Init+0x18c>)
 80019b6:	f000 fca9 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <MX_GPIO_Init+0x190>)
 80019d4:	f000 fc9a 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d8:	2340      	movs	r3, #64	; 0x40
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_GPIO_Init+0x194>)
 80019f0:	f000 fc8c 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_GPIO_Init+0x194>)
 8001a08:	f000 fc80 	bl	800230c <HAL_GPIO_Init>

}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	48000c00 	.word	0x48000c00
 8001a24:	48001800 	.word	0x48001800
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  MIDI_Interrupt_Receive();
 8001a38:	f7ff fb3a 	bl	80010b0 <MIDI_Interrupt_Receive>
  MIDI_Interrupt_Receive_Begin();
 8001a3c:	f7ff fb0a 	bl	8001054 <MIDI_Interrupt_Receive_Begin>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  MIDI_Interrupt_Transmit_End();
 8001a50:	f7ff fbc8 	bl	80011e4 <MIDI_Interrupt_Transmit_End>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_UART_ErrorCallback>:

/*
 *
 */
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	MIDI_Log_Error();
 8001a64:	f7ff fc16 	bl	8001294 <MIDI_Log_Error>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <MIDI_Application_Process>:

//#define DEBUG_MIDI_TX
#include "midi_application.h"

void MIDI_Application_Process(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
	MIDI_error_t status = MIDI_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
	uint8_t next_byte = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71bb      	strb	r3, [r7, #6]
	uint16_t bytes_to_read = 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	80bb      	strh	r3, [r7, #4]

	// Just emulate MIDI through for now
	do {
		if (!MIDI_Interrupt_Is_Armed()) {
 8001a90:	f7ff faca 	bl	8001028 <MIDI_Interrupt_Is_Armed>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <MIDI_Application_Process+0x20>
			MIDI_Interrupt_Receive_Begin();
 8001a9a:	f7ff fadb 	bl	8001054 <MIDI_Interrupt_Receive_Begin>
		}

		status = MIDI_Dequeue_Receive(&next_byte, &bytes_to_read);
 8001a9e:	1d3a      	adds	r2, r7, #4
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb2f 	bl	8001108 <MIDI_Dequeue_Receive>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
		if (status == MIDI_OK) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <MIDI_Application_Process+0x46>
			status = MIDI_Enqueue_Send(&next_byte, &bytes_to_read);
 8001ab4:	1d3a      	adds	r2, r7, #4
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fbac 	bl	8001218 <MIDI_Enqueue_Send>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_MIDI_TX
			printf("Sent: %x\r\n", next_byte);
#endif
		}
	} while (status == MIDI_OK);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0e2      	beq.n	8001a90 <MIDI_Application_Process+0x12>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_MspInit+0x44>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <HAL_MspInit+0x44>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6193      	str	r3, [r2, #24]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_MspInit+0x44>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x44>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x44>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x44>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RTC_MspInit+0x44>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d111      	bne.n	8001b52 <HAL_RTC_MspInit+0x36>
 8001b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_RTC_MspInit+0x48>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40002800 	.word	0x40002800
 8001b64:	10908100 	.word	0x10908100

08001b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_SPI_MspInit+0x7c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d128      	bne.n	8001bdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	6153      	str	r3, [r2, #20]
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_SPI_MspInit+0x80>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23e0      	movs	r3, #224	; 0xe0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f000 fb98 	bl	800230c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <HAL_UART_MspInit+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d130      	bne.n	8001c70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c30:	6153      	str	r3, [r2, #20]
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c3e:	2330      	movs	r3, #48	; 0x30
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4838      	ldr	r0, [pc, #224]	; (8001d3c <HAL_UART_MspInit+0x150>)
 8001c5a:	f000 fb57 	bl	800230c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2025      	movs	r0, #37	; 0x25
 8001c64:	f000 fadd 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c68:	2025      	movs	r0, #37	; 0x25
 8001c6a:	f000 faf6 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c6e:	e05c      	b.n	8001d2a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <HAL_UART_MspInit+0x154>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d129      	bne.n	8001cce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a2e      	ldr	r2, [pc, #184]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001caa:	230c      	movs	r3, #12
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f000 fb20 	bl	800230c <HAL_GPIO_Init>
}
 8001ccc:	e02d      	b.n	8001d2a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_UART_MspInit+0x158>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d128      	bne.n	8001d2a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce2:	61d3      	str	r3, [r2, #28]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cfa:	6153      	str	r3, [r2, #20]
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_UART_MspInit+0x14c>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4808      	ldr	r0, [pc, #32]	; (8001d48 <HAL_UART_MspInit+0x15c>)
 8001d26:	f000 faf1 	bl	800230c <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3738      	adds	r7, #56	; 0x38
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	40004400 	.word	0x40004400
 8001d44:	40004800 	.word	0x40004800
 8001d48:	48000c00 	.word	0x48000c00

08001d4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_PCD_MspInit+0x44>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_PCD_MspInit+0x48>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_PCD_MspInit+0x48>)
 8001d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_PCD_MspInit+0x48>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2014      	movs	r0, #20
 8001d7c:	f000 fa51 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001d80:	2014      	movs	r0, #20
 8001d82:	f000 fa6a 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005c00 	.word	0x40005c00
 8001d94:	40021000 	.word	0x40021000

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f8fc 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001dfa:	f000 fcdd 	bl	80027b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000d54 	.word	0x20000d54

08001e08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART1_IRQHandler+0x10>)
 8001e0e:	f003 fb57 	bl	80054c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000bd0 	.word	0x20000bd0

08001e1c <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	return -1;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e44:	605a      	str	r2, [r3, #4]
	return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_isatty>:

int _isatty(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
	return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x50>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x16>
		heap_end = &end;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <_sbrk+0x50>)
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <_sbrk+0x54>)
 8001e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <_sbrk+0x50>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <_sbrk+0x50>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	466a      	mov	r2, sp
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d907      	bls.n	8001ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001eae:	f004 fd21 	bl	80068f4 <__errno>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ebc:	e006      	b.n	8001ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <_sbrk+0x50>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a03      	ldr	r2, [pc, #12]	; (8001ed4 <_sbrk+0x50>)
 8001ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000a40 	.word	0x20000a40
 8001ed8:	20000fc8 	.word	0x20000fc8

08001edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <SystemInit+0x28>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <SystemInit+0x28>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SystemInit+0x28>)
 8001ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f0e:	e003      	b.n	8001f18 <LoopCopyDataInit>

08001f10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f16:	3104      	adds	r1, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f20:	d3f6      	bcc.n	8001f10 <CopyDataInit>
	ldr	r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f24:	e002      	b.n	8001f2c <LoopFillZerobss>

08001f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f28:	f842 3b04 	str.w	r3, [r2], #4

08001f2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <LoopForever+0x16>)
	cmp	r2, r3
 8001f2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f30:	d3f9      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f32:	f7ff ffd3 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f004 fce3 	bl	8006900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3a:	f7ff fafb 	bl	8001534 <main>

08001f3e <LoopForever>:

LoopForever:
    b LoopForever
 8001f3e:	e7fe      	b.n	8001f3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f40:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f44:	08007ecc 	.word	0x08007ecc
	ldr	r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f4c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001f50:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001f54:	20000fc8 	.word	0x20000fc8

08001f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC1_2_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_Init+0x28>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_Init+0x28>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f94d 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff fdac 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000

08001f88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f965 	bl	8002276 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc4:	f000 f92d 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000008 	.word	0x20000008
 800200c:	20000fc0 	.word	0x20000fc0

08002010 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;  
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000fc0 	.word	0x20000fc0

08002028 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_Delay+0x40>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000008 	.word	0x20000008

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e027      	b.n	8002300 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020e 	bic.w	r2, r2, #14
 80022be:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
    } 
  }
  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e160      	b.n	80025de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8152 	beq.w	80025d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x38>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b12      	cmp	r3, #18
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	6939      	ldr	r1, [r7, #16]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d00b      	beq.n	80023e0 <HAL_GPIO_Init+0xd4>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d4:	2b11      	cmp	r3, #17
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b12      	cmp	r3, #18
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80ac 	beq.w	80025d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_GPIO_Init+0x2f0>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <HAL_GPIO_Init+0x2f0>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_GPIO_Init+0x2f0>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002498:	4a59      	ldr	r2, [pc, #356]	; (8002600 <HAL_GPIO_Init+0x2f4>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024c2:	d025      	beq.n	8002510 <HAL_GPIO_Init+0x204>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4f      	ldr	r2, [pc, #316]	; (8002604 <HAL_GPIO_Init+0x2f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01f      	beq.n	800250c <HAL_GPIO_Init+0x200>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4e      	ldr	r2, [pc, #312]	; (8002608 <HAL_GPIO_Init+0x2fc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x1fc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_GPIO_Init+0x300>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1f8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_GPIO_Init+0x304>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1f4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4b      	ldr	r2, [pc, #300]	; (8002614 <HAL_GPIO_Init+0x308>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1f0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_GPIO_Init+0x30c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1ec>
 80024f4:	2306      	movs	r3, #6
 80024f6:	e00c      	b.n	8002512 <HAL_GPIO_Init+0x206>
 80024f8:	2307      	movs	r3, #7
 80024fa:	e00a      	b.n	8002512 <HAL_GPIO_Init+0x206>
 80024fc:	2305      	movs	r3, #5
 80024fe:	e008      	b.n	8002512 <HAL_GPIO_Init+0x206>
 8002500:	2304      	movs	r3, #4
 8002502:	e006      	b.n	8002512 <HAL_GPIO_Init+0x206>
 8002504:	2303      	movs	r3, #3
 8002506:	e004      	b.n	8002512 <HAL_GPIO_Init+0x206>
 8002508:	2302      	movs	r3, #2
 800250a:	e002      	b.n	8002512 <HAL_GPIO_Init+0x206>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_GPIO_Init+0x206>
 8002510:	2300      	movs	r3, #0
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	f002 0203 	and.w	r2, r2, #3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4093      	lsls	r3, r2
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002522:	4937      	ldr	r1, [pc, #220]	; (8002600 <HAL_GPIO_Init+0x2f4>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_GPIO_Init+0x310>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002554:	4a31      	ldr	r2, [pc, #196]	; (800261c <HAL_GPIO_Init+0x310>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_GPIO_Init+0x310>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_GPIO_Init+0x310>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_GPIO_Init+0x310>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_GPIO_Init+0x310>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_GPIO_Init+0x310>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_GPIO_Init+0x310>)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f ae97 	bne.w	800231c <HAL_GPIO_Init+0x10>
  }
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	48000400 	.word	0x48000400
 8002608:	48000800 	.word	0x48000800
 800260c:	48000c00 	.word	0x48000c00
 8002610:	48001000 	.word	0x48001000
 8002614:	48001400 	.word	0x48001400
 8002618:	48001800 	.word	0x48001800
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800263c:	e002      	b.n	8002644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af06      	add	r7, sp, #24
 8002656:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0a6      	b.n	80027b0 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fb68 	bl	8001d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fd6a 	bl	8006162 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e035      	b.n	8002700 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	015b      	lsls	r3, r3, #5
 800269a:	4413      	add	r3, r2
 800269c:	3329      	adds	r3, #41	; 0x29
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	4413      	add	r3, r2
 80026aa:	3328      	adds	r3, #40	; 0x28
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	b291      	uxth	r1, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	3336      	adds	r3, #54	; 0x36
 80026be:	460a      	mov	r2, r1
 80026c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4413      	add	r3, r2
 80026ca:	332b      	adds	r3, #43	; 0x2b
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	4413      	add	r3, r2
 80026d8:	3338      	adds	r3, #56	; 0x38
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	4413      	add	r3, r2
 80026e6:	333c      	adds	r3, #60	; 0x3c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	3302      	adds	r3, #2
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	4413      	add	r3, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3301      	adds	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3c4      	bcc.n	8002694 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e031      	b.n	8002774 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	4413      	add	r3, r2
 8002718:	f203 1329 	addw	r3, r3, #297	; 0x129
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	4413      	add	r3, r2
 8002728:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	4413      	add	r3, r2
 8002738:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	4413      	add	r3, r2
 8002748:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	4413      	add	r3, r2
 8002758:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	330a      	adds	r3, #10
 8002766:	015b      	lsls	r3, r3, #5
 8002768:	4413      	add	r3, r2
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3301      	adds	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3c8      	bcc.n	8002710 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	687e      	ldr	r6, [r7, #4]
 8002786:	466d      	mov	r5, sp
 8002788:	f106 0410 	add.w	r4, r6, #16
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	602b      	str	r3, [r5, #0]
 8002794:	1d33      	adds	r3, r6, #4
 8002796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	f003 fcff 	bl	800619c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fff3 	bl	80067b0 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f9d2 	bl	8002b80 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 ffe5 	bl	80067b0 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f0:	d112      	bne.n	8002818 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	b292      	uxth	r2, r2
 8002806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f902 	bl	8002a14 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002810:	2100      	movs	r1, #0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f91c 	bl	8002a50 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f003 ffc7 	bl	80067b0 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800282c:	d10b      	bne.n	8002846 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002840:	b292      	uxth	r2, r2
 8002842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ffb0 	bl	80067b0 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285a:	d10b      	bne.n	8002874 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286e:	b292      	uxth	r2, r2
 8002870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff99 	bl	80067b0 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d126      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0204 	bic.w	r2, r2, #4
 800289c:	b292      	uxth	r2, r2
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	b292      	uxth	r2, r2
 80028b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8be 	bl	8002a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d2:	b292      	uxth	r2, r2
 80028d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 ff67 	bl	80067b0 <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ec:	d131      	bne.n	8002952 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0208 	orr.w	r2, r2, #8
 8002900:	b292      	uxth	r2, r2
 8002902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002918:	b292      	uxth	r2, r2
 800291a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0204 	orr.w	r2, r2, #4
 8002930:	b292      	uxth	r2, r2
 8002932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 ff38 	bl	80067b0 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294a:	d002      	beq.n	8002952 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f86b 	bl	8002a28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 ff2a 	bl	80067b0 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002966:	d10e      	bne.n	8002986 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800297a:	b292      	uxth	r2, r2
 800297c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f83d 	bl	8002a00 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f003 ff10 	bl	80067b0 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299a:	d10b      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ae:	b292      	uxth	r2, r2
 80029b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_PCD_SetAddress+0x1a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e013      	b.n	8002a92 <HAL_PCD_SetAddress+0x42>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fe80 	bl	8006788 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	015b      	lsls	r3, r3, #5
 8002ab2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 fb77 	bl	80061e4 <USB_EPStartXfer>
 8002af6:	e005      	b.n	8002b04 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fb70 	bl	80061e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	015b      	lsls	r3, r3, #5
 8002b26:	3328      	adds	r3, #40	; 0x28
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2201      	movs	r2, #1
 8002b44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	7afb      	ldrb	r3, [r7, #11]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6979      	ldr	r1, [r7, #20]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fb3e 	bl	80061e4 <USB_EPStartXfer>
 8002b68:	e005      	b.n	8002b76 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fb37 	bl	80061e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b88:	e278      	b.n	800307c <PCD_EP_ISR_Handler+0x4fc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b92:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b94:	8afb      	ldrh	r3, [r7, #22]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002b9e:	7d7b      	ldrb	r3, [r7, #21]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 8140 	bne.w	8002e26 <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ba6:	8afb      	ldrh	r3, [r7, #22]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d14f      	bne.n	8002c50 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3328      	adds	r3, #40	; 0x28
 8002bd6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	441a      	add	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fedf 	bl	80029d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 822c 	beq.w	800307c <PCD_EP_ISR_Handler+0x4fc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 8227 	bne.w	800307c <PCD_EP_ISR_Handler+0x4fc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b292      	uxth	r2, r2
 8002c42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c4e:	e215      	b.n	800307c <PCD_EP_ISR_Handler+0x4fc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c56:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d031      	beq.n	8002cce <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f003 fdd4 	bl	8006852 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29c      	uxth	r4, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe90 	bl	80029ec <HAL_PCD_SetupStageCallback>
 8002ccc:	e1d6      	b.n	800307c <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f280 81d2 	bge.w	800307c <PCD_EP_ISR_Handler+0x4fc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d019      	beq.n	8002d58 <PCD_EP_ISR_Handler+0x1d8>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6959      	ldr	r1, [r3, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f003 fd88 	bl	8006852 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d50:	2100      	movs	r1, #0
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe32 	bl	80029bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	441c      	add	r4, r3
 8002d6a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d110      	bne.n	8002d9a <PCD_EP_ISR_Handler+0x21a>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e02f      	b.n	8002dfa <PCD_EP_ISR_Handler+0x27a>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002da0:	d813      	bhi.n	8002dca <PCD_EP_ISR_Handler+0x24a>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <PCD_EP_ISR_Handler+0x23c>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e017      	b.n	8002dfa <PCD_EP_ISR_Handler+0x27a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <PCD_EP_ISR_Handler+0x264>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	029b      	lsls	r3, r3, #10
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	b29c      	uxth	r4, r3
 8002e0c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e10:	b29c      	uxth	r4, r3
 8002e12:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e16:	b29c      	uxth	r4, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <PCD_EP_ISR_Handler+0x518>)
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	8013      	strh	r3, [r2, #0]
 8002e24:	e12a      	b.n	800307c <PCD_EP_ISR_Handler+0x4fc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	7d7b      	ldrb	r3, [r7, #21]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f280 80cb 	bge.w	8002fd6 <PCD_EP_ISR_Handler+0x456>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	7d7b      	ldrb	r3, [r7, #21]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29c      	uxth	r4, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	7d7b      	ldrb	r3, [r7, #21]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e6c:	7d7b      	ldrb	r3, [r7, #21]
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	7b1b      	ldrb	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <PCD_EP_ISR_Handler+0x342>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002ea8:	8bfb      	ldrh	r3, [r7, #30]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d06e      	beq.n	8002f8c <PCD_EP_ISR_Handler+0x40c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6959      	ldr	r1, [r3, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	88da      	ldrh	r2, [r3, #6]
 8002eba:	8bfb      	ldrh	r3, [r7, #30]
 8002ebc:	f003 fcc9 	bl	8006852 <USB_ReadPMA>
 8002ec0:	e064      	b.n	8002f8c <PCD_EP_ISR_Handler+0x40c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01f      	beq.n	8002f1c <PCD_EP_ISR_Handler+0x39c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f00:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002f02:	8bfb      	ldrh	r3, [r7, #30]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d028      	beq.n	8002f5a <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	891a      	ldrh	r2, [r3, #8]
 8002f14:	8bfb      	ldrh	r3, [r7, #30]
 8002f16:	f003 fc9c 	bl	8006852 <USB_ReadPMA>
 8002f1a:	e01e      	b.n	8002f5a <PCD_EP_ISR_Handler+0x3da>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f40:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002f42:	8bfb      	ldrh	r3, [r7, #30]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	895a      	ldrh	r2, [r3, #10]
 8002f54:	8bfb      	ldrh	r3, [r7, #30]
 8002f56:	f003 fc7c 	bl	8006852 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	b29c      	uxth	r4, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <PCD_EP_ISR_Handler+0x51c>)
 8002f86:	4323      	orrs	r3, r4
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	8bfb      	ldrh	r3, [r7, #30]
 8002f92:	441a      	add	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	8bfb      	ldrh	r3, [r7, #30]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <PCD_EP_ISR_Handler+0x436>
 8002fac:	8bfa      	ldrh	r2, [r7, #30]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d206      	bcs.n	8002fc4 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fcfd 	bl	80029bc <HAL_PCD_DataOutStageCallback>
 8002fc2:	e008      	b.n	8002fd6 <PCD_EP_ISR_Handler+0x456>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	7819      	ldrb	r1, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fd62 	bl	8002a9a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d04d      	beq.n	800307c <PCD_EP_ISR_Handler+0x4fc>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fe0:	7d7b      	ldrb	r3, [r7, #21]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	3328      	adds	r3, #40	; 0x28
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	7d7b      	ldrb	r3, [r7, #21]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	b29c      	uxth	r4, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	7d7b      	ldrb	r3, [r7, #21]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29b      	uxth	r3, r3
 800301c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	4413      	add	r3, r2
 8003038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <PCD_EP_ISR_Handler+0x4ea>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fcb6 	bl	80029d4 <HAL_PCD_DataInStageCallback>
 8003068:	e008      	b.n	800307c <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	7819      	ldrb	r1, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fd49 	bl	8002b0e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003084:	b29b      	uxth	r3, r3
 8003086:	b21b      	sxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	f6ff ad7e 	blt.w	8002b8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3724      	adds	r7, #36	; 0x24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	ffff8080 	.word	0xffff8080
 800309c:	ffff80c0 	.word	0xffff80c0

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f000 bf01 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8160 	beq.w	800338a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030ca:	4bae      	ldr	r3, [pc, #696]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030d6:	4bab      	ldr	r3, [pc, #684]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d159      	bne.n	8003196 <HAL_RCC_OscConfig+0xf6>
 80030e2:	4ba8      	ldr	r3, [pc, #672]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ee:	d152      	bne.n	8003196 <HAL_RCC_OscConfig+0xf6>
 80030f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8003104:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x82>
 800311c:	4b99      	ldr	r3, [pc, #612]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0xae>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800313e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800314a:	4b8e      	ldr	r3, [pc, #568]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003152:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003156:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800315a:	fa92 f2a2 	rbit	r2, r2
 800315e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003162:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f042 0220 	orr.w	r2, r2, #32
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f002 021f 	and.w	r2, r2, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8102 	beq.w	8003388 <HAL_RCC_OscConfig+0x2e8>
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80fc 	bne.w	8003388 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f000 be93 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x110>
 80031a2:	4b78      	ldr	r3, [pc, #480]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a77      	ldr	r2, [pc, #476]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e030      	b.n	8003212 <HAL_RCC_OscConfig+0x172>
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x134>
 80031ba:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a71      	ldr	r2, [pc, #452]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01e      	b.n	8003212 <HAL_RCC_OscConfig+0x172>
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x15a>
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a64      	ldr	r2, [pc, #400]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x172>
 80031fa:	4b62      	ldr	r3, [pc, #392]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a61      	ldr	r2, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b5f      	ldr	r3, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5e      	ldr	r2, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d059      	beq.n	80032d0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fef8 	bl	8002010 <HAL_GetTick>
 8003220:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003226:	f7fe fef3 	bl	8002010 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d902      	bls.n	800323c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	f000 be40 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
 800323c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003240:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003250:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_RCC_OscConfig+0x1ce>
 8003268:	4b46      	ldr	r3, [pc, #280]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	e015      	b.n	800329a <HAL_RCC_OscConfig+0x1fa>
 800326e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003272:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003286:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800328a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800329e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80032a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80032a6:	fa92 f2a2 	rbit	r2, r2
 80032aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80032ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f042 0220 	orr.w	r2, r2, #32
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f002 021f 	and.w	r2, r2, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ab      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
 80032ce:	e05c      	b.n	800338a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fe9e 	bl	8002010 <HAL_GetTick>
 80032d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032da:	f7fe fe99 	bl	8002010 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d902      	bls.n	80032f0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	f000 bde6 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
 80032f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003304:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <HAL_RCC_OscConfig+0x282>
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	e015      	b.n	800334e <HAL_RCC_OscConfig+0x2ae>
 8003322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003326:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800333e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_RCC_OscConfig+0x2e4>)
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003352:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003356:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800335a:	fa92 f2a2 	rbit	r2, r2
 800335e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003362:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ab      	bne.n	80032da <HAL_RCC_OscConfig+0x23a>
 8003382:	e002      	b.n	800338a <HAL_RCC_OscConfig+0x2ea>
 8003384:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8170 	beq.w	800367a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800339a:	4bd0      	ldr	r3, [pc, #832]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033a6:	4bcd      	ldr	r3, [pc, #820]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d16d      	bne.n	800348e <HAL_RCC_OscConfig+0x3ee>
 80033b2:	4bca      	ldr	r3, [pc, #808]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80033ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033be:	d166      	bne.n	800348e <HAL_RCC_OscConfig+0x3ee>
 80033c0:	2302      	movs	r3, #2
 80033c2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80033d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0x350>
 80033ea:	4bbc      	ldr	r3, [pc, #752]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e013      	b.n	8003418 <HAL_RCC_OscConfig+0x378>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003402:	2302      	movs	r3, #2
 8003404:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003408:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003414:	4bb1      	ldr	r3, [pc, #708]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2202      	movs	r2, #2
 800341a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800341e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003422:	fa92 f2a2 	rbit	r2, r2
 8003426:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800342a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_RCC_OscConfig+0x3ba>
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d002      	beq.n	800345a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f000 bd31 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4ba0      	ldr	r3, [pc, #640]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	21f8      	movs	r1, #248	; 0xf8
 800346a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003472:	fa91 f1a1 	rbit	r1, r1
 8003476:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800347a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800347e:	fab1 f181 	clz	r1, r1
 8003482:	b2c9      	uxtb	r1, r1
 8003484:	408b      	lsls	r3, r1
 8003486:	4995      	ldr	r1, [pc, #596]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348c:	e0f5      	b.n	800367a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8085 	beq.w	80035a4 <HAL_RCC_OscConfig+0x504>
 800349a:	2301      	movs	r3, #1
 800349c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80034ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	461a      	mov	r2, r3
 80034c2:	2301      	movs	r3, #1
 80034c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fe fda3 	bl	8002010 <HAL_GetTick>
 80034ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe fd9e 	bl	8002010 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	f000 bceb 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80034f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0x476>
 8003510:	4b72      	ldr	r3, [pc, #456]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e013      	b.n	800353e <HAL_RCC_OscConfig+0x49e>
 8003516:	2302      	movs	r3, #2
 8003518:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800352e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800353a:	4b68      	ldr	r3, [pc, #416]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2202      	movs	r2, #2
 8003540:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003544:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003548:	fa92 f2a2 	rbit	r2, r2
 800354c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003550:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0af      	beq.n	80034d0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	21f8      	movs	r1, #248	; 0xf8
 8003580:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003588:	fa91 f1a1 	rbit	r1, r1
 800358c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003590:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003594:	fab1 f181 	clz	r1, r1
 8003598:	b2c9      	uxtb	r1, r1
 800359a:	408b      	lsls	r3, r1
 800359c:	494f      	ldr	r1, [pc, #316]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e06a      	b.n	800367a <HAL_RCC_OscConfig+0x5da>
 80035a4:	2301      	movs	r3, #1
 80035a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80035b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe fd1e 	bl	8002010 <HAL_GetTick>
 80035d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035da:	f7fe fd19 	bl	8002010 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	f000 bc66 	b.w	8003ebc <HAL_RCC_OscConfig+0xe1c>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003602:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0x580>
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e013      	b.n	8003648 <HAL_RCC_OscConfig+0x5a8>
 8003620:	2302      	movs	r3, #2
 8003622:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003632:	2302      	movs	r3, #2
 8003634:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003638:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <HAL_RCC_OscConfig+0x63c>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800364e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003652:	fa92 f2a2 	rbit	r2, r2
 8003656:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800365a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800365e:	fab2 f282 	clz	r2, r2
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f042 0220 	orr.w	r2, r2, #32
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f002 021f 	and.w	r2, r2, #31
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1af      	bne.n	80035da <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80da 	beq.w	800383e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d069      	beq.n	8003768 <HAL_RCC_OscConfig+0x6c8>
 8003694:	2301      	movs	r3, #1
 8003696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80036a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x640>)
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	2301      	movs	r3, #1
 80036bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe fca7 	bl	8002010 <HAL_GetTick>
 80036c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e00d      	b.n	80036e4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe fca2 	bl	8002010 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d905      	bls.n	80036e4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e3ef      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 80036dc:	40021000 	.word	0x40021000
 80036e0:	10908120 	.word	0x10908120
 80036e4:	2302      	movs	r3, #2
 80036e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80036fc:	2202      	movs	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003714:	2202      	movs	r2, #2
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003726:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003728:	4ba4      	ldr	r3, [pc, #656]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800372a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003730:	2102      	movs	r1, #2
 8003732:	6019      	str	r1, [r3, #0]
 8003734:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f1a3 	rbit	r1, r3
 800373e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003742:	6019      	str	r1, [r3, #0]
  return result;
 8003744:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0b0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x628>
 8003766:	e06a      	b.n	800383e <HAL_RCC_OscConfig+0x79e>
 8003768:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800377e:	601a      	str	r2, [r3, #0]
  return result;
 8003780:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003784:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4b8c      	ldr	r3, [pc, #560]	; (80039c0 <HAL_RCC_OscConfig+0x920>)
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	461a      	mov	r2, r3
 8003796:	2300      	movs	r3, #0
 8003798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fe fc39 	bl	8002010 <HAL_GetTick>
 800379e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a2:	e009      	b.n	80037b8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fe fc34 	bl	8002010 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e381      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 80037b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037d4:	2202      	movs	r2, #2
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80037fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	4b6e      	ldr	r3, [pc, #440]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003808:	2102      	movs	r1, #2
 800380a:	6019      	str	r1, [r3, #0]
 800380c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fa93 f1a3 	rbit	r1, r3
 8003816:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800381a:	6019      	str	r1, [r3, #0]
  return result;
 800381c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1b2      	bne.n	80037a4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383e:	1d3b      	adds	r3, r7, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8157 	beq.w	8003afc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003854:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d112      	bne.n	8003886 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_RCC_OscConfig+0x924>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11a      	bne.n	80038c8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <HAL_RCC_OscConfig+0x924>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_RCC_OscConfig+0x924>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe fbb7 	bl	8002010 <HAL_GetTick>
 80038a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	e009      	b.n	80038bc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a8:	f7fe fbb2 	bl	8002010 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e2ff      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_RCC_OscConfig+0x924>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d106      	bne.n	80038e0 <HAL_RCC_OscConfig+0x840>
 80038d2:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a39      	ldr	r2, [pc, #228]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6213      	str	r3, [r2, #32]
 80038de:	e02f      	b.n	8003940 <HAL_RCC_OscConfig+0x8a0>
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x864>
 80038ea:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a33      	ldr	r2, [pc, #204]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a30      	ldr	r2, [pc, #192]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6213      	str	r3, [r2, #32]
 8003902:	e01d      	b.n	8003940 <HAL_RCC_OscConfig+0x8a0>
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x888>
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0x8a0>
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6213      	str	r3, [r2, #32]
 8003934:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d06a      	beq.n	8003a20 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fe fb61 	bl	8002010 <HAL_GetTick>
 800394e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fe fb5c 	bl	8002010 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e2a7      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 800396c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003970:	2202      	movs	r2, #2
 8003972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003988:	2202      	movs	r2, #2
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800399a:	601a      	str	r2, [r3, #0]
  return result;
 800399c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80039a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x928>
 80039b6:	4b01      	ldr	r3, [pc, #4]	; (80039bc <HAL_RCC_OscConfig+0x91c>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	e013      	b.n	80039e4 <HAL_RCC_OscConfig+0x944>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	10908120 	.word	0x10908120
 80039c4:	40007000 	.word	0x40007000
 80039c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039cc:	2202      	movs	r2, #2
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	4bc0      	ldr	r3, [pc, #768]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80039e8:	2102      	movs	r1, #2
 80039ea:	6011      	str	r1, [r2, #0]
 80039ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	fa92 f1a2 	rbit	r1, r2
 80039f6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80039fa:	6011      	str	r1, [r2, #0]
  return result;
 80039fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f002 021f 	and.w	r2, r2, #31
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d09a      	beq.n	8003954 <HAL_RCC_OscConfig+0x8b4>
 8003a1e:	e063      	b.n	8003ae8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a20:	f7fe faf6 	bl	8002010 <HAL_GetTick>
 8003a24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe faf1 	bl	8002010 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e23c      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 8003a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a46:	2202      	movs	r2, #2
 8003a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a5e:	2202      	movs	r2, #2
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	fa93 f2a3 	rbit	r2, r3
 8003a6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a70:	601a      	str	r2, [r3, #0]
  return result;
 8003a72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0x9f2>
 8003a8c:	4b95      	ldr	r3, [pc, #596]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	e00d      	b.n	8003aae <HAL_RCC_OscConfig+0xa0e>
 8003a92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a96:	2202      	movs	r2, #2
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	4b8e      	ldr	r3, [pc, #568]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	fa92 f1a2 	rbit	r1, r2
 8003ac0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003ac4:	6011      	str	r1, [r2, #0]
  return result;
 8003ac6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	fab2 f282 	clz	r2, r2
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f002 021f 	and.w	r2, r2, #31
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1a0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ae8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4a7b      	ldr	r2, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 81d9 	beq.w	8003eba <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b08:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f000 81a6 	beq.w	8003e62 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	f040 811e 	bne.w	8003d5e <HAL_RCC_OscConfig+0xcbe>
 8003b22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b3a:	601a      	str	r2, [r3, #0]
  return result;
 8003b3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa5a 	bl	8002010 <HAL_GetTick>
 8003b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b60:	e009      	b.n	8003b76 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe fa55 	bl	8002010 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1a2      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 8003b76:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	fa93 f2a3 	rbit	r2, r3
 8003b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b8e:	601a      	str	r2, [r3, #0]
  return result;
 8003b90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xb10>
 8003baa:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e01b      	b.n	8003be8 <HAL_RCC_OscConfig+0xb48>
 8003bb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003bec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	fa92 f1a2 	rbit	r1, r2
 8003bfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c00:	6011      	str	r1, [r2, #0]
  return result;
 8003c02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	fab2 f282 	clz	r2, r2
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	f042 0220 	orr.w	r2, r2, #32
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f002 021f 	and.w	r2, r2, #31
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d19e      	bne.n	8003b62 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f023 020f 	bic.w	r2, r3, #15
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	492c      	ldr	r1, [pc, #176]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6a19      	ldr	r1, [r3, #32]
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c6c:	601a      	str	r2, [r3, #0]
  return result;
 8003c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	461a      	mov	r2, r3
 8003c86:	2301      	movs	r3, #1
 8003c88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe f9c1 	bl	8002010 <HAL_GetTick>
 8003c8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c92:	e009      	b.n	8003ca8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe f9bc 	bl	8002010 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e109      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 8003ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fa93 f2a3 	rbit	r2, r3
 8003cbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cc0:	601a      	str	r2, [r3, #0]
  return result;
 8003cc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xc48>
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <HAL_RCC_OscConfig+0xc44>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	e01e      	b.n	8003d20 <HAL_RCC_OscConfig+0xc80>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCC_OscConfig+0xe28>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	fa92 f1a2 	rbit	r1, r2
 8003d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d38:	6011      	str	r1, [r2, #0]
  return result;
 8003d3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d09b      	beq.n	8003c94 <HAL_RCC_OscConfig+0xbf4>
 8003d5c:	e0ad      	b.n	8003eba <HAL_RCC_OscConfig+0xe1a>
 8003d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	fa93 f2a3 	rbit	r2, r3
 8003d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d76:	601a      	str	r2, [r3, #0]
  return result;
 8003d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe f93c 	bl	8002010 <HAL_GetTick>
 8003d98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	e009      	b.n	8003db2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe f937 	bl	8002010 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e084      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
 8003db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	fa93 f2a3 	rbit	r2, r3
 8003dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dca:	601a      	str	r2, [r3, #0]
  return result;
 8003dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_OscConfig+0xd4c>
 8003de6:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <HAL_RCC_OscConfig+0xe28>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e01b      	b.n	8003e24 <HAL_RCC_OscConfig+0xd84>
 8003dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f107 0320 	add.w	r3, r7, #32
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f107 031c 	add.w	r3, r7, #28
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f107 0318 	add.w	r3, r7, #24
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <HAL_RCC_OscConfig+0xe28>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f107 0214 	add.w	r2, r7, #20
 8003e28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e2c:	6011      	str	r1, [r2, #0]
 8003e2e:	f107 0214 	add.w	r2, r7, #20
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	fa92 f1a2 	rbit	r1, r2
 8003e38:	f107 0210 	add.w	r2, r7, #16
 8003e3c:	6011      	str	r1, [r2, #0]
  return result;
 8003e3e:	f107 0210 	add.w	r2, r7, #16
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	fab2 f282 	clz	r2, r2
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f002 021f 	and.w	r2, r2, #31
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d19e      	bne.n	8003d9e <HAL_RCC_OscConfig+0xcfe>
 8003e60:	e02b      	b.n	8003eba <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_RCC_OscConfig+0xe28>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_OscConfig+0xe28>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003e88:	1d3b      	adds	r3, r7, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d111      	bne.n	8003eb6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000

08003ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b09e      	sub	sp, #120	; 0x78
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e162      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b90      	ldr	r3, [pc, #576]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b8d      	ldr	r3, [pc, #564]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	498b      	ldr	r1, [pc, #556]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b89      	ldr	r3, [pc, #548]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e14a      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b82      	ldr	r3, [pc, #520]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	497f      	ldr	r1, [pc, #508]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80dc 	beq.w	80040f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d13c      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xf6>
 8003f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xa6>
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	e00f      	b.n	8003f92 <HAL_RCC_ClockConfig+0xc6>
 8003f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
 8003f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f8e:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	fa92 f2a2 	rbit	r2, r2
 8003f9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fa2:	fab2 f282 	clz	r2, r2
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f002 021f 	and.w	r2, r2, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d17b      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0f3      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d13c      	bne.n	8004044 <HAL_RCC_ClockConfig+0x178>
 8003fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x128>
 8003fee:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	e00f      	b.n	8004014 <HAL_RCC_ClockConfig+0x148>
 8003ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
 8004002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004018:	63ba      	str	r2, [r7, #56]	; 0x38
 800401a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401c:	fa92 f2a2 	rbit	r2, r2
 8004020:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004024:	fab2 f282 	clz	r2, r2
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	f042 0220 	orr.w	r2, r2, #32
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	f002 021f 	and.w	r2, r2, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d13a      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0b2      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
 8004044:	2302      	movs	r3, #2
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d102      	bne.n	800406c <HAL_RCC_ClockConfig+0x1a0>
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	e00d      	b.n	8004088 <HAL_RCC_ClockConfig+0x1bc>
 800406c:	2302      	movs	r3, #2
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	2302      	movs	r3, #2
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2202      	movs	r2, #2
 800408a:	61ba      	str	r2, [r7, #24]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	fa92 f2a2 	rbit	r2, r2
 8004092:	617a      	str	r2, [r7, #20]
  return result;
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	fab2 f282 	clz	r2, r2
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f042 0220 	orr.w	r2, r2, #32
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f002 021f 	and.w	r2, r2, #31
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e079      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	491a      	ldr	r1, [pc, #104]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c8:	f7fd ffa2 	bl	8002010 <HAL_GetTick>
 80040cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fd ff9e 	bl	8002010 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e061      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_ClockConfig+0x260>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d214      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 0207 	bic.w	r2, r3, #7
 800410e:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_ClockConfig+0x25c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e040      	b.n	80041aa <HAL_RCC_ClockConfig+0x2de>
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCC_ClockConfig+0x2e8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	491a      	ldr	r1, [pc, #104]	; (80041b4 <HAL_RCC_ClockConfig+0x2e8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <HAL_RCC_ClockConfig+0x2e8>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4912      	ldr	r1, [pc, #72]	; (80041b4 <HAL_RCC_ClockConfig+0x2e8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800416e:	f000 f829 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 8004172:	4601      	mov	r1, r0
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RCC_ClockConfig+0x2e8>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	22f0      	movs	r2, #240	; 0xf0
 800417e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	fa92 f2a2 	rbit	r2, r2
 8004186:	60fa      	str	r2, [r7, #12]
  return result;
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	fab2 f282 	clz	r2, r2
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	40d3      	lsrs	r3, r2
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x2ec>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	fa21 f303 	lsr.w	r3, r1, r3
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <HAL_RCC_ClockConfig+0x2f0>)
 800419c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCC_ClockConfig+0x2f4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd fef0 	bl	8001f88 <HAL_InitTick>
  
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3778      	adds	r7, #120	; 0x78
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	08007ce8 	.word	0x08007ce8
 80041bc:	20000000 	.word	0x20000000
 80041c0:	20000004 	.word	0x20000004

080041c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b08b      	sub	sp, #44	; 0x2c
 80041c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d002      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x30>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x36>
 80041f2:	e03f      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <HAL_RCC_GetSysClockFreq+0xc8>)
 80041f6:	623b      	str	r3, [r7, #32]
      break;
 80041f8:	e03f      	b.n	800427a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004200:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004204:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	fa92 f2a2 	rbit	r2, r2
 800420c:	607a      	str	r2, [r7, #4]
  return result;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	40d3      	lsrs	r3, r2
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_RCC_GetSysClockFreq+0xcc>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	220f      	movs	r2, #15
 8004228:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	fa92 f2a2 	rbit	r2, r2
 8004230:	60fa      	str	r2, [r7, #12]
  return result;
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	fab2 f282 	clz	r2, r2
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	40d3      	lsrs	r3, r2
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_RCC_GetSysClockFreq+0xd0>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <HAL_RCC_GetSysClockFreq+0xc8>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	e007      	b.n	800426e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800425e:	4a0b      	ldr	r2, [pc, #44]	; (800428c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	fbb2 f2f3 	udiv	r2, r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	623b      	str	r3, [r7, #32]
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004276:	623b      	str	r3, [r7, #32]
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	6a3b      	ldr	r3, [r7, #32]
}
 800427c:	4618      	mov	r0, r3
 800427e:	372c      	adds	r7, #44	; 0x2c
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40021000 	.word	0x40021000
 800428c:	007a1200 	.word	0x007a1200
 8004290:	08007d00 	.word	0x08007d00
 8004294:	08007d10 	.word	0x08007d10

08004298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80042b6:	f7ff ffef 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042ba:	4601      	mov	r1, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80042c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	fa92 f2a2 	rbit	r2, r2
 80042d0:	603a      	str	r2, [r7, #0]
  return result;
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	fab2 f282 	clz	r2, r2
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	40d3      	lsrs	r3, r2
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000
 80042f0:	08007cf8 	.word	0x08007cf8

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80042fa:	f7ff ffcd 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042fe:	4601      	mov	r1, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004308:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800430c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	fa92 f2a2 	rbit	r2, r2
 8004314:	603a      	str	r2, [r7, #0]
  return result;
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	fab2 f282 	clz	r2, r2
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	40d3      	lsrs	r3, r2
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	08007cf8 	.word	0x08007cf8

08004338 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b092      	sub	sp, #72	; 0x48
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80d7 	beq.w	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435c:	4b4e      	ldr	r3, [pc, #312]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10e      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004368:	4b4b      	ldr	r3, [pc, #300]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	4a4a      	ldr	r2, [pc, #296]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004372:	61d3      	str	r3, [r2, #28]
 8004374:	4b48      	ldr	r3, [pc, #288]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004386:	4b45      	ldr	r3, [pc, #276]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004392:	4b42      	ldr	r3, [pc, #264]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a41      	ldr	r2, [pc, #260]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fd fe37 	bl	8002010 <HAL_GetTick>
 80043a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	e008      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fd fe33 	bl	8002010 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b64      	cmp	r3, #100	; 0x64
 80043b2:	d901      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1d6      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b8:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c4:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8084 	beq.w	80044de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d07c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e4:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	2301      	movs	r3, #1
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	461a      	mov	r2, r3
 8004432:	2300      	movs	r3, #0
 8004434:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d04b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fd fde3 	bl	8002010 <HAL_GetTick>
 800444a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fddf 	bl	8002010 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e180      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004464:	2302      	movs	r3, #2
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
 8004470:	2302      	movs	r3, #2
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	61fb      	str	r3, [r7, #28]
  return result;
 800447c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d108      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004492:	4b01      	ldr	r3, [pc, #4]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	e00d      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
 80044a0:	10908100 	.word	0x10908100
 80044a4:	2302      	movs	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	4ba0      	ldr	r3, [pc, #640]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2202      	movs	r2, #2
 80044b6:	613a      	str	r2, [r7, #16]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	fa92 f2a2 	rbit	r2, r2
 80044be:	60fa      	str	r2, [r7, #12]
  return result;
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f002 021f 	and.w	r2, r2, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0b7      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044de:	4b95      	ldr	r3, [pc, #596]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4992      	ldr	r1, [pc, #584]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f8:	4b8e      	ldr	r3, [pc, #568]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4a8d      	ldr	r2, [pc, #564]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004502:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f023 0203 	bic.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4985      	ldr	r1, [pc, #532]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800452e:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	497e      	ldr	r1, [pc, #504]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800454c:	4b79      	ldr	r3, [pc, #484]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	4976      	ldr	r1, [pc, #472]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456a:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f023 0210 	bic.w	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	496f      	ldr	r1, [pc, #444]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004578:	4313      	orrs	r3, r2
 800457a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004588:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	4967      	ldr	r1, [pc, #412]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a6:	4b63      	ldr	r3, [pc, #396]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f023 0220 	bic.w	r2, r3, #32
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4960      	ldr	r1, [pc, #384]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c4:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	4958      	ldr	r1, [pc, #352]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e2:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	4951      	ldr	r1, [pc, #324]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004600:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4949      	ldr	r1, [pc, #292]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800461e:	4b45      	ldr	r3, [pc, #276]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4942      	ldr	r1, [pc, #264]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800463c:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	493a      	ldr	r1, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4933      	ldr	r1, [pc, #204]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004678:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	492b      	ldr	r1, [pc, #172]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4924      	ldr	r1, [pc, #144]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	491c      	ldr	r1, [pc, #112]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	4915      	ldr	r1, [pc, #84]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	490d      	ldr	r1, [pc, #52]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	4906      	ldr	r1, [pc, #24]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800472c:	4b01      	ldr	r3, [pc, #4]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004740:	490b      	ldr	r1, [pc, #44]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004742:	4313      	orrs	r3, r2
 8004744:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	4904      	ldr	r1, [pc, #16]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004760:	4313      	orrs	r3, r2
 8004762:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3748      	adds	r7, #72	; 0x48
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e083      	b.n	800488e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7f5b      	ldrb	r3, [r3, #29]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd f9c0 	bl	8001b1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ca      	movs	r2, #202	; 0xca
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2253      	movs	r2, #83	; 0x53
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f897 	bl	80048e6 <RTC_EnterInitMode>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2204      	movs	r2, #4
 80047ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e05e      	b.n	800488e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6899      	ldr	r1, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6919      	ldr	r1, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	041a      	lsls	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f829 	bl	8004896 <HAL_RTC_WaitForSynchro>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	22ff      	movs	r2, #255	; 0xff
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2204      	movs	r2, #4
 8004856:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e018      	b.n	800488e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800488c:	2300      	movs	r3, #0
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048b0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048b2:	f7fd fbad 	bl	8002010 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80048b8:	e009      	b.n	80048ce <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048ba:	f7fd fba9 	bl	8002010 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c8:	d901      	bls.n	80048ce <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e007      	b.n	80048de <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d119      	bne.n	8004934 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004908:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800490a:	f7fd fb81 	bl	8002010 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004910:	e009      	b.n	8004926 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004912:	f7fd fb7d 	bl	8002010 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004920:	d901      	bls.n	8004926 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e007      	b.n	8004936 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ee      	beq.n	8004912 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e084      	b.n	8004a5a <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f8fc 	bl	8001b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d902      	bls.n	8004998 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e002      	b.n	800499e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049a6:	d007      	beq.n	80049b8 <HAL_SPI_Init+0x7a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c8:	d903      	bls.n	80049d2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
 80049d0:	e002      	b.n	80049d8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	ea42 0103 	orr.w	r1, r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	f003 0204 	and.w	r2, r3, #4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	ea42 0103 	orr.w	r1, r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b088      	sub	sp, #32
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_SPI_Transmit+0x22>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e150      	b.n	8004d26 <HAL_SPI_Transmit+0x2c4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a8c:	f7fd fac0 	bl	8002010 <HAL_GetTick>
 8004a90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aa6:	e135      	b.n	8004d14 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x52>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab8:	e12c      	b.n	8004d14 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2203      	movs	r2, #3
 8004abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d107      	bne.n	8004b16 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b3c:	d94b      	bls.n	8004bd6 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_SPI_Transmit+0xea>
 8004b46:	8afb      	ldrh	r3, [r7, #22]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d13e      	bne.n	8004bca <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b70:	e02b      	b.n	8004bca <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d112      	bne.n	8004ba6 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba4:	e011      	b.n	8004bca <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba6:	f7fd fa33 	bl	8002010 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <HAL_SPI_Transmit+0x15c>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit+0x162>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc8:	e0a4      	b.n	8004d14 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ce      	bne.n	8004b72 <HAL_SPI_Transmit+0x110>
 8004bd4:	e07c      	b.n	8004cd0 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x182>
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d170      	bne.n	8004cc6 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d912      	bls.n	8004c14 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b02      	subs	r3, #2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c12:	e058      	b.n	8004cc6 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c3a:	e044      	b.n	8004cc6 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d12b      	bne.n	8004ca2 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d912      	bls.n	8004c7a <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b02      	subs	r3, #2
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c78:	e025      	b.n	8004cc6 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca0:	e011      	b.n	8004cc6 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca2:	f7fd f9b5 	bl	8002010 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d803      	bhi.n	8004cba <HAL_SPI_Transmit+0x258>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb8:	d102      	bne.n	8004cc0 <HAL_SPI_Transmit+0x25e>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cc4:	e026      	b.n	8004d14 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1b5      	bne.n	8004c3c <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f901 	bl	8004edc <SPI_EndRxTxTransaction>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e000      	b.n	8004d14 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3e:	e04c      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d46:	d048      	beq.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d48:	f7fd f962 	bl	8002010 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d902      	bls.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d13d      	bne.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d111      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d80:	d004      	beq.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8a:	d107      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d10f      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00f      	b.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1a3      	bne.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e10:	e057      	b.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e18:	d106      	bne.n	8004e28 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2e:	d048      	beq.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e30:	f7fd f8ee 	bl	8002010 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d902      	bls.n	8004e46 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d13d      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5e:	d111      	bne.n	8004e84 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e68:	d004      	beq.n	8004e74 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d107      	bne.n	8004e84 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8c:	d10f      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e008      	b.n	8004ed4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d19f      	bne.n	8004e12 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ff84 	bl	8004e02 <SPI_WaitFifoStateUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e027      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff07 	bl	8004d2e <SPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e014      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff ff5d 	bl	8004e02 <SPI_WaitFifoStateUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e000      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e040      	b.n	8004ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fe2e 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fbd0 	bl	800574c <UART_SetConfig>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e022      	b.n	8004ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fdde 	bl	8005b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fe65 	bl	8005cc4 <UART_CheckIdleState>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005018:	2b20      	cmp	r3, #32
 800501a:	f040 8081 	bne.w	8005120 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_Transmit+0x26>
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e079      	b.n	8005122 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_UART_Transmit+0x38>
 8005038:	2302      	movs	r3, #2
 800503a:	e072      	b.n	8005122 <HAL_UART_Transmit+0x11e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2221      	movs	r2, #33	; 0x21
 800504e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005050:	f7fc ffde 	bl	8002010 <HAL_GetTick>
 8005054:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d108      	bne.n	8005082 <HAL_UART_Transmit+0x7e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e003      	b.n	800508a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800508a:	e02d      	b.n	80050e8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fe59 	bl	8005d4e <UART_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e03d      	b.n	8005122 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b8:	b292      	uxth	r2, r2
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	3302      	adds	r3, #2
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e008      	b.n	80050d6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	b292      	uxth	r2, r2
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cb      	bne.n	800508c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fe25 	bl	8005d4e <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e009      	b.n	8005122 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b08a      	sub	sp, #40	; 0x28
 800512e:	af02      	add	r7, sp, #8
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513e:	2b20      	cmp	r3, #32
 8005140:	f040 80bb 	bne.w	80052ba <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_UART_Receive+0x26>
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b3      	b.n	80052bc <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_UART_Receive+0x38>
 800515e:	2302      	movs	r3, #2
 8005160:	e0ac      	b.n	80052bc <HAL_UART_Receive+0x192>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	; 0x22
 8005174:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005176:	f7fc ff4b 	bl	8002010 <HAL_GetTick>
 800517a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	d10e      	bne.n	80051b4 <HAL_UART_Receive+0x8a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_UART_Receive+0x80>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a8:	e02d      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051b2:	e028      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10d      	bne.n	80051d8 <HAL_UART_Receive+0xae>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <HAL_UART_Receive+0xa4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	22ff      	movs	r2, #255	; 0xff
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051cc:	e01b      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	227f      	movs	r2, #127	; 0x7f
 80051d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051d6:	e016      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e0:	d10d      	bne.n	80051fe <HAL_UART_Receive+0xd4>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_UART_Receive+0xca>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	227f      	movs	r2, #127	; 0x7f
 80051ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051f2:	e008      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	223f      	movs	r2, #63	; 0x3f
 80051f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051fc:	e003      	b.n	8005206 <HAL_UART_Receive+0xdc>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800520c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d108      	bne.n	800522a <HAL_UART_Receive+0x100>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	e003      	b.n	8005232 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005232:	e033      	b.n	800529c <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2200      	movs	r2, #0
 800523c:	2120      	movs	r1, #32
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fd85 	bl	8005d4e <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e036      	b.n	80052bc <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800525a:	b29a      	uxth	r2, r3
 800525c:	8a7b      	ldrh	r3, [r7, #18]
 800525e:	4013      	ands	r3, r2
 8005260:	b29a      	uxth	r2, r3
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e00d      	b.n	800528a <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2da      	uxtb	r2, r3
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4013      	ands	r3, r2
 800527e:	b2da      	uxtb	r2, r3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1c5      	bne.n	8005234 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e000      	b.n	80052bc <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
  }
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d144      	bne.n	8005364 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_UART_Transmit_IT+0x22>
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e03d      	b.n	8005366 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Transmit_IT+0x34>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e036      	b.n	8005366 <HAL_UART_Transmit_IT+0xa2>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2221      	movs	r2, #33	; 0x21
 8005326:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005330:	d107      	bne.n	8005342 <HAL_UART_Transmit_IT+0x7e>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <HAL_UART_Transmit_IT+0xb0>)
 800533e:	665a      	str	r2, [r3, #100]	; 0x64
 8005340:	e002      	b.n	8005348 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <HAL_UART_Transmit_IT+0xb4>)
 8005346:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800535e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	08005f25 	.word	0x08005f25
 8005378:	08005eb1 	.word	0x08005eb1

0800537c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538e:	2b20      	cmp	r3, #32
 8005390:	f040 808a 	bne.w	80054a8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Receive_IT+0x24>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e082      	b.n	80054aa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Receive_IT+0x36>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e07b      	b.n	80054aa <HAL_UART_Receive_IT+0x12e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d10e      	bne.n	80053fe <HAL_UART_Receive_IT+0x82>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_UART_Receive_IT+0x78>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f2:	e02d      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fc:	e028      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_UART_Receive_IT+0xa6>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_UART_Receive_IT+0x9c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005416:	e01b      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	227f      	movs	r2, #127	; 0x7f
 800541c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005420:	e016      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542a:	d10d      	bne.n	8005448 <HAL_UART_Receive_IT+0xcc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_UART_Receive_IT+0xc2>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	227f      	movs	r2, #127	; 0x7f
 8005438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800543c:	e008      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	223f      	movs	r2, #63	; 0x3f
 8005442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005446:	e003      	b.n	8005450 <HAL_UART_Receive_IT+0xd4>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2222      	movs	r2, #34	; 0x22
 800545a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d107      	bne.n	8005486 <HAL_UART_Receive_IT+0x10a>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_UART_Receive_IT+0x13c>)
 8005482:	661a      	str	r2, [r3, #96]	; 0x60
 8005484:	e002      	b.n	800548c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a0c      	ldr	r2, [pc, #48]	; (80054bc <HAL_UART_Receive_IT+0x140>)
 800548a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80054a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e000      	b.n	80054aa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	08006079 	.word	0x08006079
 80054bc:	08005fd3 	.word	0x08005fd3

080054c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d113      	bne.n	8005518 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8114 	beq.w	8005736 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
      }
      return;
 8005516:	e10e      	b.n	8005736 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80d6 	beq.w	80056cc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80cb 	beq.w	80056cc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <HAL_UART_IRQHandler+0x9e>
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005556:	f043 0201 	orr.w	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00e      	beq.n	8005586 <HAL_UART_IRQHandler+0xc6>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <HAL_UART_IRQHandler+0xee>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2204      	movs	r2, #4
 80055a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a6:	f043 0202 	orr.w	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d013      	beq.n	80055e0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2208      	movs	r2, #8
 80055d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d8:	f043 0208 	orr.w	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <HAL_UART_IRQHandler+0x14a>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8093 	beq.w	800573a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d004      	beq.n	8005656 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005652:	2b00      	cmp	r3, #0
 8005654:	d031      	beq.n	80056ba <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fbf4 	bl	8005e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d123      	bne.n	80056b2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005678:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d013      	beq.n	80056aa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005686:	4a30      	ldr	r2, [pc, #192]	; (8005748 <HAL_UART_IRQHandler+0x288>)
 8005688:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568e:	4618      	mov	r0, r3
 8005690:	f7fc fdfd 	bl	800228e <HAL_DMA_Abort_IT>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d016      	beq.n	80056c8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80056a4:	4610      	mov	r0, r2
 80056a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	e00e      	b.n	80056c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fc f9d6 	bl	8001a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	e00a      	b.n	80056c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc f9d2 	bl	8001a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	e006      	b.n	80056c8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc f9ce 	bl	8001a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80056c6:	e038      	b.n	800573a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	bf00      	nop
    return;
 80056ca:	e036      	b.n	800573a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <HAL_UART_IRQHandler+0x232>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fd17 	bl	800611e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056f0:	e026      	b.n	8005740 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800570a:	2b00      	cmp	r3, #0
 800570c:	d017      	beq.n	800573e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
    }
    return;
 8005716:	e012      	b.n	800573e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_UART_IRQHandler+0x280>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fc37 	bl	8005fa0 <UART_EndTransmit_IT>
    return;
 8005732:	bf00      	nop
 8005734:	e004      	b.n	8005740 <HAL_UART_IRQHandler+0x280>
      return;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_UART_IRQHandler+0x280>
    return;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_UART_IRQHandler+0x280>
    return;
 800573e:	bf00      	nop
  }

}
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	08005e85 	.word	0x08005e85

0800574c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4bac      	ldr	r3, [pc, #688]	; (8005a2c <UART_SetConfig+0x2e0>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	430b      	orrs	r3, r1
 8005786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a9a      	ldr	r2, [pc, #616]	; (8005a30 <UART_SetConfig+0x2e4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d121      	bne.n	8005810 <UART_SetConfig+0xc4>
 80057cc:	4b99      	ldr	r3, [pc, #612]	; (8005a34 <UART_SetConfig+0x2e8>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d817      	bhi.n	8005808 <UART_SetConfig+0xbc>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x94>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	080057fd 	.word	0x080057fd
 80057e8:	08005803 	.word	0x08005803
 80057ec:	080057f7 	.word	0x080057f7
 80057f0:	2301      	movs	r3, #1
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e0b2      	b.n	800595c <UART_SetConfig+0x210>
 80057f6:	2302      	movs	r3, #2
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e0af      	b.n	800595c <UART_SetConfig+0x210>
 80057fc:	2304      	movs	r3, #4
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e0ac      	b.n	800595c <UART_SetConfig+0x210>
 8005802:	2308      	movs	r3, #8
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e0a9      	b.n	800595c <UART_SetConfig+0x210>
 8005808:	2310      	movs	r3, #16
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	bf00      	nop
 800580e:	e0a5      	b.n	800595c <UART_SetConfig+0x210>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a88      	ldr	r2, [pc, #544]	; (8005a38 <UART_SetConfig+0x2ec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d123      	bne.n	8005862 <UART_SetConfig+0x116>
 800581a:	4b86      	ldr	r3, [pc, #536]	; (8005a34 <UART_SetConfig+0x2e8>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005826:	d012      	beq.n	800584e <UART_SetConfig+0x102>
 8005828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582c:	d802      	bhi.n	8005834 <UART_SetConfig+0xe8>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <UART_SetConfig+0xf6>
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x10e>
 8005834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005838:	d00c      	beq.n	8005854 <UART_SetConfig+0x108>
 800583a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800583e:	d003      	beq.n	8005848 <UART_SetConfig+0xfc>
 8005840:	e00b      	b.n	800585a <UART_SetConfig+0x10e>
 8005842:	2300      	movs	r3, #0
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e089      	b.n	800595c <UART_SetConfig+0x210>
 8005848:	2302      	movs	r3, #2
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e086      	b.n	800595c <UART_SetConfig+0x210>
 800584e:	2304      	movs	r3, #4
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e083      	b.n	800595c <UART_SetConfig+0x210>
 8005854:	2308      	movs	r3, #8
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e080      	b.n	800595c <UART_SetConfig+0x210>
 800585a:	2310      	movs	r3, #16
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	bf00      	nop
 8005860:	e07c      	b.n	800595c <UART_SetConfig+0x210>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a75      	ldr	r2, [pc, #468]	; (8005a3c <UART_SetConfig+0x2f0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d123      	bne.n	80058b4 <UART_SetConfig+0x168>
 800586c:	4b71      	ldr	r3, [pc, #452]	; (8005a34 <UART_SetConfig+0x2e8>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005874:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005878:	d012      	beq.n	80058a0 <UART_SetConfig+0x154>
 800587a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800587e:	d802      	bhi.n	8005886 <UART_SetConfig+0x13a>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <UART_SetConfig+0x148>
 8005884:	e012      	b.n	80058ac <UART_SetConfig+0x160>
 8005886:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800588a:	d00c      	beq.n	80058a6 <UART_SetConfig+0x15a>
 800588c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005890:	d003      	beq.n	800589a <UART_SetConfig+0x14e>
 8005892:	e00b      	b.n	80058ac <UART_SetConfig+0x160>
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e060      	b.n	800595c <UART_SetConfig+0x210>
 800589a:	2302      	movs	r3, #2
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e05d      	b.n	800595c <UART_SetConfig+0x210>
 80058a0:	2304      	movs	r3, #4
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e05a      	b.n	800595c <UART_SetConfig+0x210>
 80058a6:	2308      	movs	r3, #8
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e057      	b.n	800595c <UART_SetConfig+0x210>
 80058ac:	2310      	movs	r3, #16
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	bf00      	nop
 80058b2:	e053      	b.n	800595c <UART_SetConfig+0x210>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a61      	ldr	r2, [pc, #388]	; (8005a40 <UART_SetConfig+0x2f4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d123      	bne.n	8005906 <UART_SetConfig+0x1ba>
 80058be:	4b5d      	ldr	r3, [pc, #372]	; (8005a34 <UART_SetConfig+0x2e8>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ca:	d012      	beq.n	80058f2 <UART_SetConfig+0x1a6>
 80058cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d0:	d802      	bhi.n	80058d8 <UART_SetConfig+0x18c>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <UART_SetConfig+0x19a>
 80058d6:	e012      	b.n	80058fe <UART_SetConfig+0x1b2>
 80058d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058dc:	d00c      	beq.n	80058f8 <UART_SetConfig+0x1ac>
 80058de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x1a0>
 80058e4:	e00b      	b.n	80058fe <UART_SetConfig+0x1b2>
 80058e6:	2300      	movs	r3, #0
 80058e8:	77fb      	strb	r3, [r7, #31]
 80058ea:	e037      	b.n	800595c <UART_SetConfig+0x210>
 80058ec:	2302      	movs	r3, #2
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e034      	b.n	800595c <UART_SetConfig+0x210>
 80058f2:	2304      	movs	r3, #4
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e031      	b.n	800595c <UART_SetConfig+0x210>
 80058f8:	2308      	movs	r3, #8
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e02e      	b.n	800595c <UART_SetConfig+0x210>
 80058fe:	2310      	movs	r3, #16
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	bf00      	nop
 8005904:	e02a      	b.n	800595c <UART_SetConfig+0x210>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <UART_SetConfig+0x2f8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d123      	bne.n	8005958 <UART_SetConfig+0x20c>
 8005910:	4b48      	ldr	r3, [pc, #288]	; (8005a34 <UART_SetConfig+0x2e8>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591c:	d012      	beq.n	8005944 <UART_SetConfig+0x1f8>
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005922:	d802      	bhi.n	800592a <UART_SetConfig+0x1de>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <UART_SetConfig+0x1ec>
 8005928:	e012      	b.n	8005950 <UART_SetConfig+0x204>
 800592a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592e:	d00c      	beq.n	800594a <UART_SetConfig+0x1fe>
 8005930:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005934:	d003      	beq.n	800593e <UART_SetConfig+0x1f2>
 8005936:	e00b      	b.n	8005950 <UART_SetConfig+0x204>
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e00e      	b.n	800595c <UART_SetConfig+0x210>
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x210>
 8005944:	2304      	movs	r3, #4
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e008      	b.n	800595c <UART_SetConfig+0x210>
 800594a:	2308      	movs	r3, #8
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e005      	b.n	800595c <UART_SetConfig+0x210>
 8005950:	2310      	movs	r3, #16
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	bf00      	nop
 8005956:	e001      	b.n	800595c <UART_SetConfig+0x210>
 8005958:	2310      	movs	r3, #16
 800595a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005964:	f040 8090 	bne.w	8005a88 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005968:	7ffb      	ldrb	r3, [r7, #31]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d86c      	bhi.n	8005a48 <UART_SetConfig+0x2fc>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0x228>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005999 	.word	0x08005999
 8005978:	080059b9 	.word	0x080059b9
 800597c:	080059d9 	.word	0x080059d9
 8005980:	08005a49 	.word	0x08005a49
 8005984:	080059f5 	.word	0x080059f5
 8005988:	08005a49 	.word	0x08005a49
 800598c:	08005a49 	.word	0x08005a49
 8005990:	08005a49 	.word	0x08005a49
 8005994:	08005a15 	.word	0x08005a15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005998:	f7fe fc8a 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 800599c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	005a      	lsls	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	61bb      	str	r3, [r7, #24]
        break;
 80059b6:	e04a      	b.n	8005a4e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe fc9c 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 80059bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	005a      	lsls	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	441a      	add	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	61bb      	str	r3, [r7, #24]
        break;
 80059d6:	e03a      	b.n	8005a4e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80059e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6852      	ldr	r2, [r2, #4]
 80059ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	61bb      	str	r3, [r7, #24]
        break;
 80059f2:	e02c      	b.n	8005a4e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f4:	f7fe fbe6 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 80059f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	005a      	lsls	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	61bb      	str	r3, [r7, #24]
        break;
 8005a12:	e01c      	b.n	8005a4e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	61bb      	str	r3, [r7, #24]
        break;
 8005a2a:	e010      	b.n	8005a4e <UART_SetConfig+0x302>
 8005a2c:	efff69f3 	.word	0xefff69f3
 8005a30:	40013800 	.word	0x40013800
 8005a34:	40021000 	.word	0x40021000
 8005a38:	40004400 	.word	0x40004400
 8005a3c:	40004800 	.word	0x40004800
 8005a40:	40004c00 	.word	0x40004c00
 8005a44:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
        break;
 8005a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b0f      	cmp	r3, #15
 8005a52:	d916      	bls.n	8005a82 <UART_SetConfig+0x336>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5a:	d212      	bcs.n	8005a82 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f023 030f 	bic.w	r3, r3, #15
 8005a64:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	897a      	ldrh	r2, [r7, #10]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	e072      	b.n	8005b68 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
 8005a86:	e06f      	b.n	8005b68 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005a88:	7ffb      	ldrb	r3, [r7, #31]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d85b      	bhi.n	8005b46 <UART_SetConfig+0x3fa>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x348>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ad7 	.word	0x08005ad7
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b47 	.word	0x08005b47
 8005aa4:	08005b11 	.word	0x08005b11
 8005aa8:	08005b47 	.word	0x08005b47
 8005aac:	08005b47 	.word	0x08005b47
 8005ab0:	08005b47 	.word	0x08005b47
 8005ab4:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fe fbfa 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8005abc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	085a      	lsrs	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	441a      	add	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	61bb      	str	r3, [r7, #24]
        break;
 8005ad4:	e03a      	b.n	8005b4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad6:	f7fe fc0d 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8005ada:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	085a      	lsrs	r2, r3, #1
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	61bb      	str	r3, [r7, #24]
        break;
 8005af2:	e02b      	b.n	8005b4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005afe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6852      	ldr	r2, [r2, #4]
 8005b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	61bb      	str	r3, [r7, #24]
        break;
 8005b0e:	e01d      	b.n	8005b4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b10:	f7fe fb58 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 8005b14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085a      	lsrs	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	441a      	add	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	61bb      	str	r3, [r7, #24]
        break;
 8005b2c:	e00e      	b.n	8005b4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	61bb      	str	r3, [r7, #24]
        break;
 8005b44:	e002      	b.n	8005b4c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
        break;
 8005b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b0f      	cmp	r3, #15
 8005b50:	d908      	bls.n	8005b64 <UART_SetConfig+0x418>
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b58:	d204      	bcs.n	8005b64 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	e001      	b.n	8005b68 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop

08005b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7e:	d10a      	bne.n	8005c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005cd2:	f7fc f99d 	bl	8002010 <HAL_GetTick>
 8005cd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d10e      	bne.n	8005d04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f82a 	bl	8005d4e <UART_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e020      	b.n	8005d46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d10e      	bne.n	8005d30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f814 	bl	8005d4e <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e00a      	b.n	8005d46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5e:	e05d      	b.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d66:	d059      	beq.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d68:	f7fc f952 	bl	8002010 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d302      	bcc.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11b      	bne.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e042      	b.n	8005e3c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02b      	beq.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd2:	d123      	bne.n	8005e1c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ddc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e00f      	b.n	8005e3c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4013      	ands	r3, r2
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d092      	beq.n	8005d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7fb fdda 	bl	8001a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebc:	2b21      	cmp	r3, #33	; 0x21
 8005ebe:	d12b      	bne.n	8005f18 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d110      	bne.n	8005eee <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eda:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eea:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005eec:	e014      	b.n	8005f18 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	b292      	uxth	r2, r2
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f30:	2b21      	cmp	r3, #33	; 0x21
 8005f32:	d12f      	bne.n	8005f94 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d110      	bne.n	8005f62 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005f60:	e018      	b.n	8005f94 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	881a      	ldrh	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f74:	b292      	uxth	r2, r2
 8005f76:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	1c9a      	adds	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7fb fd3f 	bl	8001a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	2b22      	cmp	r3, #34	; 0x22
 8005fe8:	d13a      	bne.n	8006060 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ff0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ff2:	89bb      	ldrh	r3, [r7, #12]
 8005ff4:	b2d9      	uxtb	r1, r3
 8005ff6:	89fb      	ldrh	r3, [r7, #14]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	400a      	ands	r2, r1
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d121      	bne.n	8006070 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800603a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fb fce9 	bl	8001a30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800605e:	e007      	b.n	8006070 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	619a      	str	r2, [r3, #24]
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006086:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800608c:	2b22      	cmp	r3, #34	; 0x22
 800608e:	d13a      	bne.n	8006106 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006096:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800609e:	89ba      	ldrh	r2, [r7, #12]
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	4013      	ands	r3, r2
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d121      	bne.n	8006116 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fb fc96 	bl	8001a30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006104:	e007      	b.n	8006116 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0208 	orr.w	r2, r2, #8
 8006114:	619a      	str	r2, [r3, #24]
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800613a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800613e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006146:	b29a      	uxth	r2, r3
 8006148:	89fb      	ldrh	r3, [r7, #14]
 800614a:	4313      	orrs	r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800616a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800616e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006176:	b29b      	uxth	r3, r3
 8006178:	b21a      	sxth	r2, r3
 800617a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800617e:	43db      	mvns	r3, r3
 8006180:	b21b      	sxth	r3, r3
 8006182:	4013      	ands	r3, r2
 8006184:	b21b      	sxth	r3, r3
 8006186:	b29a      	uxth	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800619c:	b084      	sub	sp, #16
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	f107 0014 	add.w	r0, r7, #20
 80061aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff ffaf 	bl	8006132 <USB_EnableGlobalInt>

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e0:	b004      	add	sp, #16
 80061e2:	4770      	bx	lr

080061e4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b095      	sub	sp, #84	; 0x54
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	f040 816d 	bne.w	80064d2 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	429a      	cmp	r2, r3
 8006202:	d909      	bls.n	8006218 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006210:	1ad2      	subs	r2, r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	619a      	str	r2, [r3, #24]
 8006216:	e005      	b.n	8006224 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	7b1b      	ldrb	r3, [r3, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11a      	bne.n	8006262 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6959      	ldr	r1, [r3, #20]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	88da      	ldrh	r2, [r3, #6]
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	b29b      	uxth	r3, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fac9 	bl	80067d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800623e:	687c      	ldr	r4, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	441c      	add	r4, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4423      	add	r3, r4
 8006252:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e11b      	b.n	800649a <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d06a      	beq.n	800634e <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006278:	687c      	ldr	r4, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d14c      	bne.n	800631c <USB_EPStartXfer+0x138>
 8006282:	687c      	ldr	r4, [r7, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	441c      	add	r4, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4423      	add	r3, r4
 8006296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d110      	bne.n	80062c4 <USB_EPStartXfer+0xe0>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e03f      	b.n	8006344 <USB_EPStartXfer+0x160>
 80062c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c6:	2b3e      	cmp	r3, #62	; 0x3e
 80062c8:	d811      	bhi.n	80062ee <USB_EPStartXfer+0x10a>
 80062ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	647b      	str	r3, [r7, #68]	; 0x44
 80062d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <USB_EPStartXfer+0xfc>
 80062da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062dc:	3301      	adds	r3, #1
 80062de:	647b      	str	r3, [r7, #68]	; 0x44
 80062e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e02a      	b.n	8006344 <USB_EPStartXfer+0x160>
 80062ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <USB_EPStartXfer+0x120>
 80062fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006300:	3b01      	subs	r3, #1
 8006302:	647b      	str	r3, [r7, #68]	; 0x44
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e013      	b.n	8006344 <USB_EPStartXfer+0x160>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d10f      	bne.n	8006344 <USB_EPStartXfer+0x160>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632a:	b29b      	uxth	r3, r3
 800632c:	441c      	add	r4, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4423      	add	r3, r4
 8006336:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633e:	b29a      	uxth	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	895b      	ldrh	r3, [r3, #10]
 8006348:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800634c:	e069      	b.n	8006422 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d14c      	bne.n	80063f0 <USB_EPStartXfer+0x20c>
 8006356:	687c      	ldr	r4, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	441c      	add	r4, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4423      	add	r3, r4
 800636a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d110      	bne.n	8006398 <USB_EPStartXfer+0x1b4>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637e:	b29a      	uxth	r2, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006390:	b29a      	uxth	r2, r3
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e040      	b.n	800641a <USB_EPStartXfer+0x236>
 8006398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639a:	2b3e      	cmp	r3, #62	; 0x3e
 800639c:	d811      	bhi.n	80063c2 <USB_EPStartXfer+0x1de>
 800639e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	643b      	str	r3, [r7, #64]	; 0x40
 80063a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <USB_EPStartXfer+0x1d0>
 80063ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b0:	3301      	adds	r3, #1
 80063b2:	643b      	str	r3, [r7, #64]	; 0x40
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e02b      	b.n	800641a <USB_EPStartXfer+0x236>
 80063c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	643b      	str	r3, [r7, #64]	; 0x40
 80063c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <USB_EPStartXfer+0x1f4>
 80063d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d4:	3b01      	subs	r3, #1
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40
 80063d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e014      	b.n	800641a <USB_EPStartXfer+0x236>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <USB_EPStartXfer+0x236>
 80063f8:	687c      	ldr	r4, [r7, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	441c      	add	r4, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	4423      	add	r3, r4
 800640c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006414:	b29a      	uxth	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	891b      	ldrh	r3, [r3, #8]
 800641e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6959      	ldr	r1, [r3, #20]
 8006426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006428:	b29b      	uxth	r3, r3
 800642a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9ce 	bl	80067d0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d115      	bne.n	8006468 <USB_EPStartXfer+0x284>
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	b29c      	uxth	r4, r3
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	441a      	add	r2, r3
 800645e:	4b96      	ldr	r3, [pc, #600]	; (80066b8 <USB_EPStartXfer+0x4d4>)
 8006460:	4323      	orrs	r3, r4
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]
 8006466:	e018      	b.n	800649a <USB_EPStartXfer+0x2b6>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d114      	bne.n	800649a <USB_EPStartXfer+0x2b6>
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	b29c      	uxth	r4, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	4b8a      	ldr	r3, [pc, #552]	; (80066bc <USB_EPStartXfer+0x4d8>)
 8006494:	4323      	orrs	r3, r4
 8006496:	b29b      	uxth	r3, r3
 8006498:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	b29c      	uxth	r4, r3
 80064b2:	f084 0310 	eor.w	r3, r4, #16
 80064b6:	b29c      	uxth	r4, r3
 80064b8:	f084 0320 	eor.w	r3, r4, #32
 80064bc:	b29c      	uxth	r4, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	441a      	add	r2, r3
 80064c8:	4b7d      	ldr	r3, [pc, #500]	; (80066c0 <USB_EPStartXfer+0x4dc>)
 80064ca:	4323      	orrs	r3, r4
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]
 80064d0:	e153      	b.n	800677a <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d909      	bls.n	80064f2 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	619a      	str	r2, [r3, #24]
 80064f0:	e005      	b.n	80064fe <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	7b1b      	ldrb	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d14c      	bne.n	80065a0 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006506:	687c      	ldr	r4, [r7, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	441c      	add	r4, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4423      	add	r3, r4
 800651a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006522:	2b00      	cmp	r3, #0
 8006524:	d110      	bne.n	8006548 <USB_EPStartXfer+0x364>
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800652e:	b29a      	uxth	r2, r3
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e0fd      	b.n	8006744 <USB_EPStartXfer+0x560>
 8006548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654a:	2b3e      	cmp	r3, #62	; 0x3e
 800654c:	d811      	bhi.n	8006572 <USB_EPStartXfer+0x38e>
 800654e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <USB_EPStartXfer+0x380>
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	3301      	adds	r3, #1
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006566:	b29b      	uxth	r3, r3
 8006568:	029b      	lsls	r3, r3, #10
 800656a:	b29a      	uxth	r2, r3
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	e0e8      	b.n	8006744 <USB_EPStartXfer+0x560>
 8006572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <USB_EPStartXfer+0x3a4>
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	3b01      	subs	r3, #1
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	b29b      	uxth	r3, r3
 800658c:	029b      	lsls	r3, r3, #10
 800658e:	b29b      	uxth	r3, r3
 8006590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006598:	b29a      	uxth	r2, r3
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e0d1      	b.n	8006744 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d14c      	bne.n	8006642 <USB_EPStartXfer+0x45e>
 80065a8:	687c      	ldr	r4, [r7, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	441c      	add	r4, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	4423      	add	r3, r4
 80065bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d110      	bne.n	80065ea <USB_EPStartXfer+0x406>
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	e040      	b.n	800666c <USB_EPStartXfer+0x488>
 80065ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ec:	2b3e      	cmp	r3, #62	; 0x3e
 80065ee:	d811      	bhi.n	8006614 <USB_EPStartXfer+0x430>
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <USB_EPStartXfer+0x422>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	3301      	adds	r3, #1
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29a      	uxth	r2, r3
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e02b      	b.n	800666c <USB_EPStartXfer+0x488>
 8006614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <USB_EPStartXfer+0x446>
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	3b01      	subs	r3, #1
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	b29b      	uxth	r3, r3
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	b29b      	uxth	r3, r3
 8006632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663a:	b29a      	uxth	r2, r3
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e014      	b.n	800666c <USB_EPStartXfer+0x488>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d110      	bne.n	800666c <USB_EPStartXfer+0x488>
 800664a:	687c      	ldr	r4, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	441c      	add	r4, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4423      	add	r3, r4
 800665e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	b29a      	uxth	r2, r3
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	687c      	ldr	r4, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d152      	bne.n	800671c <USB_EPStartXfer+0x538>
 8006676:	687c      	ldr	r4, [r7, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667e:	b29b      	uxth	r3, r3
 8006680:	441c      	add	r4, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4423      	add	r3, r4
 800668a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	2b00      	cmp	r3, #0
 8006694:	d116      	bne.n	80066c4 <USB_EPStartXfer+0x4e0>
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e045      	b.n	8006744 <USB_EPStartXfer+0x560>
 80066b8:	ffff80c0 	.word	0xffff80c0
 80066bc:	ffffc080 	.word	0xffffc080
 80066c0:	ffff8080 	.word	0xffff8080
 80066c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c6:	2b3e      	cmp	r3, #62	; 0x3e
 80066c8:	d811      	bhi.n	80066ee <USB_EPStartXfer+0x50a>
 80066ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <USB_EPStartXfer+0x4fc>
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	3301      	adds	r3, #1
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	029b      	lsls	r3, r3, #10
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e02a      	b.n	8006744 <USB_EPStartXfer+0x560>
 80066ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
 80066f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d102      	bne.n	8006704 <USB_EPStartXfer+0x520>
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	3b01      	subs	r3, #1
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006714:	b29a      	uxth	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e013      	b.n	8006744 <USB_EPStartXfer+0x560>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10f      	bne.n	8006744 <USB_EPStartXfer+0x560>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	441c      	add	r4, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4423      	add	r3, r4
 8006736:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
 800673c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673e:	b29a      	uxth	r2, r3
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	b29c      	uxth	r4, r3
 800675c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006760:	b29c      	uxth	r4, r3
 8006762:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006766:	b29c      	uxth	r4, r3
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	441a      	add	r2, r3
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <USB_EPStartXfer+0x5a0>)
 8006774:	4323      	orrs	r3, r4
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3754      	adds	r7, #84	; 0x54
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}
 8006784:	ffff8080 	.word	0xffff8080

08006788 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2280      	movs	r2, #128	; 0x80
 800679e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067be:	b29b      	uxth	r3, r3
 80067c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b08d      	sub	sp, #52	; 0x34
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	460b      	mov	r3, r1
 80067e0:	80fb      	strh	r3, [r7, #6]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067e6:	88bb      	ldrh	r3, [r7, #4]
 80067e8:	3301      	adds	r3, #1
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067f6:	88fa      	ldrh	r2, [r7, #6]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006806:	e01b      	b.n	8006840 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	b29a      	uxth	r2, r3
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	3302      	adds	r3, #2
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	3b01      	subs	r3, #1
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e0      	bne.n	8006808 <USB_WritePMA+0x38>
  }
}
 8006846:	bf00      	nop
 8006848:	3734      	adds	r7, #52	; 0x34
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006852:	b480      	push	{r7}
 8006854:	b08b      	sub	sp, #44	; 0x2c
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	4611      	mov	r1, r2
 800685e:	461a      	mov	r2, r3
 8006860:	460b      	mov	r3, r1
 8006862:	80fb      	strh	r3, [r7, #6]
 8006864:	4613      	mov	r3, r2
 8006866:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006868:	88bb      	ldrh	r3, [r7, #4]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
 8006888:	e018      	b.n	80068bc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	3302      	adds	r3, #2
 8006896:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	3b01      	subs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e3      	bne.n	800688a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80068c2:	88bb      	ldrh	r3, [r7, #4]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	701a      	strb	r2, [r3, #0]
  }
}
 80068de:	bf00      	nop
 80068e0:	372c      	adds	r7, #44	; 0x2c
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <atoi>:
 80068ea:	220a      	movs	r2, #10
 80068ec:	2100      	movs	r1, #0
 80068ee:	f000 b8d3 	b.w	8006a98 <strtol>
	...

080068f4 <__errno>:
 80068f4:	4b01      	ldr	r3, [pc, #4]	; (80068fc <__errno+0x8>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <__libc_init_array>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	4e0d      	ldr	r6, [pc, #52]	; (8006938 <__libc_init_array+0x38>)
 8006904:	4c0d      	ldr	r4, [pc, #52]	; (800693c <__libc_init_array+0x3c>)
 8006906:	1ba4      	subs	r4, r4, r6
 8006908:	10a4      	asrs	r4, r4, #2
 800690a:	2500      	movs	r5, #0
 800690c:	42a5      	cmp	r5, r4
 800690e:	d109      	bne.n	8006924 <__libc_init_array+0x24>
 8006910:	4e0b      	ldr	r6, [pc, #44]	; (8006940 <__libc_init_array+0x40>)
 8006912:	4c0c      	ldr	r4, [pc, #48]	; (8006944 <__libc_init_array+0x44>)
 8006914:	f000 ffc6 	bl	80078a4 <_init>
 8006918:	1ba4      	subs	r4, r4, r6
 800691a:	10a4      	asrs	r4, r4, #2
 800691c:	2500      	movs	r5, #0
 800691e:	42a5      	cmp	r5, r4
 8006920:	d105      	bne.n	800692e <__libc_init_array+0x2e>
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006928:	4798      	blx	r3
 800692a:	3501      	adds	r5, #1
 800692c:	e7ee      	b.n	800690c <__libc_init_array+0xc>
 800692e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006932:	4798      	blx	r3
 8006934:	3501      	adds	r5, #1
 8006936:	e7f2      	b.n	800691e <__libc_init_array+0x1e>
 8006938:	08007ec4 	.word	0x08007ec4
 800693c:	08007ec4 	.word	0x08007ec4
 8006940:	08007ec4 	.word	0x08007ec4
 8006944:	08007ec8 	.word	0x08007ec8

08006948 <memcpy>:
 8006948:	b510      	push	{r4, lr}
 800694a:	1e43      	subs	r3, r0, #1
 800694c:	440a      	add	r2, r1
 800694e:	4291      	cmp	r1, r2
 8006950:	d100      	bne.n	8006954 <memcpy+0xc>
 8006952:	bd10      	pop	{r4, pc}
 8006954:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800695c:	e7f7      	b.n	800694e <memcpy+0x6>

0800695e <memset>:
 800695e:	4402      	add	r2, r0
 8006960:	4603      	mov	r3, r0
 8006962:	4293      	cmp	r3, r2
 8006964:	d100      	bne.n	8006968 <memset+0xa>
 8006966:	4770      	bx	lr
 8006968:	f803 1b01 	strb.w	r1, [r3], #1
 800696c:	e7f9      	b.n	8006962 <memset+0x4>
	...

08006970 <iprintf>:
 8006970:	b40f      	push	{r0, r1, r2, r3}
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <iprintf+0x2c>)
 8006974:	b513      	push	{r0, r1, r4, lr}
 8006976:	681c      	ldr	r4, [r3, #0]
 8006978:	b124      	cbz	r4, 8006984 <iprintf+0x14>
 800697a:	69a3      	ldr	r3, [r4, #24]
 800697c:	b913      	cbnz	r3, 8006984 <iprintf+0x14>
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f8e0 	bl	8006b44 <__sinit>
 8006984:	ab05      	add	r3, sp, #20
 8006986:	9a04      	ldr	r2, [sp, #16]
 8006988:	68a1      	ldr	r1, [r4, #8]
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f9fd 	bl	8006d8c <_vfiprintf_r>
 8006992:	b002      	add	sp, #8
 8006994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006998:	b004      	add	sp, #16
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c

080069a0 <_strtol_l.isra.0>:
 80069a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	4680      	mov	r8, r0
 80069a6:	4689      	mov	r9, r1
 80069a8:	4692      	mov	sl, r2
 80069aa:	461e      	mov	r6, r3
 80069ac:	460f      	mov	r7, r1
 80069ae:	463d      	mov	r5, r7
 80069b0:	9808      	ldr	r0, [sp, #32]
 80069b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069b6:	f000 f94f 	bl	8006c58 <__locale_ctype_ptr_l>
 80069ba:	4420      	add	r0, r4
 80069bc:	7843      	ldrb	r3, [r0, #1]
 80069be:	f013 0308 	ands.w	r3, r3, #8
 80069c2:	d132      	bne.n	8006a2a <_strtol_l.isra.0+0x8a>
 80069c4:	2c2d      	cmp	r4, #45	; 0x2d
 80069c6:	d132      	bne.n	8006a2e <_strtol_l.isra.0+0x8e>
 80069c8:	787c      	ldrb	r4, [r7, #1]
 80069ca:	1cbd      	adds	r5, r7, #2
 80069cc:	2201      	movs	r2, #1
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d05d      	beq.n	8006a8e <_strtol_l.isra.0+0xee>
 80069d2:	2e10      	cmp	r6, #16
 80069d4:	d109      	bne.n	80069ea <_strtol_l.isra.0+0x4a>
 80069d6:	2c30      	cmp	r4, #48	; 0x30
 80069d8:	d107      	bne.n	80069ea <_strtol_l.isra.0+0x4a>
 80069da:	782b      	ldrb	r3, [r5, #0]
 80069dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069e0:	2b58      	cmp	r3, #88	; 0x58
 80069e2:	d14f      	bne.n	8006a84 <_strtol_l.isra.0+0xe4>
 80069e4:	786c      	ldrb	r4, [r5, #1]
 80069e6:	2610      	movs	r6, #16
 80069e8:	3502      	adds	r5, #2
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	bf14      	ite	ne
 80069ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80069f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80069f6:	2700      	movs	r7, #0
 80069f8:	fbb1 fcf6 	udiv	ip, r1, r6
 80069fc:	4638      	mov	r0, r7
 80069fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006a02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d817      	bhi.n	8006a3a <_strtol_l.isra.0+0x9a>
 8006a0a:	461c      	mov	r4, r3
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	dd23      	ble.n	8006a58 <_strtol_l.isra.0+0xb8>
 8006a10:	1c7b      	adds	r3, r7, #1
 8006a12:	d007      	beq.n	8006a24 <_strtol_l.isra.0+0x84>
 8006a14:	4584      	cmp	ip, r0
 8006a16:	d31c      	bcc.n	8006a52 <_strtol_l.isra.0+0xb2>
 8006a18:	d101      	bne.n	8006a1e <_strtol_l.isra.0+0x7e>
 8006a1a:	45a6      	cmp	lr, r4
 8006a1c:	db19      	blt.n	8006a52 <_strtol_l.isra.0+0xb2>
 8006a1e:	fb00 4006 	mla	r0, r0, r6, r4
 8006a22:	2701      	movs	r7, #1
 8006a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a28:	e7eb      	b.n	8006a02 <_strtol_l.isra.0+0x62>
 8006a2a:	462f      	mov	r7, r5
 8006a2c:	e7bf      	b.n	80069ae <_strtol_l.isra.0+0xe>
 8006a2e:	2c2b      	cmp	r4, #43	; 0x2b
 8006a30:	bf04      	itt	eq
 8006a32:	1cbd      	addeq	r5, r7, #2
 8006a34:	787c      	ldrbeq	r4, [r7, #1]
 8006a36:	461a      	mov	r2, r3
 8006a38:	e7c9      	b.n	80069ce <_strtol_l.isra.0+0x2e>
 8006a3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006a3e:	2b19      	cmp	r3, #25
 8006a40:	d801      	bhi.n	8006a46 <_strtol_l.isra.0+0xa6>
 8006a42:	3c37      	subs	r4, #55	; 0x37
 8006a44:	e7e2      	b.n	8006a0c <_strtol_l.isra.0+0x6c>
 8006a46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006a4a:	2b19      	cmp	r3, #25
 8006a4c:	d804      	bhi.n	8006a58 <_strtol_l.isra.0+0xb8>
 8006a4e:	3c57      	subs	r4, #87	; 0x57
 8006a50:	e7dc      	b.n	8006a0c <_strtol_l.isra.0+0x6c>
 8006a52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a56:	e7e5      	b.n	8006a24 <_strtol_l.isra.0+0x84>
 8006a58:	1c7b      	adds	r3, r7, #1
 8006a5a:	d108      	bne.n	8006a6e <_strtol_l.isra.0+0xce>
 8006a5c:	2322      	movs	r3, #34	; 0x22
 8006a5e:	f8c8 3000 	str.w	r3, [r8]
 8006a62:	4608      	mov	r0, r1
 8006a64:	f1ba 0f00 	cmp.w	sl, #0
 8006a68:	d107      	bne.n	8006a7a <_strtol_l.isra.0+0xda>
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	b102      	cbz	r2, 8006a72 <_strtol_l.isra.0+0xd2>
 8006a70:	4240      	negs	r0, r0
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	d0f8      	beq.n	8006a6a <_strtol_l.isra.0+0xca>
 8006a78:	b10f      	cbz	r7, 8006a7e <_strtol_l.isra.0+0xde>
 8006a7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006a7e:	f8ca 9000 	str.w	r9, [sl]
 8006a82:	e7f2      	b.n	8006a6a <_strtol_l.isra.0+0xca>
 8006a84:	2430      	movs	r4, #48	; 0x30
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d1af      	bne.n	80069ea <_strtol_l.isra.0+0x4a>
 8006a8a:	2608      	movs	r6, #8
 8006a8c:	e7ad      	b.n	80069ea <_strtol_l.isra.0+0x4a>
 8006a8e:	2c30      	cmp	r4, #48	; 0x30
 8006a90:	d0a3      	beq.n	80069da <_strtol_l.isra.0+0x3a>
 8006a92:	260a      	movs	r6, #10
 8006a94:	e7a9      	b.n	80069ea <_strtol_l.isra.0+0x4a>
	...

08006a98 <strtol>:
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <strtol+0x24>)
 8006a9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	4d08      	ldr	r5, [pc, #32]	; (8006ac0 <strtol+0x28>)
 8006aa0:	6a23      	ldr	r3, [r4, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf08      	it	eq
 8006aa6:	462b      	moveq	r3, r5
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	460a      	mov	r2, r1
 8006aae:	4601      	mov	r1, r0
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff ff75 	bl	80069a0 <_strtol_l.isra.0>
 8006ab6:	b003      	add	sp, #12
 8006ab8:	bd30      	pop	{r4, r5, pc}
 8006aba:	bf00      	nop
 8006abc:	2000000c 	.word	0x2000000c
 8006ac0:	20000070 	.word	0x20000070

08006ac4 <std>:
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ace:	6083      	str	r3, [r0, #8]
 8006ad0:	8181      	strh	r1, [r0, #12]
 8006ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ad4:	81c2      	strh	r2, [r0, #14]
 8006ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ada:	6183      	str	r3, [r0, #24]
 8006adc:	4619      	mov	r1, r3
 8006ade:	2208      	movs	r2, #8
 8006ae0:	305c      	adds	r0, #92	; 0x5c
 8006ae2:	f7ff ff3c 	bl	800695e <memset>
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <std+0x38>)
 8006ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <std+0x3c>)
 8006aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <std+0x40>)
 8006af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x44>)
 8006af4:	6224      	str	r4, [r4, #32]
 8006af6:	6323      	str	r3, [r4, #48]	; 0x30
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	080072e9 	.word	0x080072e9
 8006b00:	0800730b 	.word	0x0800730b
 8006b04:	08007343 	.word	0x08007343
 8006b08:	08007367 	.word	0x08007367

08006b0c <_cleanup_r>:
 8006b0c:	4901      	ldr	r1, [pc, #4]	; (8006b14 <_cleanup_r+0x8>)
 8006b0e:	f000 b885 	b.w	8006c1c <_fwalk_reent>
 8006b12:	bf00      	nop
 8006b14:	0800765d 	.word	0x0800765d

08006b18 <__sfmoreglue>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	1e4a      	subs	r2, r1, #1
 8006b1c:	2568      	movs	r5, #104	; 0x68
 8006b1e:	4355      	muls	r5, r2
 8006b20:	460e      	mov	r6, r1
 8006b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b26:	f000 f8ad 	bl	8006c84 <_malloc_r>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	b140      	cbz	r0, 8006b40 <__sfmoreglue+0x28>
 8006b2e:	2100      	movs	r1, #0
 8006b30:	e9c0 1600 	strd	r1, r6, [r0]
 8006b34:	300c      	adds	r0, #12
 8006b36:	60a0      	str	r0, [r4, #8]
 8006b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b3c:	f7ff ff0f 	bl	800695e <memset>
 8006b40:	4620      	mov	r0, r4
 8006b42:	bd70      	pop	{r4, r5, r6, pc}

08006b44 <__sinit>:
 8006b44:	6983      	ldr	r3, [r0, #24]
 8006b46:	b510      	push	{r4, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	bb33      	cbnz	r3, 8006b9a <__sinit+0x56>
 8006b4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b50:	6503      	str	r3, [r0, #80]	; 0x50
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <__sinit+0x58>)
 8006b54:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <__sinit+0x5c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6282      	str	r2, [r0, #40]	; 0x28
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	bf04      	itt	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	6183      	streq	r3, [r0, #24]
 8006b62:	f000 f81f 	bl	8006ba4 <__sfp>
 8006b66:	6060      	str	r0, [r4, #4]
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 f81b 	bl	8006ba4 <__sfp>
 8006b6e:	60a0      	str	r0, [r4, #8]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f817 	bl	8006ba4 <__sfp>
 8006b76:	2200      	movs	r2, #0
 8006b78:	60e0      	str	r0, [r4, #12]
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	6860      	ldr	r0, [r4, #4]
 8006b7e:	f7ff ffa1 	bl	8006ac4 <std>
 8006b82:	2201      	movs	r2, #1
 8006b84:	2109      	movs	r1, #9
 8006b86:	68a0      	ldr	r0, [r4, #8]
 8006b88:	f7ff ff9c 	bl	8006ac4 <std>
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	2112      	movs	r1, #18
 8006b90:	68e0      	ldr	r0, [r4, #12]
 8006b92:	f7ff ff97 	bl	8006ac4 <std>
 8006b96:	2301      	movs	r3, #1
 8006b98:	61a3      	str	r3, [r4, #24]
 8006b9a:	bd10      	pop	{r4, pc}
 8006b9c:	08007d20 	.word	0x08007d20
 8006ba0:	08006b0d 	.word	0x08006b0d

08006ba4 <__sfp>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <__sfp+0x70>)
 8006ba8:	681e      	ldr	r6, [r3, #0]
 8006baa:	69b3      	ldr	r3, [r6, #24]
 8006bac:	4607      	mov	r7, r0
 8006bae:	b913      	cbnz	r3, 8006bb6 <__sfp+0x12>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff ffc7 	bl	8006b44 <__sinit>
 8006bb6:	3648      	adds	r6, #72	; 0x48
 8006bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	d503      	bpl.n	8006bc8 <__sfp+0x24>
 8006bc0:	6833      	ldr	r3, [r6, #0]
 8006bc2:	b133      	cbz	r3, 8006bd2 <__sfp+0x2e>
 8006bc4:	6836      	ldr	r6, [r6, #0]
 8006bc6:	e7f7      	b.n	8006bb8 <__sfp+0x14>
 8006bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bcc:	b16d      	cbz	r5, 8006bea <__sfp+0x46>
 8006bce:	3468      	adds	r4, #104	; 0x68
 8006bd0:	e7f4      	b.n	8006bbc <__sfp+0x18>
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f7ff ff9f 	bl	8006b18 <__sfmoreglue>
 8006bda:	6030      	str	r0, [r6, #0]
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1f1      	bne.n	8006bc4 <__sfp+0x20>
 8006be0:	230c      	movs	r3, #12
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4604      	mov	r4, r0
 8006be6:	4620      	mov	r0, r4
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <__sfp+0x74>)
 8006bec:	6665      	str	r5, [r4, #100]	; 0x64
 8006bee:	e9c4 5500 	strd	r5, r5, [r4]
 8006bf2:	60a5      	str	r5, [r4, #8]
 8006bf4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006bf8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c04:	f7ff feab 	bl	800695e <memset>
 8006c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c10:	e7e9      	b.n	8006be6 <__sfp+0x42>
 8006c12:	bf00      	nop
 8006c14:	08007d20 	.word	0x08007d20
 8006c18:	ffff0001 	.word	0xffff0001

08006c1c <_fwalk_reent>:
 8006c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c20:	4680      	mov	r8, r0
 8006c22:	4689      	mov	r9, r1
 8006c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c28:	2600      	movs	r6, #0
 8006c2a:	b914      	cbnz	r4, 8006c32 <_fwalk_reent+0x16>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c36:	3f01      	subs	r7, #1
 8006c38:	d501      	bpl.n	8006c3e <_fwalk_reent+0x22>
 8006c3a:	6824      	ldr	r4, [r4, #0]
 8006c3c:	e7f5      	b.n	8006c2a <_fwalk_reent+0xe>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d907      	bls.n	8006c54 <_fwalk_reent+0x38>
 8006c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	d003      	beq.n	8006c54 <_fwalk_reent+0x38>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4640      	mov	r0, r8
 8006c50:	47c8      	blx	r9
 8006c52:	4306      	orrs	r6, r0
 8006c54:	3568      	adds	r5, #104	; 0x68
 8006c56:	e7ee      	b.n	8006c36 <_fwalk_reent+0x1a>

08006c58 <__locale_ctype_ptr_l>:
 8006c58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c5c:	4770      	bx	lr

08006c5e <__ascii_mbtowc>:
 8006c5e:	b082      	sub	sp, #8
 8006c60:	b901      	cbnz	r1, 8006c64 <__ascii_mbtowc+0x6>
 8006c62:	a901      	add	r1, sp, #4
 8006c64:	b142      	cbz	r2, 8006c78 <__ascii_mbtowc+0x1a>
 8006c66:	b14b      	cbz	r3, 8006c7c <__ascii_mbtowc+0x1e>
 8006c68:	7813      	ldrb	r3, [r2, #0]
 8006c6a:	600b      	str	r3, [r1, #0]
 8006c6c:	7812      	ldrb	r2, [r2, #0]
 8006c6e:	1c10      	adds	r0, r2, #0
 8006c70:	bf18      	it	ne
 8006c72:	2001      	movne	r0, #1
 8006c74:	b002      	add	sp, #8
 8006c76:	4770      	bx	lr
 8006c78:	4610      	mov	r0, r2
 8006c7a:	e7fb      	b.n	8006c74 <__ascii_mbtowc+0x16>
 8006c7c:	f06f 0001 	mvn.w	r0, #1
 8006c80:	e7f8      	b.n	8006c74 <__ascii_mbtowc+0x16>
	...

08006c84 <_malloc_r>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	1ccd      	adds	r5, r1, #3
 8006c88:	f025 0503 	bic.w	r5, r5, #3
 8006c8c:	3508      	adds	r5, #8
 8006c8e:	2d0c      	cmp	r5, #12
 8006c90:	bf38      	it	cc
 8006c92:	250c      	movcc	r5, #12
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	4606      	mov	r6, r0
 8006c98:	db01      	blt.n	8006c9e <_malloc_r+0x1a>
 8006c9a:	42a9      	cmp	r1, r5
 8006c9c:	d903      	bls.n	8006ca6 <_malloc_r+0x22>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	f000 fd79 	bl	800779c <__malloc_lock>
 8006caa:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <_malloc_r+0xac>)
 8006cac:	6814      	ldr	r4, [r2, #0]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	b991      	cbnz	r1, 8006cd8 <_malloc_r+0x54>
 8006cb2:	4c20      	ldr	r4, [pc, #128]	; (8006d34 <_malloc_r+0xb0>)
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	b91b      	cbnz	r3, 8006cc0 <_malloc_r+0x3c>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 fb05 	bl	80072c8 <_sbrk_r>
 8006cbe:	6020      	str	r0, [r4, #0]
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 fb00 	bl	80072c8 <_sbrk_r>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d124      	bne.n	8006d16 <_malloc_r+0x92>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 fd64 	bl	800779e <__malloc_unlock>
 8006cd6:	e7e4      	b.n	8006ca2 <_malloc_r+0x1e>
 8006cd8:	680b      	ldr	r3, [r1, #0]
 8006cda:	1b5b      	subs	r3, r3, r5
 8006cdc:	d418      	bmi.n	8006d10 <_malloc_r+0x8c>
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d90f      	bls.n	8006d02 <_malloc_r+0x7e>
 8006ce2:	600b      	str	r3, [r1, #0]
 8006ce4:	50cd      	str	r5, [r1, r3]
 8006ce6:	18cc      	adds	r4, r1, r3
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 fd58 	bl	800779e <__malloc_unlock>
 8006cee:	f104 000b 	add.w	r0, r4, #11
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	f020 0007 	bic.w	r0, r0, #7
 8006cf8:	1ac3      	subs	r3, r0, r3
 8006cfa:	d0d3      	beq.n	8006ca4 <_malloc_r+0x20>
 8006cfc:	425a      	negs	r2, r3
 8006cfe:	50e2      	str	r2, [r4, r3]
 8006d00:	e7d0      	b.n	8006ca4 <_malloc_r+0x20>
 8006d02:	428c      	cmp	r4, r1
 8006d04:	684b      	ldr	r3, [r1, #4]
 8006d06:	bf16      	itet	ne
 8006d08:	6063      	strne	r3, [r4, #4]
 8006d0a:	6013      	streq	r3, [r2, #0]
 8006d0c:	460c      	movne	r4, r1
 8006d0e:	e7eb      	b.n	8006ce8 <_malloc_r+0x64>
 8006d10:	460c      	mov	r4, r1
 8006d12:	6849      	ldr	r1, [r1, #4]
 8006d14:	e7cc      	b.n	8006cb0 <_malloc_r+0x2c>
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d005      	beq.n	8006d2c <_malloc_r+0xa8>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 fad0 	bl	80072c8 <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d0cf      	beq.n	8006ccc <_malloc_r+0x48>
 8006d2c:	6025      	str	r5, [r4, #0]
 8006d2e:	e7db      	b.n	8006ce8 <_malloc_r+0x64>
 8006d30:	20000a44 	.word	0x20000a44
 8006d34:	20000a48 	.word	0x20000a48

08006d38 <__sfputc_r>:
 8006d38:	6893      	ldr	r3, [r2, #8]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	b410      	push	{r4}
 8006d40:	6093      	str	r3, [r2, #8]
 8006d42:	da08      	bge.n	8006d56 <__sfputc_r+0x1e>
 8006d44:	6994      	ldr	r4, [r2, #24]
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	db01      	blt.n	8006d4e <__sfputc_r+0x16>
 8006d4a:	290a      	cmp	r1, #10
 8006d4c:	d103      	bne.n	8006d56 <__sfputc_r+0x1e>
 8006d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d52:	f000 bb0d 	b.w	8007370 <__swbuf_r>
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	1c58      	adds	r0, r3, #1
 8006d5a:	6010      	str	r0, [r2, #0]
 8006d5c:	7019      	strb	r1, [r3, #0]
 8006d5e:	4608      	mov	r0, r1
 8006d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <__sfputs_r>:
 8006d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d68:	4606      	mov	r6, r0
 8006d6a:	460f      	mov	r7, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	18d5      	adds	r5, r2, r3
 8006d70:	42ac      	cmp	r4, r5
 8006d72:	d101      	bne.n	8006d78 <__sfputs_r+0x12>
 8006d74:	2000      	movs	r0, #0
 8006d76:	e007      	b.n	8006d88 <__sfputs_r+0x22>
 8006d78:	463a      	mov	r2, r7
 8006d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ffda 	bl	8006d38 <__sfputc_r>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d1f3      	bne.n	8006d70 <__sfputs_r+0xa>
 8006d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d8c <_vfiprintf_r>:
 8006d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	460c      	mov	r4, r1
 8006d92:	b09d      	sub	sp, #116	; 0x74
 8006d94:	4617      	mov	r7, r2
 8006d96:	461d      	mov	r5, r3
 8006d98:	4606      	mov	r6, r0
 8006d9a:	b118      	cbz	r0, 8006da4 <_vfiprintf_r+0x18>
 8006d9c:	6983      	ldr	r3, [r0, #24]
 8006d9e:	b90b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x18>
 8006da0:	f7ff fed0 	bl	8006b44 <__sinit>
 8006da4:	4b7c      	ldr	r3, [pc, #496]	; (8006f98 <_vfiprintf_r+0x20c>)
 8006da6:	429c      	cmp	r4, r3
 8006da8:	d158      	bne.n	8006e5c <_vfiprintf_r+0xd0>
 8006daa:	6874      	ldr	r4, [r6, #4]
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	0718      	lsls	r0, r3, #28
 8006db0:	d55e      	bpl.n	8006e70 <_vfiprintf_r+0xe4>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d05b      	beq.n	8006e70 <_vfiprintf_r+0xe4>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc2:	2330      	movs	r3, #48	; 0x30
 8006dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc8:	9503      	str	r5, [sp, #12]
 8006dca:	f04f 0b01 	mov.w	fp, #1
 8006dce:	46b8      	mov	r8, r7
 8006dd0:	4645      	mov	r5, r8
 8006dd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006dd6:	b10b      	cbz	r3, 8006ddc <_vfiprintf_r+0x50>
 8006dd8:	2b25      	cmp	r3, #37	; 0x25
 8006dda:	d154      	bne.n	8006e86 <_vfiprintf_r+0xfa>
 8006ddc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006de0:	d00b      	beq.n	8006dfa <_vfiprintf_r+0x6e>
 8006de2:	4653      	mov	r3, sl
 8006de4:	463a      	mov	r2, r7
 8006de6:	4621      	mov	r1, r4
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff ffbc 	bl	8006d66 <__sfputs_r>
 8006dee:	3001      	adds	r0, #1
 8006df0:	f000 80c2 	beq.w	8006f78 <_vfiprintf_r+0x1ec>
 8006df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df6:	4453      	add	r3, sl
 8006df8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfa:	f898 3000 	ldrb.w	r3, [r8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80ba 	beq.w	8006f78 <_vfiprintf_r+0x1ec>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e16:	931a      	str	r3, [sp, #104]	; 0x68
 8006e18:	46a8      	mov	r8, r5
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006e20:	485e      	ldr	r0, [pc, #376]	; (8006f9c <_vfiprintf_r+0x210>)
 8006e22:	f7f9 f9dd 	bl	80001e0 <memchr>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	bb78      	cbnz	r0, 8006e8a <_vfiprintf_r+0xfe>
 8006e2a:	06d9      	lsls	r1, r3, #27
 8006e2c:	bf44      	itt	mi
 8006e2e:	2220      	movmi	r2, #32
 8006e30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e34:	071a      	lsls	r2, r3, #28
 8006e36:	bf44      	itt	mi
 8006e38:	222b      	movmi	r2, #43	; 0x2b
 8006e3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e3e:	782a      	ldrb	r2, [r5, #0]
 8006e40:	2a2a      	cmp	r2, #42	; 0x2a
 8006e42:	d02a      	beq.n	8006e9a <_vfiprintf_r+0x10e>
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	46a8      	mov	r8, r5
 8006e48:	2000      	movs	r0, #0
 8006e4a:	250a      	movs	r5, #10
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e52:	3b30      	subs	r3, #48	; 0x30
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d969      	bls.n	8006f2c <_vfiprintf_r+0x1a0>
 8006e58:	b360      	cbz	r0, 8006eb4 <_vfiprintf_r+0x128>
 8006e5a:	e024      	b.n	8006ea6 <_vfiprintf_r+0x11a>
 8006e5c:	4b50      	ldr	r3, [pc, #320]	; (8006fa0 <_vfiprintf_r+0x214>)
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d101      	bne.n	8006e66 <_vfiprintf_r+0xda>
 8006e62:	68b4      	ldr	r4, [r6, #8]
 8006e64:	e7a2      	b.n	8006dac <_vfiprintf_r+0x20>
 8006e66:	4b4f      	ldr	r3, [pc, #316]	; (8006fa4 <_vfiprintf_r+0x218>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	bf08      	it	eq
 8006e6c:	68f4      	ldreq	r4, [r6, #12]
 8006e6e:	e79d      	b.n	8006dac <_vfiprintf_r+0x20>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 faee 	bl	8007454 <__swsetup_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d09d      	beq.n	8006db8 <_vfiprintf_r+0x2c>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e80:	b01d      	add	sp, #116	; 0x74
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	46a8      	mov	r8, r5
 8006e88:	e7a2      	b.n	8006dd0 <_vfiprintf_r+0x44>
 8006e8a:	4a44      	ldr	r2, [pc, #272]	; (8006f9c <_vfiprintf_r+0x210>)
 8006e8c:	1a80      	subs	r0, r0, r2
 8006e8e:	fa0b f000 	lsl.w	r0, fp, r0
 8006e92:	4318      	orrs	r0, r3
 8006e94:	9004      	str	r0, [sp, #16]
 8006e96:	4645      	mov	r5, r8
 8006e98:	e7be      	b.n	8006e18 <_vfiprintf_r+0x8c>
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	1d11      	adds	r1, r2, #4
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	9103      	str	r1, [sp, #12]
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	db01      	blt.n	8006eaa <_vfiprintf_r+0x11e>
 8006ea6:	9207      	str	r2, [sp, #28]
 8006ea8:	e004      	b.n	8006eb4 <_vfiprintf_r+0x128>
 8006eaa:	4252      	negs	r2, r2
 8006eac:	f043 0302 	orr.w	r3, r3, #2
 8006eb0:	9207      	str	r2, [sp, #28]
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	f898 3000 	ldrb.w	r3, [r8]
 8006eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eba:	d10e      	bne.n	8006eda <_vfiprintf_r+0x14e>
 8006ebc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec2:	d138      	bne.n	8006f36 <_vfiprintf_r+0x1aa>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1d1a      	adds	r2, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	bfb8      	it	lt
 8006ed0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ed4:	f108 0802 	add.w	r8, r8, #2
 8006ed8:	9305      	str	r3, [sp, #20]
 8006eda:	4d33      	ldr	r5, [pc, #204]	; (8006fa8 <_vfiprintf_r+0x21c>)
 8006edc:	f898 1000 	ldrb.w	r1, [r8]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7f9 f97c 	bl	80001e0 <memchr>
 8006ee8:	b140      	cbz	r0, 8006efc <_vfiprintf_r+0x170>
 8006eea:	2340      	movs	r3, #64	; 0x40
 8006eec:	1b40      	subs	r0, r0, r5
 8006eee:	fa03 f000 	lsl.w	r0, r3, r0
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	4303      	orrs	r3, r0
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	f898 1000 	ldrb.w	r1, [r8]
 8006f00:	482a      	ldr	r0, [pc, #168]	; (8006fac <_vfiprintf_r+0x220>)
 8006f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f06:	2206      	movs	r2, #6
 8006f08:	f108 0701 	add.w	r7, r8, #1
 8006f0c:	f7f9 f968 	bl	80001e0 <memchr>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d037      	beq.n	8006f84 <_vfiprintf_r+0x1f8>
 8006f14:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <_vfiprintf_r+0x224>)
 8006f16:	bb1b      	cbnz	r3, 8006f60 <_vfiprintf_r+0x1d4>
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	3307      	adds	r3, #7
 8006f1c:	f023 0307 	bic.w	r3, r3, #7
 8006f20:	3308      	adds	r3, #8
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	444b      	add	r3, r9
 8006f28:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2a:	e750      	b.n	8006dce <_vfiprintf_r+0x42>
 8006f2c:	fb05 3202 	mla	r2, r5, r2, r3
 8006f30:	2001      	movs	r0, #1
 8006f32:	4688      	mov	r8, r1
 8006f34:	e78a      	b.n	8006e4c <_vfiprintf_r+0xc0>
 8006f36:	2300      	movs	r3, #0
 8006f38:	f108 0801 	add.w	r8, r8, #1
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	250a      	movs	r5, #10
 8006f42:	4640      	mov	r0, r8
 8006f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f48:	3a30      	subs	r2, #48	; 0x30
 8006f4a:	2a09      	cmp	r2, #9
 8006f4c:	d903      	bls.n	8006f56 <_vfiprintf_r+0x1ca>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0c3      	beq.n	8006eda <_vfiprintf_r+0x14e>
 8006f52:	9105      	str	r1, [sp, #20]
 8006f54:	e7c1      	b.n	8006eda <_vfiprintf_r+0x14e>
 8006f56:	fb05 2101 	mla	r1, r5, r1, r2
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	e7f0      	b.n	8006f42 <_vfiprintf_r+0x1b6>
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4622      	mov	r2, r4
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <_vfiprintf_r+0x228>)
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f3af 8000 	nop.w
 8006f70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006f74:	4681      	mov	r9, r0
 8006f76:	d1d5      	bne.n	8006f24 <_vfiprintf_r+0x198>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	065b      	lsls	r3, r3, #25
 8006f7c:	f53f af7e 	bmi.w	8006e7c <_vfiprintf_r+0xf0>
 8006f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f82:	e77d      	b.n	8006e80 <_vfiprintf_r+0xf4>
 8006f84:	ab03      	add	r3, sp, #12
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4622      	mov	r2, r4
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <_vfiprintf_r+0x228>)
 8006f8c:	a904      	add	r1, sp, #16
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f000 f888 	bl	80070a4 <_printf_i>
 8006f94:	e7ec      	b.n	8006f70 <_vfiprintf_r+0x1e4>
 8006f96:	bf00      	nop
 8006f98:	08007d44 	.word	0x08007d44
 8006f9c:	08007d8e 	.word	0x08007d8e
 8006fa0:	08007d64 	.word	0x08007d64
 8006fa4:	08007d24 	.word	0x08007d24
 8006fa8:	08007d94 	.word	0x08007d94
 8006fac:	08007d98 	.word	0x08007d98
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	08006d67 	.word	0x08006d67

08006fb8 <_printf_common>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	4691      	mov	r9, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	688a      	ldr	r2, [r1, #8]
 8006fc2:	690b      	ldr	r3, [r1, #16]
 8006fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bfb8      	it	lt
 8006fcc:	4613      	movlt	r3, r2
 8006fce:	f8c9 3000 	str.w	r3, [r9]
 8006fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	b112      	cbz	r2, 8006fe2 <_printf_common+0x2a>
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c9 3000 	str.w	r3, [r9]
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	0699      	lsls	r1, r3, #26
 8006fe6:	bf42      	ittt	mi
 8006fe8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006fec:	3302      	addmi	r3, #2
 8006fee:	f8c9 3000 	strmi.w	r3, [r9]
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	f015 0506 	ands.w	r5, r5, #6
 8006ff8:	d107      	bne.n	800700a <_printf_common+0x52>
 8006ffa:	f104 0a19 	add.w	sl, r4, #25
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	f8d9 2000 	ldr.w	r2, [r9]
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	42ab      	cmp	r3, r5
 8007008:	dc28      	bgt.n	800705c <_printf_common+0xa4>
 800700a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	3300      	adds	r3, #0
 8007012:	bf18      	it	ne
 8007014:	2301      	movne	r3, #1
 8007016:	0692      	lsls	r2, r2, #26
 8007018:	d42d      	bmi.n	8007076 <_printf_common+0xbe>
 800701a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800701e:	4639      	mov	r1, r7
 8007020:	4630      	mov	r0, r6
 8007022:	47c0      	blx	r8
 8007024:	3001      	adds	r0, #1
 8007026:	d020      	beq.n	800706a <_printf_common+0xb2>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	68e5      	ldr	r5, [r4, #12]
 800702c:	f8d9 2000 	ldr.w	r2, [r9]
 8007030:	f003 0306 	and.w	r3, r3, #6
 8007034:	2b04      	cmp	r3, #4
 8007036:	bf08      	it	eq
 8007038:	1aad      	subeq	r5, r5, r2
 800703a:	68a3      	ldr	r3, [r4, #8]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	bf0c      	ite	eq
 8007040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007044:	2500      	movne	r5, #0
 8007046:	4293      	cmp	r3, r2
 8007048:	bfc4      	itt	gt
 800704a:	1a9b      	subgt	r3, r3, r2
 800704c:	18ed      	addgt	r5, r5, r3
 800704e:	f04f 0900 	mov.w	r9, #0
 8007052:	341a      	adds	r4, #26
 8007054:	454d      	cmp	r5, r9
 8007056:	d11a      	bne.n	800708e <_printf_common+0xd6>
 8007058:	2000      	movs	r0, #0
 800705a:	e008      	b.n	800706e <_printf_common+0xb6>
 800705c:	2301      	movs	r3, #1
 800705e:	4652      	mov	r2, sl
 8007060:	4639      	mov	r1, r7
 8007062:	4630      	mov	r0, r6
 8007064:	47c0      	blx	r8
 8007066:	3001      	adds	r0, #1
 8007068:	d103      	bne.n	8007072 <_printf_common+0xba>
 800706a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007072:	3501      	adds	r5, #1
 8007074:	e7c3      	b.n	8006ffe <_printf_common+0x46>
 8007076:	18e1      	adds	r1, r4, r3
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	2030      	movs	r0, #48	; 0x30
 800707c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007080:	4422      	add	r2, r4
 8007082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007086:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800708a:	3302      	adds	r3, #2
 800708c:	e7c5      	b.n	800701a <_printf_common+0x62>
 800708e:	2301      	movs	r3, #1
 8007090:	4622      	mov	r2, r4
 8007092:	4639      	mov	r1, r7
 8007094:	4630      	mov	r0, r6
 8007096:	47c0      	blx	r8
 8007098:	3001      	adds	r0, #1
 800709a:	d0e6      	beq.n	800706a <_printf_common+0xb2>
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e7d8      	b.n	8007054 <_printf_common+0x9c>
	...

080070a4 <_printf_i>:
 80070a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070ac:	460c      	mov	r4, r1
 80070ae:	7e09      	ldrb	r1, [r1, #24]
 80070b0:	b085      	sub	sp, #20
 80070b2:	296e      	cmp	r1, #110	; 0x6e
 80070b4:	4617      	mov	r7, r2
 80070b6:	4606      	mov	r6, r0
 80070b8:	4698      	mov	r8, r3
 80070ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070bc:	f000 80b3 	beq.w	8007226 <_printf_i+0x182>
 80070c0:	d822      	bhi.n	8007108 <_printf_i+0x64>
 80070c2:	2963      	cmp	r1, #99	; 0x63
 80070c4:	d036      	beq.n	8007134 <_printf_i+0x90>
 80070c6:	d80a      	bhi.n	80070de <_printf_i+0x3a>
 80070c8:	2900      	cmp	r1, #0
 80070ca:	f000 80b9 	beq.w	8007240 <_printf_i+0x19c>
 80070ce:	2958      	cmp	r1, #88	; 0x58
 80070d0:	f000 8083 	beq.w	80071da <_printf_i+0x136>
 80070d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80070dc:	e032      	b.n	8007144 <_printf_i+0xa0>
 80070de:	2964      	cmp	r1, #100	; 0x64
 80070e0:	d001      	beq.n	80070e6 <_printf_i+0x42>
 80070e2:	2969      	cmp	r1, #105	; 0x69
 80070e4:	d1f6      	bne.n	80070d4 <_printf_i+0x30>
 80070e6:	6820      	ldr	r0, [r4, #0]
 80070e8:	6813      	ldr	r3, [r2, #0]
 80070ea:	0605      	lsls	r5, r0, #24
 80070ec:	f103 0104 	add.w	r1, r3, #4
 80070f0:	d52a      	bpl.n	8007148 <_printf_i+0xa4>
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da03      	bge.n	8007102 <_printf_i+0x5e>
 80070fa:	222d      	movs	r2, #45	; 0x2d
 80070fc:	425b      	negs	r3, r3
 80070fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007102:	486f      	ldr	r0, [pc, #444]	; (80072c0 <_printf_i+0x21c>)
 8007104:	220a      	movs	r2, #10
 8007106:	e039      	b.n	800717c <_printf_i+0xd8>
 8007108:	2973      	cmp	r1, #115	; 0x73
 800710a:	f000 809d 	beq.w	8007248 <_printf_i+0x1a4>
 800710e:	d808      	bhi.n	8007122 <_printf_i+0x7e>
 8007110:	296f      	cmp	r1, #111	; 0x6f
 8007112:	d020      	beq.n	8007156 <_printf_i+0xb2>
 8007114:	2970      	cmp	r1, #112	; 0x70
 8007116:	d1dd      	bne.n	80070d4 <_printf_i+0x30>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	f043 0320 	orr.w	r3, r3, #32
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	e003      	b.n	800712a <_printf_i+0x86>
 8007122:	2975      	cmp	r1, #117	; 0x75
 8007124:	d017      	beq.n	8007156 <_printf_i+0xb2>
 8007126:	2978      	cmp	r1, #120	; 0x78
 8007128:	d1d4      	bne.n	80070d4 <_printf_i+0x30>
 800712a:	2378      	movs	r3, #120	; 0x78
 800712c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007130:	4864      	ldr	r0, [pc, #400]	; (80072c4 <_printf_i+0x220>)
 8007132:	e055      	b.n	80071e0 <_printf_i+0x13c>
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6011      	str	r1, [r2, #0]
 800713c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007144:	2301      	movs	r3, #1
 8007146:	e08c      	b.n	8007262 <_printf_i+0x1be>
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6011      	str	r1, [r2, #0]
 800714c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007150:	bf18      	it	ne
 8007152:	b21b      	sxthne	r3, r3
 8007154:	e7cf      	b.n	80070f6 <_printf_i+0x52>
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	6825      	ldr	r5, [r4, #0]
 800715a:	1d18      	adds	r0, r3, #4
 800715c:	6010      	str	r0, [r2, #0]
 800715e:	0628      	lsls	r0, r5, #24
 8007160:	d501      	bpl.n	8007166 <_printf_i+0xc2>
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	e002      	b.n	800716c <_printf_i+0xc8>
 8007166:	0668      	lsls	r0, r5, #25
 8007168:	d5fb      	bpl.n	8007162 <_printf_i+0xbe>
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	4854      	ldr	r0, [pc, #336]	; (80072c0 <_printf_i+0x21c>)
 800716e:	296f      	cmp	r1, #111	; 0x6f
 8007170:	bf14      	ite	ne
 8007172:	220a      	movne	r2, #10
 8007174:	2208      	moveq	r2, #8
 8007176:	2100      	movs	r1, #0
 8007178:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800717c:	6865      	ldr	r5, [r4, #4]
 800717e:	60a5      	str	r5, [r4, #8]
 8007180:	2d00      	cmp	r5, #0
 8007182:	f2c0 8095 	blt.w	80072b0 <_printf_i+0x20c>
 8007186:	6821      	ldr	r1, [r4, #0]
 8007188:	f021 0104 	bic.w	r1, r1, #4
 800718c:	6021      	str	r1, [r4, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d13d      	bne.n	800720e <_printf_i+0x16a>
 8007192:	2d00      	cmp	r5, #0
 8007194:	f040 808e 	bne.w	80072b4 <_printf_i+0x210>
 8007198:	4665      	mov	r5, ip
 800719a:	2a08      	cmp	r2, #8
 800719c:	d10b      	bne.n	80071b6 <_printf_i+0x112>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	07db      	lsls	r3, r3, #31
 80071a2:	d508      	bpl.n	80071b6 <_printf_i+0x112>
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	6862      	ldr	r2, [r4, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	bfde      	ittt	le
 80071ac:	2330      	movle	r3, #48	; 0x30
 80071ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80071b6:	ebac 0305 	sub.w	r3, ip, r5
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	f8cd 8000 	str.w	r8, [sp]
 80071c0:	463b      	mov	r3, r7
 80071c2:	aa03      	add	r2, sp, #12
 80071c4:	4621      	mov	r1, r4
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff fef6 	bl	8006fb8 <_printf_common>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d14d      	bne.n	800726c <_printf_i+0x1c8>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071d4:	b005      	add	sp, #20
 80071d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071da:	4839      	ldr	r0, [pc, #228]	; (80072c0 <_printf_i+0x21c>)
 80071dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	6821      	ldr	r1, [r4, #0]
 80071e4:	1d1d      	adds	r5, r3, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6015      	str	r5, [r2, #0]
 80071ea:	060a      	lsls	r2, r1, #24
 80071ec:	d50b      	bpl.n	8007206 <_printf_i+0x162>
 80071ee:	07ca      	lsls	r2, r1, #31
 80071f0:	bf44      	itt	mi
 80071f2:	f041 0120 	orrmi.w	r1, r1, #32
 80071f6:	6021      	strmi	r1, [r4, #0]
 80071f8:	b91b      	cbnz	r3, 8007202 <_printf_i+0x15e>
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	f022 0220 	bic.w	r2, r2, #32
 8007200:	6022      	str	r2, [r4, #0]
 8007202:	2210      	movs	r2, #16
 8007204:	e7b7      	b.n	8007176 <_printf_i+0xd2>
 8007206:	064d      	lsls	r5, r1, #25
 8007208:	bf48      	it	mi
 800720a:	b29b      	uxthmi	r3, r3
 800720c:	e7ef      	b.n	80071ee <_printf_i+0x14a>
 800720e:	4665      	mov	r5, ip
 8007210:	fbb3 f1f2 	udiv	r1, r3, r2
 8007214:	fb02 3311 	mls	r3, r2, r1, r3
 8007218:	5cc3      	ldrb	r3, [r0, r3]
 800721a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800721e:	460b      	mov	r3, r1
 8007220:	2900      	cmp	r1, #0
 8007222:	d1f5      	bne.n	8007210 <_printf_i+0x16c>
 8007224:	e7b9      	b.n	800719a <_printf_i+0xf6>
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	6825      	ldr	r5, [r4, #0]
 800722a:	6961      	ldr	r1, [r4, #20]
 800722c:	1d18      	adds	r0, r3, #4
 800722e:	6010      	str	r0, [r2, #0]
 8007230:	0628      	lsls	r0, r5, #24
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	d501      	bpl.n	800723a <_printf_i+0x196>
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	e002      	b.n	8007240 <_printf_i+0x19c>
 800723a:	066a      	lsls	r2, r5, #25
 800723c:	d5fb      	bpl.n	8007236 <_printf_i+0x192>
 800723e:	8019      	strh	r1, [r3, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	6123      	str	r3, [r4, #16]
 8007244:	4665      	mov	r5, ip
 8007246:	e7b9      	b.n	80071bc <_printf_i+0x118>
 8007248:	6813      	ldr	r3, [r2, #0]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	6011      	str	r1, [r2, #0]
 800724e:	681d      	ldr	r5, [r3, #0]
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	2100      	movs	r1, #0
 8007254:	4628      	mov	r0, r5
 8007256:	f7f8 ffc3 	bl	80001e0 <memchr>
 800725a:	b108      	cbz	r0, 8007260 <_printf_i+0x1bc>
 800725c:	1b40      	subs	r0, r0, r5
 800725e:	6060      	str	r0, [r4, #4]
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	2300      	movs	r3, #0
 8007266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726a:	e7a7      	b.n	80071bc <_printf_i+0x118>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	462a      	mov	r2, r5
 8007270:	4639      	mov	r1, r7
 8007272:	4630      	mov	r0, r6
 8007274:	47c0      	blx	r8
 8007276:	3001      	adds	r0, #1
 8007278:	d0aa      	beq.n	80071d0 <_printf_i+0x12c>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	079b      	lsls	r3, r3, #30
 800727e:	d413      	bmi.n	80072a8 <_printf_i+0x204>
 8007280:	68e0      	ldr	r0, [r4, #12]
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	4298      	cmp	r0, r3
 8007286:	bfb8      	it	lt
 8007288:	4618      	movlt	r0, r3
 800728a:	e7a3      	b.n	80071d4 <_printf_i+0x130>
 800728c:	2301      	movs	r3, #1
 800728e:	464a      	mov	r2, r9
 8007290:	4639      	mov	r1, r7
 8007292:	4630      	mov	r0, r6
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d09a      	beq.n	80071d0 <_printf_i+0x12c>
 800729a:	3501      	adds	r5, #1
 800729c:	68e3      	ldr	r3, [r4, #12]
 800729e:	9a03      	ldr	r2, [sp, #12]
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	dcf2      	bgt.n	800728c <_printf_i+0x1e8>
 80072a6:	e7eb      	b.n	8007280 <_printf_i+0x1dc>
 80072a8:	2500      	movs	r5, #0
 80072aa:	f104 0919 	add.w	r9, r4, #25
 80072ae:	e7f5      	b.n	800729c <_printf_i+0x1f8>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1ac      	bne.n	800720e <_printf_i+0x16a>
 80072b4:	7803      	ldrb	r3, [r0, #0]
 80072b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072be:	e76c      	b.n	800719a <_printf_i+0xf6>
 80072c0:	08007d9f 	.word	0x08007d9f
 80072c4:	08007db0 	.word	0x08007db0

080072c8 <_sbrk_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4c06      	ldr	r4, [pc, #24]	; (80072e4 <_sbrk_r+0x1c>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4605      	mov	r5, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	f7fa fdd6 	bl	8001e84 <_sbrk>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_sbrk_r+0x1a>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_sbrk_r+0x1a>
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000fc4 	.word	0x20000fc4

080072e8 <__sread>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	f000 faa4 	bl	800783c <_read_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	bfab      	itete	ge
 80072f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072fa:	89a3      	ldrhlt	r3, [r4, #12]
 80072fc:	181b      	addge	r3, r3, r0
 80072fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007302:	bfac      	ite	ge
 8007304:	6563      	strge	r3, [r4, #84]	; 0x54
 8007306:	81a3      	strhlt	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__swrite>:
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	461f      	mov	r7, r3
 8007310:	898b      	ldrh	r3, [r1, #12]
 8007312:	05db      	lsls	r3, r3, #23
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	4616      	mov	r6, r2
 800731a:	d505      	bpl.n	8007328 <__swrite+0x1e>
 800731c:	2302      	movs	r3, #2
 800731e:	2200      	movs	r2, #0
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	f000 f9c4 	bl	80076b0 <_lseek_r>
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733e:	f000 b877 	b.w	8007430 <_write_r>

08007342 <__sseek>:
 8007342:	b510      	push	{r4, lr}
 8007344:	460c      	mov	r4, r1
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 f9b1 	bl	80076b0 <_lseek_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	bf15      	itete	ne
 8007354:	6560      	strne	r0, [r4, #84]	; 0x54
 8007356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800735a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800735e:	81a3      	strheq	r3, [r4, #12]
 8007360:	bf18      	it	ne
 8007362:	81a3      	strhne	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__sclose>:
 8007366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736a:	f000 b8e1 	b.w	8007530 <_close_r>
	...

08007370 <__swbuf_r>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	460e      	mov	r6, r1
 8007374:	4614      	mov	r4, r2
 8007376:	4605      	mov	r5, r0
 8007378:	b118      	cbz	r0, 8007382 <__swbuf_r+0x12>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <__swbuf_r+0x12>
 800737e:	f7ff fbe1 	bl	8006b44 <__sinit>
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <__swbuf_r+0x98>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d12a      	bne.n	80073de <__swbuf_r+0x6e>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	071a      	lsls	r2, r3, #28
 8007392:	d52e      	bpl.n	80073f2 <__swbuf_r+0x82>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b363      	cbz	r3, 80073f2 <__swbuf_r+0x82>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1ac0      	subs	r0, r0, r3
 800739e:	6963      	ldr	r3, [r4, #20]
 80073a0:	b2f6      	uxtb	r6, r6
 80073a2:	4283      	cmp	r3, r0
 80073a4:	4637      	mov	r7, r6
 80073a6:	dc04      	bgt.n	80073b2 <__swbuf_r+0x42>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f956 	bl	800765c <_fflush_r>
 80073b0:	bb28      	cbnz	r0, 80073fe <__swbuf_r+0x8e>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60a3      	str	r3, [r4, #8]
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	6022      	str	r2, [r4, #0]
 80073be:	701e      	strb	r6, [r3, #0]
 80073c0:	6963      	ldr	r3, [r4, #20]
 80073c2:	3001      	adds	r0, #1
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d004      	beq.n	80073d2 <__swbuf_r+0x62>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d519      	bpl.n	8007402 <__swbuf_r+0x92>
 80073ce:	2e0a      	cmp	r6, #10
 80073d0:	d117      	bne.n	8007402 <__swbuf_r+0x92>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f941 	bl	800765c <_fflush_r>
 80073da:	b190      	cbz	r0, 8007402 <__swbuf_r+0x92>
 80073dc:	e00f      	b.n	80073fe <__swbuf_r+0x8e>
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <__swbuf_r+0x9c>)
 80073e0:	429c      	cmp	r4, r3
 80073e2:	d101      	bne.n	80073e8 <__swbuf_r+0x78>
 80073e4:	68ac      	ldr	r4, [r5, #8]
 80073e6:	e7d0      	b.n	800738a <__swbuf_r+0x1a>
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <__swbuf_r+0xa0>)
 80073ea:	429c      	cmp	r4, r3
 80073ec:	bf08      	it	eq
 80073ee:	68ec      	ldreq	r4, [r5, #12]
 80073f0:	e7cb      	b.n	800738a <__swbuf_r+0x1a>
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 f82d 	bl	8007454 <__swsetup_r>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d0cc      	beq.n	8007398 <__swbuf_r+0x28>
 80073fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007402:	4638      	mov	r0, r7
 8007404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007406:	bf00      	nop
 8007408:	08007d44 	.word	0x08007d44
 800740c:	08007d64 	.word	0x08007d64
 8007410:	08007d24 	.word	0x08007d24

08007414 <__ascii_wctomb>:
 8007414:	b149      	cbz	r1, 800742a <__ascii_wctomb+0x16>
 8007416:	2aff      	cmp	r2, #255	; 0xff
 8007418:	bf85      	ittet	hi
 800741a:	238a      	movhi	r3, #138	; 0x8a
 800741c:	6003      	strhi	r3, [r0, #0]
 800741e:	700a      	strbls	r2, [r1, #0]
 8007420:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007424:	bf98      	it	ls
 8007426:	2001      	movls	r0, #1
 8007428:	4770      	bx	lr
 800742a:	4608      	mov	r0, r1
 800742c:	4770      	bx	lr
	...

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4c07      	ldr	r4, [pc, #28]	; (8007450 <_write_r+0x20>)
 8007434:	4605      	mov	r5, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	6022      	str	r2, [r4, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fa f83e 	bl	80014c0 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000fc4 	.word	0x20000fc4

08007454 <__swsetup_r>:
 8007454:	4b32      	ldr	r3, [pc, #200]	; (8007520 <__swsetup_r+0xcc>)
 8007456:	b570      	push	{r4, r5, r6, lr}
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	4606      	mov	r6, r0
 800745c:	460c      	mov	r4, r1
 800745e:	b125      	cbz	r5, 800746a <__swsetup_r+0x16>
 8007460:	69ab      	ldr	r3, [r5, #24]
 8007462:	b913      	cbnz	r3, 800746a <__swsetup_r+0x16>
 8007464:	4628      	mov	r0, r5
 8007466:	f7ff fb6d 	bl	8006b44 <__sinit>
 800746a:	4b2e      	ldr	r3, [pc, #184]	; (8007524 <__swsetup_r+0xd0>)
 800746c:	429c      	cmp	r4, r3
 800746e:	d10f      	bne.n	8007490 <__swsetup_r+0x3c>
 8007470:	686c      	ldr	r4, [r5, #4]
 8007472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007476:	b29a      	uxth	r2, r3
 8007478:	0715      	lsls	r5, r2, #28
 800747a:	d42c      	bmi.n	80074d6 <__swsetup_r+0x82>
 800747c:	06d0      	lsls	r0, r2, #27
 800747e:	d411      	bmi.n	80074a4 <__swsetup_r+0x50>
 8007480:	2209      	movs	r2, #9
 8007482:	6032      	str	r2, [r6, #0]
 8007484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800748e:	e03e      	b.n	800750e <__swsetup_r+0xba>
 8007490:	4b25      	ldr	r3, [pc, #148]	; (8007528 <__swsetup_r+0xd4>)
 8007492:	429c      	cmp	r4, r3
 8007494:	d101      	bne.n	800749a <__swsetup_r+0x46>
 8007496:	68ac      	ldr	r4, [r5, #8]
 8007498:	e7eb      	b.n	8007472 <__swsetup_r+0x1e>
 800749a:	4b24      	ldr	r3, [pc, #144]	; (800752c <__swsetup_r+0xd8>)
 800749c:	429c      	cmp	r4, r3
 800749e:	bf08      	it	eq
 80074a0:	68ec      	ldreq	r4, [r5, #12]
 80074a2:	e7e6      	b.n	8007472 <__swsetup_r+0x1e>
 80074a4:	0751      	lsls	r1, r2, #29
 80074a6:	d512      	bpl.n	80074ce <__swsetup_r+0x7a>
 80074a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074aa:	b141      	cbz	r1, 80074be <__swsetup_r+0x6a>
 80074ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074b0:	4299      	cmp	r1, r3
 80074b2:	d002      	beq.n	80074ba <__swsetup_r+0x66>
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 f973 	bl	80077a0 <_free_r>
 80074ba:	2300      	movs	r3, #0
 80074bc:	6363      	str	r3, [r4, #52]	; 0x34
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	2300      	movs	r3, #0
 80074c8:	6063      	str	r3, [r4, #4]
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f043 0308 	orr.w	r3, r3, #8
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	b94b      	cbnz	r3, 80074ee <__swsetup_r+0x9a>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e4:	d003      	beq.n	80074ee <__swsetup_r+0x9a>
 80074e6:	4621      	mov	r1, r4
 80074e8:	4630      	mov	r0, r6
 80074ea:	f000 f917 	bl	800771c <__smakebuf_r>
 80074ee:	89a2      	ldrh	r2, [r4, #12]
 80074f0:	f012 0301 	ands.w	r3, r2, #1
 80074f4:	d00c      	beq.n	8007510 <__swsetup_r+0xbc>
 80074f6:	2300      	movs	r3, #0
 80074f8:	60a3      	str	r3, [r4, #8]
 80074fa:	6963      	ldr	r3, [r4, #20]
 80074fc:	425b      	negs	r3, r3
 80074fe:	61a3      	str	r3, [r4, #24]
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	b953      	cbnz	r3, 800751a <__swsetup_r+0xc6>
 8007504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007508:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800750c:	d1ba      	bne.n	8007484 <__swsetup_r+0x30>
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	0792      	lsls	r2, r2, #30
 8007512:	bf58      	it	pl
 8007514:	6963      	ldrpl	r3, [r4, #20]
 8007516:	60a3      	str	r3, [r4, #8]
 8007518:	e7f2      	b.n	8007500 <__swsetup_r+0xac>
 800751a:	2000      	movs	r0, #0
 800751c:	e7f7      	b.n	800750e <__swsetup_r+0xba>
 800751e:	bf00      	nop
 8007520:	2000000c 	.word	0x2000000c
 8007524:	08007d44 	.word	0x08007d44
 8007528:	08007d64 	.word	0x08007d64
 800752c:	08007d24 	.word	0x08007d24

08007530 <_close_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4c06      	ldr	r4, [pc, #24]	; (800754c <_close_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4605      	mov	r5, r0
 8007538:	4608      	mov	r0, r1
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	f7fa fc6e 	bl	8001e1c <_close>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_close_r+0x1a>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	b103      	cbz	r3, 800754a <_close_r+0x1a>
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000fc4 	.word	0x20000fc4

08007550 <__sflush_r>:
 8007550:	898a      	ldrh	r2, [r1, #12]
 8007552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	4605      	mov	r5, r0
 8007558:	0710      	lsls	r0, r2, #28
 800755a:	460c      	mov	r4, r1
 800755c:	d458      	bmi.n	8007610 <__sflush_r+0xc0>
 800755e:	684b      	ldr	r3, [r1, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	dc05      	bgt.n	8007570 <__sflush_r+0x20>
 8007564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	dc02      	bgt.n	8007570 <__sflush_r+0x20>
 800756a:	2000      	movs	r0, #0
 800756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007572:	2e00      	cmp	r6, #0
 8007574:	d0f9      	beq.n	800756a <__sflush_r+0x1a>
 8007576:	2300      	movs	r3, #0
 8007578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800757c:	682f      	ldr	r7, [r5, #0]
 800757e:	6a21      	ldr	r1, [r4, #32]
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	d032      	beq.n	80075ea <__sflush_r+0x9a>
 8007584:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	075a      	lsls	r2, r3, #29
 800758a:	d505      	bpl.n	8007598 <__sflush_r+0x48>
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	1ac0      	subs	r0, r0, r3
 8007590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007592:	b10b      	cbz	r3, 8007598 <__sflush_r+0x48>
 8007594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007596:	1ac0      	subs	r0, r0, r3
 8007598:	2300      	movs	r3, #0
 800759a:	4602      	mov	r2, r0
 800759c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800759e:	6a21      	ldr	r1, [r4, #32]
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	d106      	bne.n	80075b8 <__sflush_r+0x68>
 80075aa:	6829      	ldr	r1, [r5, #0]
 80075ac:	291d      	cmp	r1, #29
 80075ae:	d848      	bhi.n	8007642 <__sflush_r+0xf2>
 80075b0:	4a29      	ldr	r2, [pc, #164]	; (8007658 <__sflush_r+0x108>)
 80075b2:	40ca      	lsrs	r2, r1
 80075b4:	07d6      	lsls	r6, r2, #31
 80075b6:	d544      	bpl.n	8007642 <__sflush_r+0xf2>
 80075b8:	2200      	movs	r2, #0
 80075ba:	6062      	str	r2, [r4, #4]
 80075bc:	04d9      	lsls	r1, r3, #19
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	d504      	bpl.n	80075ce <__sflush_r+0x7e>
 80075c4:	1c42      	adds	r2, r0, #1
 80075c6:	d101      	bne.n	80075cc <__sflush_r+0x7c>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b903      	cbnz	r3, 80075ce <__sflush_r+0x7e>
 80075cc:	6560      	str	r0, [r4, #84]	; 0x54
 80075ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d0:	602f      	str	r7, [r5, #0]
 80075d2:	2900      	cmp	r1, #0
 80075d4:	d0c9      	beq.n	800756a <__sflush_r+0x1a>
 80075d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075da:	4299      	cmp	r1, r3
 80075dc:	d002      	beq.n	80075e4 <__sflush_r+0x94>
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 f8de 	bl	80077a0 <_free_r>
 80075e4:	2000      	movs	r0, #0
 80075e6:	6360      	str	r0, [r4, #52]	; 0x34
 80075e8:	e7c0      	b.n	800756c <__sflush_r+0x1c>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b0      	blx	r6
 80075f0:	1c41      	adds	r1, r0, #1
 80075f2:	d1c8      	bne.n	8007586 <__sflush_r+0x36>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0c5      	beq.n	8007586 <__sflush_r+0x36>
 80075fa:	2b1d      	cmp	r3, #29
 80075fc:	d001      	beq.n	8007602 <__sflush_r+0xb2>
 80075fe:	2b16      	cmp	r3, #22
 8007600:	d101      	bne.n	8007606 <__sflush_r+0xb6>
 8007602:	602f      	str	r7, [r5, #0]
 8007604:	e7b1      	b.n	800756a <__sflush_r+0x1a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	e7ad      	b.n	800756c <__sflush_r+0x1c>
 8007610:	690f      	ldr	r7, [r1, #16]
 8007612:	2f00      	cmp	r7, #0
 8007614:	d0a9      	beq.n	800756a <__sflush_r+0x1a>
 8007616:	0793      	lsls	r3, r2, #30
 8007618:	680e      	ldr	r6, [r1, #0]
 800761a:	bf08      	it	eq
 800761c:	694b      	ldreq	r3, [r1, #20]
 800761e:	600f      	str	r7, [r1, #0]
 8007620:	bf18      	it	ne
 8007622:	2300      	movne	r3, #0
 8007624:	eba6 0807 	sub.w	r8, r6, r7
 8007628:	608b      	str	r3, [r1, #8]
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	dd9c      	ble.n	800756a <__sflush_r+0x1a>
 8007630:	4643      	mov	r3, r8
 8007632:	463a      	mov	r2, r7
 8007634:	6a21      	ldr	r1, [r4, #32]
 8007636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007638:	4628      	mov	r0, r5
 800763a:	47b0      	blx	r6
 800763c:	2800      	cmp	r0, #0
 800763e:	dc06      	bgt.n	800764e <__sflush_r+0xfe>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800764c:	e78e      	b.n	800756c <__sflush_r+0x1c>
 800764e:	4407      	add	r7, r0
 8007650:	eba8 0800 	sub.w	r8, r8, r0
 8007654:	e7e9      	b.n	800762a <__sflush_r+0xda>
 8007656:	bf00      	nop
 8007658:	20400001 	.word	0x20400001

0800765c <_fflush_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	4605      	mov	r5, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b1db      	cbz	r3, 800769e <_fflush_r+0x42>
 8007666:	b118      	cbz	r0, 8007670 <_fflush_r+0x14>
 8007668:	6983      	ldr	r3, [r0, #24]
 800766a:	b90b      	cbnz	r3, 8007670 <_fflush_r+0x14>
 800766c:	f7ff fa6a 	bl	8006b44 <__sinit>
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <_fflush_r+0x48>)
 8007672:	429c      	cmp	r4, r3
 8007674:	d109      	bne.n	800768a <_fflush_r+0x2e>
 8007676:	686c      	ldr	r4, [r5, #4]
 8007678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800767c:	b17b      	cbz	r3, 800769e <_fflush_r+0x42>
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007686:	f7ff bf63 	b.w	8007550 <__sflush_r>
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <_fflush_r+0x4c>)
 800768c:	429c      	cmp	r4, r3
 800768e:	d101      	bne.n	8007694 <_fflush_r+0x38>
 8007690:	68ac      	ldr	r4, [r5, #8]
 8007692:	e7f1      	b.n	8007678 <_fflush_r+0x1c>
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <_fflush_r+0x50>)
 8007696:	429c      	cmp	r4, r3
 8007698:	bf08      	it	eq
 800769a:	68ec      	ldreq	r4, [r5, #12]
 800769c:	e7ec      	b.n	8007678 <_fflush_r+0x1c>
 800769e:	2000      	movs	r0, #0
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	08007d44 	.word	0x08007d44
 80076a8:	08007d64 	.word	0x08007d64
 80076ac:	08007d24 	.word	0x08007d24

080076b0 <_lseek_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4c07      	ldr	r4, [pc, #28]	; (80076d0 <_lseek_r+0x20>)
 80076b4:	4605      	mov	r5, r0
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7fa fbd3 	bl	8001e6a <_lseek>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_lseek_r+0x1e>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_lseek_r+0x1e>
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	20000fc4 	.word	0x20000fc4

080076d4 <__swhatbuf_r>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	460e      	mov	r6, r1
 80076d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076dc:	2900      	cmp	r1, #0
 80076de:	b096      	sub	sp, #88	; 0x58
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	da07      	bge.n	80076f6 <__swhatbuf_r+0x22>
 80076e6:	2300      	movs	r3, #0
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	89b3      	ldrh	r3, [r6, #12]
 80076ec:	061a      	lsls	r2, r3, #24
 80076ee:	d410      	bmi.n	8007712 <__swhatbuf_r+0x3e>
 80076f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f4:	e00e      	b.n	8007714 <__swhatbuf_r+0x40>
 80076f6:	466a      	mov	r2, sp
 80076f8:	f000 f8b2 	bl	8007860 <_fstat_r>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	dbf2      	blt.n	80076e6 <__swhatbuf_r+0x12>
 8007700:	9a01      	ldr	r2, [sp, #4]
 8007702:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007706:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800770a:	425a      	negs	r2, r3
 800770c:	415a      	adcs	r2, r3
 800770e:	602a      	str	r2, [r5, #0]
 8007710:	e7ee      	b.n	80076f0 <__swhatbuf_r+0x1c>
 8007712:	2340      	movs	r3, #64	; 0x40
 8007714:	2000      	movs	r0, #0
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	b016      	add	sp, #88	; 0x58
 800771a:	bd70      	pop	{r4, r5, r6, pc}

0800771c <__smakebuf_r>:
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007720:	079d      	lsls	r5, r3, #30
 8007722:	4606      	mov	r6, r0
 8007724:	460c      	mov	r4, r1
 8007726:	d507      	bpl.n	8007738 <__smakebuf_r+0x1c>
 8007728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	2301      	movs	r3, #1
 8007732:	6163      	str	r3, [r4, #20]
 8007734:	b002      	add	sp, #8
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	ab01      	add	r3, sp, #4
 800773a:	466a      	mov	r2, sp
 800773c:	f7ff ffca 	bl	80076d4 <__swhatbuf_r>
 8007740:	9900      	ldr	r1, [sp, #0]
 8007742:	4605      	mov	r5, r0
 8007744:	4630      	mov	r0, r6
 8007746:	f7ff fa9d 	bl	8006c84 <_malloc_r>
 800774a:	b948      	cbnz	r0, 8007760 <__smakebuf_r+0x44>
 800774c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007750:	059a      	lsls	r2, r3, #22
 8007752:	d4ef      	bmi.n	8007734 <__smakebuf_r+0x18>
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	e7e3      	b.n	8007728 <__smakebuf_r+0xc>
 8007760:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <__smakebuf_r+0x7c>)
 8007762:	62b3      	str	r3, [r6, #40]	; 0x28
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	6020      	str	r0, [r4, #0]
 8007768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776c:	81a3      	strh	r3, [r4, #12]
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	6163      	str	r3, [r4, #20]
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	6120      	str	r0, [r4, #16]
 8007776:	b15b      	cbz	r3, 8007790 <__smakebuf_r+0x74>
 8007778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777c:	4630      	mov	r0, r6
 800777e:	f000 f881 	bl	8007884 <_isatty_r>
 8007782:	b128      	cbz	r0, 8007790 <__smakebuf_r+0x74>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	431d      	orrs	r5, r3
 8007794:	81a5      	strh	r5, [r4, #12]
 8007796:	e7cd      	b.n	8007734 <__smakebuf_r+0x18>
 8007798:	08006b0d 	.word	0x08006b0d

0800779c <__malloc_lock>:
 800779c:	4770      	bx	lr

0800779e <__malloc_unlock>:
 800779e:	4770      	bx	lr

080077a0 <_free_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d045      	beq.n	8007834 <_free_r+0x94>
 80077a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ac:	1f0c      	subs	r4, r1, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	18e4      	addlt	r4, r4, r3
 80077b4:	f7ff fff2 	bl	800779c <__malloc_lock>
 80077b8:	4a1f      	ldr	r2, [pc, #124]	; (8007838 <_free_r+0x98>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	4610      	mov	r0, r2
 80077be:	b933      	cbnz	r3, 80077ce <_free_r+0x2e>
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	6014      	str	r4, [r2, #0]
 80077c4:	4628      	mov	r0, r5
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	f7ff bfe8 	b.w	800779e <__malloc_unlock>
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	d90c      	bls.n	80077ec <_free_r+0x4c>
 80077d2:	6821      	ldr	r1, [r4, #0]
 80077d4:	1862      	adds	r2, r4, r1
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bf04      	itt	eq
 80077da:	681a      	ldreq	r2, [r3, #0]
 80077dc:	685b      	ldreq	r3, [r3, #4]
 80077de:	6063      	str	r3, [r4, #4]
 80077e0:	bf04      	itt	eq
 80077e2:	1852      	addeq	r2, r2, r1
 80077e4:	6022      	streq	r2, [r4, #0]
 80077e6:	6004      	str	r4, [r0, #0]
 80077e8:	e7ec      	b.n	80077c4 <_free_r+0x24>
 80077ea:	4613      	mov	r3, r2
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	b10a      	cbz	r2, 80077f4 <_free_r+0x54>
 80077f0:	42a2      	cmp	r2, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x4a>
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	1858      	adds	r0, r3, r1
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x74>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	4401      	add	r1, r0
 8007800:	1858      	adds	r0, r3, r1
 8007802:	4282      	cmp	r2, r0
 8007804:	6019      	str	r1, [r3, #0]
 8007806:	d1dd      	bne.n	80077c4 <_free_r+0x24>
 8007808:	6810      	ldr	r0, [r2, #0]
 800780a:	6852      	ldr	r2, [r2, #4]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	4401      	add	r1, r0
 8007810:	6019      	str	r1, [r3, #0]
 8007812:	e7d7      	b.n	80077c4 <_free_r+0x24>
 8007814:	d902      	bls.n	800781c <_free_r+0x7c>
 8007816:	230c      	movs	r3, #12
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	e7d3      	b.n	80077c4 <_free_r+0x24>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	1821      	adds	r1, r4, r0
 8007820:	428a      	cmp	r2, r1
 8007822:	bf04      	itt	eq
 8007824:	6811      	ldreq	r1, [r2, #0]
 8007826:	6852      	ldreq	r2, [r2, #4]
 8007828:	6062      	str	r2, [r4, #4]
 800782a:	bf04      	itt	eq
 800782c:	1809      	addeq	r1, r1, r0
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	605c      	str	r4, [r3, #4]
 8007832:	e7c7      	b.n	80077c4 <_free_r+0x24>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	bf00      	nop
 8007838:	20000a44 	.word	0x20000a44

0800783c <_read_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4c07      	ldr	r4, [pc, #28]	; (800785c <_read_r+0x20>)
 8007840:	4605      	mov	r5, r0
 8007842:	4608      	mov	r0, r1
 8007844:	4611      	mov	r1, r2
 8007846:	2200      	movs	r2, #0
 8007848:	6022      	str	r2, [r4, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	f7f9 fe4c 	bl	80014e8 <_read>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_read_r+0x1e>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	b103      	cbz	r3, 800785a <_read_r+0x1e>
 8007858:	602b      	str	r3, [r5, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	20000fc4 	.word	0x20000fc4

08007860 <_fstat_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4c07      	ldr	r4, [pc, #28]	; (8007880 <_fstat_r+0x20>)
 8007864:	2300      	movs	r3, #0
 8007866:	4605      	mov	r5, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	f7fa fae1 	bl	8001e34 <_fstat>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_fstat_r+0x1c>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	b103      	cbz	r3, 800787c <_fstat_r+0x1c>
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	20000fc4 	.word	0x20000fc4

08007884 <_isatty_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4c06      	ldr	r4, [pc, #24]	; (80078a0 <_isatty_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4605      	mov	r5, r0
 800788c:	4608      	mov	r0, r1
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	f7fa fae0 	bl	8001e54 <_isatty>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_isatty_r+0x1a>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	b103      	cbz	r3, 800789e <_isatty_r+0x1a>
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000fc4 	.word	0x20000fc4

080078a4 <_init>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr

080078b0 <_fini>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr
